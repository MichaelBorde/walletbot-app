{"version":3,"file":"static/js/435.9671d37f.chunk.js","mappings":"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","sources":["../node_modules/@safe-global/safe-apps-sdk/src/communication/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/messageFormatter.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/methods.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/utils.ts","../node_modules/@safe-global/safe-apps-sdk/src/decorators/requirePermissions.ts","../node_modules/@safe-global/safe-apps-sdk/src/eth/constants.ts","../node_modules/@safe-global/safe-apps-sdk/src/eth/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/safe/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/safe/signatures.ts","../node_modules/@safe-global/safe-apps-sdk/src/sdk.ts","../node_modules/@safe-global/safe-apps-sdk/src/txs/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/gateway.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/messaging.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/permissions.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/sdk.ts","../node_modules/@safe-global/safe-apps-sdk/src/utils.ts","../node_modules/@safe-global/safe-apps-sdk/src/wallet/index.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/curves/src/abstract/hash-to-curve.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/curves/src/secp256k1.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/hashes/src/_assert.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/hashes/src/_u64.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/hashes/src/crypto.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/hashes/src/hmac.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/hashes/src/ripemd160.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/hashes/src/sha256.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/hashes/src/sha3.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/@noble/hashes/src/utils.ts","../../src/config.ts","../../src/endpoint.ts","../../src/index.ts","../../../src/types/chains.ts","../../../src/types/common.ts","../../../src/types/decoded-data.ts","../../../src/types/notifications.ts","../../../src/types/safe-apps.ts","../../../src/types/safe-info.ts","../../../src/types/safe-messages.ts","../../../src/types/transactions.ts","../../src/utils.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/errors.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/errors/abiItem.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/errors/abiParameter.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/errors/signature.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/errors/splitParameters.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/errors/struct.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/formatAbi.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/formatAbiItem.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/formatAbiParameter.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/formatAbiParameters.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/parseAbi.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/parseAbiItem.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/parseAbiParameter.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/parseAbiParameters.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/runtime/cache.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/runtime/signatures.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/runtime/structs.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/runtime/utils.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/index.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/narrow.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/regex.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/version.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/accounts/utils/parseAccount.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/accounts/utils/publicKeyToAddress.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/ens/getEnsAddress.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/ens/getEnsAvatar.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/ens/getEnsName.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/ens/getEnsResolver.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/ens/getEnsText.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/getContract.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/call.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/createBlockFilter.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/createContractEventFilter.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/createEventFilter.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/createPendingTransactionFilter.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/estimateContractGas.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/estimateFeesPerGas.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/estimateGas.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/estimateMaxPriorityFeePerGas.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getBalance.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getBlock.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getBlockNumber.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getBlockTransactionCount.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getBytecode.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getChainId.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getContractEvents.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getFeeHistory.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getFilterChanges.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getFilterLogs.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getGasPrice.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getLogs.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getProof.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getStorageAt.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getTransaction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getTransactionConfirmations.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getTransactionCount.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getTransactionReceipt.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/multicall.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/readContract.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/simulateContract.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/uninstallFilter.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/verifyHash.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/verifyMessage.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/verifyTypedData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/waitForTransactionReceipt.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/watchBlockNumber.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/watchBlocks.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/watchContractEvent.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/watchEvent.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/watchPendingTransactions.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/dropTransaction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/dumpState.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/getAutomine.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/getTxpoolContent.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/getTxpoolStatus.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/impersonateAccount.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/increaseTime.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/inspectTxpool.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/loadState.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/mine.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/removeBlockTimestampInterval.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/reset.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/revert.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/sendUnsignedTransaction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setAutomine.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setBalance.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setBlockGasLimit.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setBlockTimestampInterval.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setCode.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setCoinbase.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setIntervalMining.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setLoggingEnabled.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setMinGasPrice.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setNextBlockBaseFeePerGas.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setNextBlockTimestamp.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setNonce.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setRpcUrl.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setStorageAt.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/snapshot.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/stopImpersonatingAccount.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/addChain.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/deployContract.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/getAddresses.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/getPermissions.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/prepareTransactionRequest.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/requestAddresses.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/requestPermissions.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/sendRawTransaction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/sendTransaction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/signMessage.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/signTransaction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/signTypedData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/switchChain.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/watchAsset.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/writeContract.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/createClient.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/createPublicClient.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/createTestClient.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/createWalletClient.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/decorators/public.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/decorators/test.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/decorators/wallet.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/transports/createTransport.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/transports/custom.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/transports/fallback.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/transports/http.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/transports/webSocket.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/constants/abis.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/constants/address.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/constants/bytes.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/constants/contract.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/constants/contracts.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/constants/number.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/constants/solidity.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/constants/strings.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/constants/unit.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/abi.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/account.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/address.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/base.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/block.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/ccip.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/chain.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/contract.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/cursor.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/data.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/encoding.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/ens.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/estimateGas.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/fee.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/log.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/node.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/request.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/rpc.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/transaction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/transport.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/utils.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/version.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/index.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/decodeAbiParameters.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/decodeDeployData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/decodeErrorResult.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/decodeEventLog.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/decodeFunctionData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/decodeFunctionResult.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodeAbiParameters.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodeDeployData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodeErrorResult.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodeEventTopics.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodeFunctionData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodeFunctionResult.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodePacked.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/formatAbiItem.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/formatAbiItemWithArgs.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/getAbiItem.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/accounts.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/address/getAddress.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/address/getContractAddress.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/address/isAddress.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/address/isAddressEqual.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/buildRequest.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/ccip.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/chain/assertCurrentChain.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/chain/defineChain.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/chain/extractChain.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/chain/getChainContractAddress.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/contract/extractFunctionParts.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/cursor.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/concat.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/isBytes.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/isBytesEqual.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/isHex.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/pad.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/size.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/slice.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/trim.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/encoding/fromBytes.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/encoding/fromHex.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/encoding/fromRlp.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/encoding/toBytes.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/encoding/toHex.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/encoding/toRlp.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/ens/avatar/parseAvatarRecord.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/ens/avatar/utils.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/ens/encodeLabelhash.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/ens/encodedLabelToLabelhash.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/ens/errors.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/ens/labelhash.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/ens/namehash.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/ens/packetToBytes.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/errors/getCallError.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/errors/getContractError.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/errors/getEstimateGasError.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/errors/getNodeError.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/errors/getTransactionError.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/filters/createFilterRequestScope.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/formatters/block.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/formatters/extract.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/formatters/feeHistory.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/formatters/formatter.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/formatters/log.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/formatters/proof.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/formatters/transaction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/formatters/transactionReceipt.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/formatters/transactionRequest.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/getAction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/getEventSelector.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/getEventSignature.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/getFunctionSelector.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/getFunctionSignature.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/isHash.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/keccak256.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/normalizeSignature.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/ripemd160.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/sha256.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/index.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/observe.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/poll.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/promise/createBatchScheduler.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/promise/withCache.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/promise/withRetry.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/promise/withTimeout.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/regex.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/rpc.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/compactSignatureToHex.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/compactSignatureToSignature.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/hashMessage.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/hashTypedData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/hexToCompactSignature.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/hexToSignature.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/recoverAddress.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/recoverMessageAddress.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/recoverPublicKey.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/recoverTypedDataAddress.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/signatureToCompactSignature.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/signatureToHex.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/verifyMessage.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/verifyTypedData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/stringify.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/transaction/assertRequest.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/transaction/assertTransaction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/transaction/getSerializedTransactionType.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/transaction/getTransactionType.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/transaction/parseTransaction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/transaction/serializeAccessList.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/transaction/serializeTransaction.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/typedData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/uid.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/unit/formatEther.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/unit/formatGwei.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/unit/formatUnits.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/unit/parseEther.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/unit/parseGwei.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/unit/parseUnits.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/wait.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/isows/native.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/isows/utils.ts"],"sourcesContent":["import { MessageFormatter } from './messageFormatter';\nimport { Methods } from './methods';\nimport { InterfaceMessageEvent, Communicator, Response, SuccessResponse } from '../types';\n\n// eslint-disable-next-line\ntype Callback = (response: any) => void;\n\nclass PostMessageCommunicator implements Communicator {\n  private readonly allowedOrigins: RegExp[] | null = null;\n  private callbacks = new Map<string, Callback>();\n  private debugMode = false;\n  private isServer = typeof window === 'undefined';\n\n  constructor(allowedOrigins: RegExp[] | null = null, debugMode = false) {\n    this.allowedOrigins = allowedOrigins;\n    this.debugMode = debugMode;\n\n    if (!this.isServer) {\n      window.addEventListener('message', this.onParentMessage);\n    }\n  }\n\n  private isValidMessage = ({ origin, data, source }: InterfaceMessageEvent): boolean => {\n    const emptyOrMalformed = !data;\n    const sentFromParentEl = !this.isServer && source === window.parent;\n    const majorVersionNumber = typeof data.version !== 'undefined' && parseInt(data.version.split('.')[0]);\n    const allowedSDKVersion = majorVersionNumber >= 1;\n    let validOrigin = true;\n    if (Array.isArray(this.allowedOrigins)) {\n      validOrigin = this.allowedOrigins.find((regExp) => regExp.test(origin)) !== undefined;\n    }\n\n    return !emptyOrMalformed && sentFromParentEl && allowedSDKVersion && validOrigin;\n  };\n\n  private logIncomingMessage = (msg: InterfaceMessageEvent): void => {\n    console.info(`Safe Apps SDK v1: A message was received from origin ${msg.origin}. `, msg.data);\n  };\n\n  private onParentMessage = (msg: InterfaceMessageEvent): void => {\n    if (this.isValidMessage(msg)) {\n      this.debugMode && this.logIncomingMessage(msg);\n      this.handleIncomingMessage(msg.data);\n    }\n  };\n\n  private handleIncomingMessage = (payload: InterfaceMessageEvent['data']): void => {\n    const { id } = payload;\n\n    const cb = this.callbacks.get(id);\n    if (cb) {\n      cb(payload);\n\n      this.callbacks.delete(id);\n    }\n  };\n\n  public send = <M extends Methods, P, R>(method: M, params: P): Promise<SuccessResponse<R>> => {\n    const request = MessageFormatter.makeRequest(method, params);\n\n    if (this.isServer) {\n      throw new Error(\"Window doesn't exist\");\n    }\n\n    window.parent.postMessage(request, '*');\n    return new Promise((resolve, reject) => {\n      this.callbacks.set(request.id, (response: Response<R>) => {\n        if (!response.success) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nexport default PostMessageCommunicator;\nexport * from './methods';\n","import { ErrorResponse, SDKRequestData, RequestId, SuccessResponse, MethodToResponse } from '../types';\nimport { getSDKVersion } from '../utils';\nimport { Methods } from './methods';\nimport { generateRequestId } from './utils';\n\nclass MessageFormatter {\n  static makeRequest = <M extends Methods = Methods, P = unknown>(method: M, params: P): SDKRequestData<M, P> => {\n    const id = generateRequestId();\n\n    return {\n      id,\n      method,\n      params,\n      env: {\n        sdkVersion: getSDKVersion(),\n      },\n    };\n  };\n\n  static makeResponse = (id: RequestId, data: MethodToResponse[Methods], version: string): SuccessResponse => ({\n    id,\n    success: true,\n    version,\n    data,\n  });\n\n  static makeErrorResponse = (id: RequestId, error: string, version: string): ErrorResponse => ({\n    id,\n    success: false,\n    error,\n    version,\n  });\n}\n\nexport { MessageFormatter };\n","export enum Methods {\n  sendTransactions = 'sendTransactions',\n  rpcCall = 'rpcCall',\n  getChainInfo = 'getChainInfo',\n  getSafeInfo = 'getSafeInfo',\n  getTxBySafeTxHash = 'getTxBySafeTxHash',\n  getSafeBalances = 'getSafeBalances',\n  signMessage = 'signMessage',\n  signTypedMessage = 'signTypedMessage',\n  getEnvironmentInfo = 'getEnvironmentInfo',\n  getOffChainSignature = 'getOffChainSignature',\n  requestAddressBook = 'requestAddressBook',\n  wallet_getPermissions = 'wallet_getPermissions',\n  wallet_requestPermissions = 'wallet_requestPermissions',\n}\n\nexport enum RestrictedMethods {\n  requestAddressBook = 'requestAddressBook',\n}\n","// i.e. 0-255 -> '00'-'ff'\nconst dec2hex = (dec: number): string => dec.toString(16).padStart(2, '0');\n\nconst generateId = (len: number): string => {\n  const arr = new Uint8Array((len || 40) / 2);\n  window.crypto.getRandomValues(arr);\n  return Array.from(arr, dec2hex).join('');\n};\n\nconst generateRequestId = (): string => {\n  if (typeof window !== 'undefined') {\n    return generateId(10);\n  }\n\n  return new Date().getTime().toString(36);\n};\n\nexport { generateRequestId };\n","import { Methods } from '../communication';\nimport { Safe } from '../safe';\nimport { Wallet } from '../wallet';\n\nimport { Permission, PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions';\n\nconst hasPermission = (required: Methods, permissions: Permission[]): boolean =>\n  permissions.some((permission) => permission.parentCapability === required);\n\nconst requirePermission = () => (_: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n  const originalMethod = descriptor.value;\n\n  descriptor.value = async function () {\n    // @ts-expect-error accessing private property from decorator. 'this' context is the class instance\n    const wallet = new Wallet((this as Safe).communicator);\n\n    let currentPermissions = await wallet.getPermissions();\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      currentPermissions = await wallet.requestPermissions([{ [propertyKey as Methods]: {} }]);\n    }\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n\n    return originalMethod.apply(this);\n  };\n\n  return descriptor;\n};\n\nexport default requirePermission;\n","export const RPC_CALLS = {\n  eth_call: 'eth_call',\n  eth_gasPrice: 'eth_gasPrice',\n  eth_getLogs: 'eth_getLogs',\n  eth_getBalance: 'eth_getBalance',\n  eth_getCode: 'eth_getCode',\n  eth_getBlockByHash: 'eth_getBlockByHash',\n  eth_getBlockByNumber: 'eth_getBlockByNumber',\n  eth_getStorageAt: 'eth_getStorageAt',\n  eth_getTransactionByHash: 'eth_getTransactionByHash',\n  eth_getTransactionReceipt: 'eth_getTransactionReceipt',\n  eth_getTransactionCount: 'eth_getTransactionCount',\n  eth_estimateGas: 'eth_estimateGas',\n  safe_setSettings: 'safe_setSettings',\n} as const;\n","import { RPC_CALLS } from '../eth/constants';\nimport {\n  BlockNumberArg,\n  RpcCallNames,\n  Communicator,\n  Log,\n  BlockTransactionString,\n  BlockTransactionObject,\n  Web3TransactionObject,\n  RPCPayload,\n  TransactionConfig,\n  Web3TransactionReceiptObject,\n  PastLogsOptions,\n  SafeSettings,\n} from '../types';\nimport { Methods } from '../communication/methods';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Formatter = (arg: any) => any;\n\nconst inputFormatters: Record<string, Formatter> = {\n  defaultBlockParam: (arg = 'latest') => arg,\n  returnFullTxObjectParam: (arg = false): boolean => arg,\n  blockNumberToHex: (arg: BlockNumberArg): string =>\n    Number.isInteger(arg) ? `0x${arg.toString(16)}` : (arg as string),\n};\n\ntype BuildRequestArgs = {\n  call: RpcCallNames;\n  formatters?: (Formatter | null)[];\n};\n\nclass Eth {\n  public call;\n  public getBalance;\n  public getCode;\n  public getStorageAt;\n  public getPastLogs;\n  public getBlockByHash;\n  public getBlockByNumber;\n  public getTransactionByHash;\n  public getTransactionReceipt;\n  public getTransactionCount;\n  public getGasPrice;\n  public getEstimateGas;\n  public setSafeSettings;\n\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest<[TransactionConfig, string?], string>({\n      call: RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getBalance = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getCode = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getStorageAt = this.buildRequest<[string, number, string?], string>({\n      call: RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n    });\n    this.getPastLogs = this.buildRequest<[PastLogsOptions], Log[]>({\n      call: RPC_CALLS.eth_getLogs,\n    });\n    this.getBlockByHash = this.buildRequest<[string, boolean?], BlockTransactionString | BlockTransactionObject>({\n      call: RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getBlockByNumber = this.buildRequest<\n      [BlockNumberArg, boolean?],\n      BlockTransactionString | BlockTransactionObject\n    >({\n      call: RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getTransactionByHash = this.buildRequest<[string], Web3TransactionObject>({\n      call: RPC_CALLS.eth_getTransactionByHash,\n    });\n    this.getTransactionReceipt = this.buildRequest<[string], Web3TransactionReceiptObject>({\n      call: RPC_CALLS.eth_getTransactionReceipt,\n    });\n    this.getTransactionCount = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getGasPrice = this.buildRequest<never[], string>({\n      call: RPC_CALLS.eth_gasPrice,\n    });\n    this.getEstimateGas = (transaction: TransactionConfig): Promise<number> =>\n      this.buildRequest<[TransactionConfig], number>({\n        call: RPC_CALLS.eth_estimateGas,\n      })([transaction]);\n    this.setSafeSettings = this.buildRequest<[SafeSettings], SafeSettings>({\n      call: RPC_CALLS.safe_setSettings,\n    });\n  }\n\n  private buildRequest<P = never[], R = unknown>(args: BuildRequestArgs) {\n    const { call, formatters } = args;\n\n    return async (params?: P): Promise<R> => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter: ((...args: unknown[]) => unknown) | null, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n\n      const payload: RPCPayload<P> = {\n        call,\n        params: params || [],\n      };\n\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<P>, R>(Methods.rpcCall, payload);\n\n      return response.data;\n    };\n  }\n}\n\nexport { Eth };\n","import SDK from './sdk';\n\nexport default SDK;\nexport * from './sdk';\nexport * from './types';\nexport * from './communication/methods';\nexport * from './communication/messageFormatter';\nexport { getSDKVersion } from './utils';\n","import { encodeFunctionData, Address, hashMessage, hashTypedData } from 'viem';\nimport { MAGIC_VALUE_BYTES, MAGIC_VALUE } from './signatures';\nimport { Methods } from '../communication/methods';\nimport { RPC_CALLS } from '../eth/constants';\nimport {\n  Communicator,\n  SafeInfo,\n  ChainInfo,\n  SafeBalances,\n  GetBalanceParams,\n  RPCPayload,\n  TransactionConfig,\n  EnvironmentInfo,\n  AddressBookItem,\n  isObjectEIP712TypedData,\n  EIP712TypedData,\n} from '../types';\nimport requirePermission from '../decorators/requirePermissions';\n\nclass Safe {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getChainInfo(): Promise<ChainInfo> {\n    const response = await this.communicator.send<Methods.getChainInfo, undefined, ChainInfo>(\n      Methods.getChainInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async getInfo(): Promise<SafeInfo> {\n    const response = await this.communicator.send<Methods.getSafeInfo, undefined, SafeInfo>(\n      Methods.getSafeInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  // There is a possibility that this method will change because we may add pagination to the endpoint\n  async experimental_getBalances({ currency = 'usd' }: GetBalanceParams = {}): Promise<SafeBalances> {\n    const response = await this.communicator.send<Methods.getSafeBalances, { currency: string }, SafeBalances>(\n      Methods.getSafeBalances,\n      {\n        currency,\n      },\n    );\n\n    return response.data;\n  }\n\n  private async check1271Signature(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_dataHash',\n              type: 'bytes32',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  private async check1271SignatureBytes(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_data',\n              type: 'bytes',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE_BYTES;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  calculateMessageHash(message: string): string {\n    return hashMessage(message);\n  }\n\n  calculateTypedMessageHash(typedMessage: EIP712TypedData): string {\n    const chainId =\n      typeof typedMessage.domain.chainId === 'object'\n        ? typedMessage.domain.chainId.toNumber()\n        : Number(typedMessage.domain.chainId);\n\n    let primaryType = typedMessage.primaryType;\n    if (!primaryType) {\n      const fields = Object.values(typedMessage.types);\n      // We try to infer primaryType (simplified ether's version)\n      const primaryTypes = Object.keys(typedMessage.types).filter((typeName) =>\n        fields.every((dataTypes) => dataTypes.every(({ type }) => type.replace('[', '').replace(']', '') !== typeName)),\n      );\n      if (primaryTypes.length === 0 || primaryTypes.length > 1) throw new Error('Please specify primaryType');\n      primaryType = primaryTypes[0];\n    }\n\n    return hashTypedData({\n      message: typedMessage.message,\n      domain: {\n        ...typedMessage.domain,\n        chainId,\n        verifyingContract: typedMessage.domain.verifyingContract as Address,\n        salt: typedMessage.domain.salt as Address,\n      },\n      types: typedMessage.types,\n      primaryType,\n    });\n  }\n\n  async getOffChainSignature(messageHash: string): Promise<string> {\n    const response = await this.communicator.send<Methods.getOffChainSignature, string, string>(\n      Methods.getOffChainSignature,\n      messageHash,\n    );\n\n    return response.data;\n  }\n\n  async isMessageSigned(message: string | EIP712TypedData, signature = '0x'): Promise<boolean> {\n    let check: (() => Promise<boolean>) | undefined;\n    if (typeof message === 'string') {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n\n    if (isObjectEIP712TypedData(message)) {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateTypedMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n    if (check) {\n      const isValid = await check();\n\n      return isValid;\n    }\n\n    throw new Error('Invalid message type');\n  }\n\n  async isMessageHashSigned(messageHash: string, signature = '0x'): Promise<boolean> {\n    const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n\n    for (const check of checks) {\n      const isValid = await check(messageHash, signature);\n      if (isValid) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async getEnvironmentInfo(): Promise<EnvironmentInfo> {\n    const response = await this.communicator.send<Methods.getEnvironmentInfo, undefined, EnvironmentInfo>(\n      Methods.getEnvironmentInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  @requirePermission()\n  async requestAddressBook(): Promise<AddressBookItem[]> {\n    const response = await this.communicator.send<Methods.requestAddressBook, undefined, AddressBookItem[]>(\n      Methods.requestAddressBook,\n      undefined,\n    );\n\n    return response.data;\n  }\n}\n\nexport { Safe };\n","const MAGIC_VALUE = '0x1626ba7e';\nconst MAGIC_VALUE_BYTES = '0x20c13b0b';\n\nexport { MAGIC_VALUE, MAGIC_VALUE_BYTES };\n","import { Communicator } from './types';\nimport InterfaceCommunicator from './communication';\nimport { TXs } from './txs';\nimport { Eth } from './eth';\nimport { Safe } from './safe';\nimport { Wallet } from './wallet';\n\nexport type Opts = {\n  allowedDomains?: RegExp[];\n  debug?: boolean;\n};\n\nclass SafeAppsSDK {\n  private readonly communicator: Communicator;\n  public readonly eth: Eth;\n  public readonly txs: TXs;\n  public readonly safe: Safe;\n  public readonly wallet: Wallet;\n\n  constructor(opts: Opts = {}) {\n    const { allowedDomains = null, debug = false } = opts;\n\n    this.communicator = new InterfaceCommunicator(allowedDomains, debug);\n    this.eth = new Eth(this.communicator);\n    this.txs = new TXs(this.communicator);\n    this.safe = new Safe(this.communicator);\n    this.wallet = new Wallet(this.communicator);\n  }\n}\n\nexport default SafeAppsSDK;\n","import { Methods } from '../communication/methods';\nimport {\n  GatewayTransactionDetails,\n  SignMessageParams,\n  SendTransactionsParams,\n  GetTxBySafeTxHashParams,\n  Communicator,\n  SendTransactionsResponse,\n  SignTypedMessageParams,\n  EIP712TypedData,\n  isObjectEIP712TypedData,\n  SignMessageResponse,\n} from '../types';\n\nclass TXs {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getBySafeTxHash(safeTxHash: string): Promise<GatewayTransactionDetails> {\n    if (!safeTxHash) {\n      throw new Error('Invalid safeTxHash');\n    }\n\n    const response = await this.communicator.send<\n      Methods.getTxBySafeTxHash,\n      GetTxBySafeTxHashParams,\n      GatewayTransactionDetails\n    >(Methods.getTxBySafeTxHash, { safeTxHash });\n\n    return response.data;\n  }\n\n  async signMessage(message: string): Promise<SignMessageResponse> {\n    const messagePayload = {\n      message,\n    };\n\n    const response = await this.communicator.send<Methods.signMessage, SignMessageParams, SignMessageResponse>(\n      Methods.signMessage,\n      messagePayload,\n    );\n\n    return response.data;\n  }\n\n  async signTypedMessage(typedData: EIP712TypedData): Promise<SignMessageResponse> {\n    if (!isObjectEIP712TypedData(typedData)) {\n      throw new Error('Invalid typed data');\n    }\n\n    const response = await this.communicator.send<\n      Methods.signTypedMessage,\n      SignTypedMessageParams,\n      SignMessageResponse\n    >(Methods.signTypedMessage, { typedData });\n\n    return response.data;\n  }\n\n  async send({ txs, params }: SendTransactionsParams): Promise<SendTransactionsResponse> {\n    if (!txs || !txs.length) {\n      throw new Error('No transactions were passed');\n    }\n\n    const messagePayload = {\n      txs,\n      params,\n    };\n\n    const response = await this.communicator.send<\n      Methods.sendTransactions,\n      SendTransactionsParams,\n      SendTransactionsResponse\n    >(Methods.sendTransactions, messagePayload);\n\n    return response.data;\n  }\n}\n\nexport { TXs };\n","import { SafeBalanceResponse, TransactionDetails, TokenInfo } from '@safe-global/safe-gateway-typescript-sdk';\n\nexport {\n  AddOwner,\n  ChangeImplementation,\n  ChangeThreshold,\n  Creation,\n  Custom,\n  DataDecoded,\n  DetailedExecutionInfo,\n  DisableModule,\n  EnableModule,\n  Erc20Transfer,\n  Erc721Transfer,\n  InternalTransaction,\n  ModuleExecutionDetails,\n  MultiSend,\n  MultisigConfirmation,\n  MultisigExecutionDetails,\n  NativeCoinTransfer,\n  Operation,\n  Parameter,\n  RemoveOwner,\n  SafeAppInfo,\n  SetFallbackHandler,\n  SettingsChange,\n  SettingsInfo,\n  SwapOwner,\n  TokenInfo,\n  TokenType,\n  TransactionData,\n  TransactionInfo,\n  TransactionStatus,\n  Transfer,\n  TransferDirection,\n  TransferInfo,\n} from '@safe-global/safe-gateway-typescript-sdk';\n\nexport type GatewayTransactionDetails = TransactionDetails;\n\nexport type TokenBalance = {\n  tokenInfo: TokenInfo;\n  balance: string;\n  fiatBalance: string;\n  fiatConversion: string;\n};\n\nexport type SafeBalances = SafeBalanceResponse;\n","export * from './sdk';\nexport * from './rpc';\nexport * from './gateway';\nexport * from './messaging';\n","import { Methods } from '../communication/methods';\nimport {\n  SafeInfo,\n  ChainInfo,\n  SendTransactionsResponse,\n  EnvironmentInfo,\n  AddressBookItem,\n  SignMessageResponse,\n} from './sdk';\nimport { GatewayTransactionDetails, SafeBalances } from './gateway';\nimport { Permission } from './permissions';\n\nexport type RequestId = string;\n\nexport type InterfaceMessageEvent = MessageEvent<Response>;\n\nexport interface MethodToResponse {\n  [Methods.sendTransactions]: SendTransactionsResponse;\n  [Methods.rpcCall]: unknown;\n  [Methods.getSafeInfo]: SafeInfo;\n  [Methods.getChainInfo]: ChainInfo;\n  [Methods.getTxBySafeTxHash]: GatewayTransactionDetails;\n  [Methods.getSafeBalances]: SafeBalances[];\n  [Methods.signMessage]: SignMessageResponse;\n  [Methods.signTypedMessage]: SignMessageResponse;\n  [Methods.getEnvironmentInfo]: EnvironmentInfo;\n  [Methods.getOffChainSignature]: string;\n  [Methods.requestAddressBook]: AddressBookItem[];\n  [Methods.wallet_getPermissions]: Permission[];\n  [Methods.wallet_requestPermissions]: Permission[];\n}\n\nexport type SDKRequestData<M extends Methods = Methods, P = unknown> = {\n  id: RequestId;\n  params: P;\n  env: {\n    sdkVersion: string;\n  };\n  method: M;\n};\n\nexport type SDKMessageEvent = MessageEvent<SDKRequestData>;\n\nexport type ErrorResponse = {\n  id: RequestId;\n  success: false;\n  error: string;\n  version?: string;\n};\n\nexport type SuccessResponse<T = MethodToResponse[Methods]> = {\n  id: RequestId;\n  data: T;\n  version?: string;\n  success: true;\n};\n\nexport type Response<T = MethodToResponse[Methods]> = ErrorResponse | SuccessResponse<T>;\n\nexport interface Communicator {\n  send<M extends Methods, P = unknown, R = unknown>(method: M, params: P): Promise<SuccessResponse<R>>;\n}\n","export type Permission = {\n  parentCapability: string;\n  invoker: string;\n  date?: number;\n  caveats?: PermissionCaveat[];\n};\n\nexport type PermissionRequest = {\n  [method: string]: Record<string, unknown>;\n};\n\nexport type PermissionCaveat = {\n  type: string;\n  value?: unknown;\n  name?: string;\n};\n\nexport const PERMISSIONS_REQUEST_REJECTED = 4001;\n\nexport class PermissionsError extends Error {\n  public code: number;\n  public data?: unknown;\n\n  constructor(message: string, code: number, data?: unknown) {\n    super(message);\n\n    this.code = code;\n    this.data = data;\n\n    // Should adjust prototype manually because how TS handles the type extension compilation\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, PermissionsError.prototype);\n  }\n}\n","import { ChainInfo as _ChainInfo } from '@safe-global/safe-gateway-typescript-sdk';\n\nexport type ChainInfo = Pick<\n  _ChainInfo,\n  'chainName' | 'chainId' | 'shortName' | 'nativeCurrency' | 'blockExplorerUriTemplate'\n>;\n\nexport { NativeCurrency } from '@safe-global/safe-gateway-typescript-sdk';\n\nexport type BaseTransaction = {\n  to: string;\n  value: string;\n  data: string;\n};\n\nexport type GetTxBySafeTxHashParams = {\n  safeTxHash: string;\n};\n\nexport interface SendTransactionRequestParams {\n  safeTxGas?: number;\n}\n\nexport interface SendTransactionsParams {\n  txs: BaseTransaction[];\n  params?: SendTransactionRequestParams;\n}\n\nexport type GetBalanceParams = { currency?: string };\n\nexport type SignMessageParams = {\n  message: string;\n};\n\nexport interface TypedDataDomain {\n  name?: string;\n  version?: string;\n  chainId?: string | number | bigint | { toNumber: () => number };\n  verifyingContract?: string;\n  salt?: string;\n}\n\nexport interface TypedDataTypes {\n  name: string;\n  type: string;\n}\n\nexport type TypedMessageTypes = { [key: string]: TypedDataTypes[] };\n\nexport type EIP712TypedData = {\n  domain: TypedDataDomain;\n  types: TypedMessageTypes;\n  message: Record<string, any>;\n  primaryType?: string;\n};\n\nexport type SignTypedMessageParams = {\n  typedData: EIP712TypedData;\n};\n\nexport type SendTransactionsResponse = {\n  safeTxHash: string;\n};\n\nexport type OffChainSignMessageResponse = {\n  messageHash: string;\n};\n\nexport type SignMessageResponse = SendTransactionsResponse | OffChainSignMessageResponse;\n\nexport type SafeInfo = {\n  safeAddress: string;\n  chainId: number;\n  threshold: number;\n  owners: string[];\n  isReadOnly: boolean;\n};\n\nexport type EnvironmentInfo = {\n  origin: string;\n};\n\nexport type PostMessageOptions = {\n  transfer?: any[];\n};\n\nexport type AddressBookItem = {\n  address: string;\n  chainId: string;\n  name: string;\n};\n\nexport const isObjectEIP712TypedData = (obj?: unknown): obj is EIP712TypedData => {\n  return typeof obj === 'object' && obj != null && 'domain' in obj && 'types' in obj && 'message' in obj;\n};\n","import pkg from '../package.json';\n\nexport const getSDKVersion = (): string => {\n  // Strip out version tags like `beta.0` in `1.0.0-beta.0`\n  return pkg.version.split('-')[0];\n};\n","import { Methods, RestrictedMethods } from '../communication/methods';\nimport { Communicator } from '../types';\nimport { PermissionRequest, Permission, PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions';\n\nclass Wallet {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getPermissions(): Promise<Permission[]> {\n    const response = await this.communicator.send<Methods.wallet_getPermissions, undefined, Permission[]>(\n      Methods.wallet_getPermissions,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async requestPermissions(permissions: PermissionRequest[]): Promise<Permission[]> {\n    if (!this.isPermissionRequestValid(permissions)) {\n      throw new PermissionsError('Permissions request is invalid', PERMISSIONS_REQUEST_REJECTED);\n    }\n\n    try {\n      const response = await this.communicator.send<\n        Methods.wallet_requestPermissions,\n        PermissionRequest[],\n        Permission[]\n      >(Methods.wallet_requestPermissions, permissions);\n\n      return response.data;\n    } catch {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n  }\n\n  isPermissionRequestValid(permissions: PermissionRequest[]): boolean {\n    return permissions.every((pr: PermissionRequest) => {\n      if (typeof pr === 'object') {\n        return Object.keys(pr).every((method) => {\n          if (Object.values(RestrictedMethods).includes(method as RestrictedMethods)) {\n            return true;\n          }\n\n          return false;\n        });\n      }\n\n      return false;\n    });\n  }\n}\n\nexport { Wallet };\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport { bytesToNumberBE, CHash, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\nfunction validateDST(dst: UnicodeOrBytes): Uint8Array {\n  if (dst instanceof Uint8Array) return dst;\n  if (typeof dst === 'string') return utf8ToBytes(dst);\n  throw new Error('DST must be Uint8Array or string');\n}\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction isBytes(item: unknown): void {\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\n}\nfunction isNum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  isBytes(msg);\n  isNum(count);\n  const DST = validateDST(_DST);\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || val instanceof Uint8Array,\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map((k) => Rho[k]));\n\nconst shifts = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word: number, shift: number) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  else if (group === 1) return (x & y) | (~x & z);\n  else if (group === 2) return (x | ~y) ^ z;\n  else if (group === 3) return (x & z) | (y & ~z);\n  else return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends SHA2<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number) {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) BUF[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean() {\n    BUF.fill(0);\n  }\n  destroy() {\n    this.destroyed = true;\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,"import type { OneOf, Pretty } from './types.js'\nimport { version } from './version.js'\n\ntype BaseErrorArgs = Pretty<\n  {\n    docsPath?: string | undefined\n    metaMessages?: string[] | undefined\n  } & OneOf<{ details?: string | undefined } | { cause?: BaseError | Error }>\n>\n\nexport class BaseError extends Error {\n  details: string\n  docsPath?: string | undefined\n  metaMessages?: string[] | undefined\n  shortMessage: string\n\n  override name = 'AbiTypeError'\n\n  constructor(shortMessage: string, args: BaseErrorArgs = {}) {\n    const details =\n      args.cause instanceof BaseError\n        ? args.cause.details\n        : args.cause?.message\n        ? args.cause.message\n        : args.details!\n    const docsPath =\n      args.cause instanceof BaseError\n        ? args.cause.docsPath || args.docsPath\n        : args.docsPath\n    const message = [\n      shortMessage || 'An error occurred.',\n      '',\n      ...(args.metaMessages ? [...args.metaMessages, ''] : []),\n      ...(docsPath ? [`Docs: https://abitype.dev${docsPath}`] : []),\n      ...(details ? [`Details: ${details}`] : []),\n      `Version: abitype@${version}`,\n    ].join('\\n')\n\n    super(message)\n\n    if (args.cause) this.cause = args.cause\n    this.details = details\n    this.docsPath = docsPath\n    this.metaMessages = args.metaMessages\n    this.shortMessage = shortMessage\n  }\n}\n","import { BaseError } from '../../errors.js'\n\nexport class InvalidAbiItemError extends BaseError {\n  override name = 'InvalidAbiItemError'\n\n  constructor({ signature }: { signature: string | object }) {\n    super('Failed to parse ABI item.', {\n      details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,\n      docsPath: '/api/human.html#parseabiitem-1',\n    })\n  }\n}\n\nexport class UnknownTypeError extends BaseError {\n  override name = 'UnknownTypeError'\n\n  constructor({ type }: { type: string }) {\n    super('Unknown type.', {\n      metaMessages: [\n        `Type \"${type}\" is not a valid ABI type. Perhaps you forgot to include a struct signature?`,\n      ],\n    })\n  }\n}\n\nexport class UnknownSolidityTypeError extends BaseError {\n  override name = 'UnknownSolidityTypeError'\n\n  constructor({ type }: { type: string }) {\n    super('Unknown type.', {\n      metaMessages: [`Type \"${type}\" is not a valid ABI type.`],\n    })\n  }\n}\n","import type { AbiItemType, AbiParameter } from '../../abi.js'\nimport { BaseError } from '../../errors.js'\nimport type { Modifier } from '../types/signatures.js'\n\nexport class InvalidAbiParameterError extends BaseError {\n  override name = 'InvalidAbiParameterError'\n\n  constructor({ param }: { param: string | object }) {\n    super('Failed to parse ABI parameter.', {\n      details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,\n      docsPath: '/api/human.html#parseabiparameter-1',\n    })\n  }\n}\n\nexport class InvalidAbiParametersError extends BaseError {\n  override name = 'InvalidAbiParametersError'\n\n  constructor({ params }: { params: string | object }) {\n    super('Failed to parse ABI parameters.', {\n      details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,\n      docsPath: '/api/human.html#parseabiparameters-1',\n    })\n  }\n}\n\nexport class InvalidParameterError extends BaseError {\n  override name = 'InvalidParameterError'\n\n  constructor({ param }: { param: string }) {\n    super('Invalid ABI parameter.', {\n      details: param,\n    })\n  }\n}\n\nexport class SolidityProtectedKeywordError extends BaseError {\n  override name = 'SolidityProtectedKeywordError'\n\n  constructor({ param, name }: { param: string; name: string }) {\n    super('Invalid ABI parameter.', {\n      details: param,\n      metaMessages: [\n        `\"${name}\" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`,\n      ],\n    })\n  }\n}\n\nexport class InvalidModifierError extends BaseError {\n  override name = 'InvalidModifierError'\n\n  constructor({\n    param,\n    type,\n    modifier,\n  }: {\n    param: string\n    type?: AbiItemType | 'struct' | undefined\n    modifier: Modifier\n  }) {\n    super('Invalid ABI parameter.', {\n      details: param,\n      metaMessages: [\n        `Modifier \"${modifier}\" not allowed${\n          type ? ` in \"${type}\" type` : ''\n        }.`,\n      ],\n    })\n  }\n}\n\nexport class InvalidFunctionModifierError extends BaseError {\n  override name = 'InvalidFunctionModifierError'\n\n  constructor({\n    param,\n    type,\n    modifier,\n  }: {\n    param: string\n    type?: AbiItemType | 'struct' | undefined\n    modifier: Modifier\n  }) {\n    super('Invalid ABI parameter.', {\n      details: param,\n      metaMessages: [\n        `Modifier \"${modifier}\" not allowed${\n          type ? ` in \"${type}\" type` : ''\n        }.`,\n        `Data location can only be specified for array, struct, or mapping types, but \"${modifier}\" was given.`,\n      ],\n    })\n  }\n}\n\nexport class InvalidAbiTypeParameterError extends BaseError {\n  override name = 'InvalidAbiTypeParameterError'\n\n  constructor({\n    abiParameter,\n  }: {\n    abiParameter: AbiParameter & { indexed?: boolean | undefined }\n  }) {\n    super('Invalid ABI parameter.', {\n      details: JSON.stringify(abiParameter, null, 2),\n      metaMessages: ['ABI parameter type is invalid.'],\n    })\n  }\n}\n","import type { AbiItemType } from '../../abi.js'\nimport { BaseError } from '../../errors.js'\n\nexport class InvalidSignatureError extends BaseError {\n  override name = 'InvalidSignatureError'\n\n  constructor({\n    signature,\n    type,\n  }: {\n    signature: string\n    type: AbiItemType | 'struct'\n  }) {\n    super(`Invalid ${type} signature.`, {\n      details: signature,\n    })\n  }\n}\n\nexport class UnknownSignatureError extends BaseError {\n  override name = 'UnknownSignatureError'\n\n  constructor({ signature }: { signature: string }) {\n    super('Unknown signature.', {\n      details: signature,\n    })\n  }\n}\n\nexport class InvalidStructSignatureError extends BaseError {\n  override name = 'InvalidStructSignatureError'\n\n  constructor({ signature }: { signature: string }) {\n    super('Invalid struct signature.', {\n      details: signature,\n      metaMessages: ['No properties exist.'],\n    })\n  }\n}\n","import { BaseError } from '../../errors.js'\n\nexport class InvalidParenthesisError extends BaseError {\n  override name = 'InvalidParenthesisError'\n\n  constructor({ current, depth }: { current: string; depth: number }) {\n    super('Unbalanced parentheses.', {\n      metaMessages: [\n        `\"${current.trim()}\" has too many ${\n          depth > 0 ? 'opening' : 'closing'\n        } parentheses.`,\n      ],\n      details: `Depth \"${depth}\"`,\n    })\n  }\n}\n","import { BaseError } from '../../errors.js'\n\nexport class CircularReferenceError extends BaseError {\n  override name = 'CircularReferenceError'\n\n  constructor({ type }: { type: string }) {\n    super('Circular reference detected.', {\n      metaMessages: [`Struct \"${type}\" is a circular reference.`],\n    })\n  }\n}\n","import type { Abi } from '../abi.js'\nimport { type FormatAbiItem, formatAbiItem } from './formatAbiItem.js'\n\n/**\n * Parses JSON ABI into human-readable ABI\n *\n * @param TAbi - ABI\n * @returns Human-readable ABI\n */\nexport type FormatAbi<TAbi extends Abi | readonly unknown[]> = Abi extends TAbi\n  ? readonly string[]\n  : TAbi extends readonly []\n  ? never\n  : TAbi extends Abi\n  ? {\n      [K in keyof TAbi]: FormatAbiItem<TAbi[K]>\n    }\n  : readonly string[]\n\n/**\n * Parses JSON ABI into human-readable ABI\n *\n * @param abi - ABI\n * @returns Human-readable ABI\n */\nexport function formatAbi<const TAbi extends Abi | readonly unknown[]>(\n  abi: TAbi,\n): FormatAbi<TAbi> {\n  const signatures = []\n  const length = abi.length\n  for (let i = 0; i < length; i++) {\n    const abiItem = abi[i]!\n    const signature = formatAbiItem(abiItem as Abi[number])\n    signatures.push(signature)\n  }\n  return signatures as unknown as FormatAbi<TAbi>\n}\n","import type {\n  Abi,\n  AbiConstructor,\n  AbiError,\n  AbiEvent,\n  AbiEventParameter,\n  AbiFallback,\n  AbiFunction,\n  AbiParameter,\n  AbiReceive,\n  AbiStateMutability,\n} from '../abi.js'\nimport {\n  type FormatAbiParameters as FormatAbiParameters_,\n  formatAbiParameters,\n} from './formatAbiParameters.js'\nimport type { AssertName } from './types/signatures.js'\n\n/**\n * Formats ABI item (e.g. error, event, function) into human-readable ABI item\n *\n * @param TAbiItem - ABI item\n * @returns Human-readable ABI item\n */\nexport type FormatAbiItem<TAbiItem extends Abi[number]> =\n  Abi[number] extends TAbiItem\n    ? string\n    :\n        | (TAbiItem extends AbiFunction\n            ? AbiFunction extends TAbiItem\n              ? string\n              : `function ${AssertName<TAbiItem['name']>}(${FormatAbiParameters<\n                  TAbiItem['inputs']\n                >})${TAbiItem['stateMutability'] extends Exclude<\n                  AbiStateMutability,\n                  'nonpayable'\n                >\n                  ? ` ${TAbiItem['stateMutability']}`\n                  : ''}${TAbiItem['outputs']['length'] extends 0\n                  ? ''\n                  : ` returns (${FormatAbiParameters<TAbiItem['outputs']>})`}`\n            : never)\n        | (TAbiItem extends AbiEvent\n            ? AbiEvent extends TAbiItem\n              ? string\n              : `event ${AssertName<TAbiItem['name']>}(${FormatAbiParameters<\n                  TAbiItem['inputs']\n                >})`\n            : never)\n        | (TAbiItem extends AbiError\n            ? AbiError extends TAbiItem\n              ? string\n              : `error ${AssertName<TAbiItem['name']>}(${FormatAbiParameters<\n                  TAbiItem['inputs']\n                >})`\n            : never)\n        | (TAbiItem extends AbiConstructor\n            ? AbiConstructor extends TAbiItem\n              ? string\n              : `constructor(${FormatAbiParameters<\n                  TAbiItem['inputs']\n                >})${TAbiItem['stateMutability'] extends 'payable'\n                  ? ' payable'\n                  : ''}`\n            : never)\n        | (TAbiItem extends AbiFallback\n            ? AbiFallback extends TAbiItem\n              ? string\n              : 'fallback()'\n            : never)\n        | (TAbiItem extends AbiReceive\n            ? AbiReceive extends TAbiItem\n              ? string\n              : 'receive() external payable'\n            : never)\n\ntype FormatAbiParameters<\n  TAbiParameters extends readonly (AbiParameter | AbiEventParameter)[],\n> = TAbiParameters['length'] extends 0\n  ? ''\n  : FormatAbiParameters_<\n      TAbiParameters extends readonly [\n        AbiParameter | AbiEventParameter,\n        ...(readonly (AbiParameter | AbiEventParameter)[]),\n      ]\n        ? TAbiParameters\n        : never\n    >\n\n/**\n * Formats ABI item (e.g. error, event, function) into human-readable ABI item\n *\n * @param abiItem - ABI item\n * @returns Human-readable ABI item\n */\nexport function formatAbiItem<const TAbiItem extends Abi[number]>(\n  abiItem: TAbiItem,\n): FormatAbiItem<TAbiItem> {\n  type Result = FormatAbiItem<TAbiItem>\n  type Params = readonly [\n    AbiParameter | AbiEventParameter,\n    ...(readonly (AbiParameter | AbiEventParameter)[]),\n  ]\n\n  if (abiItem.type === 'function')\n    return `function ${abiItem.name}(${formatAbiParameters(\n      abiItem.inputs as Params,\n    )})${\n      abiItem.stateMutability && abiItem.stateMutability !== 'nonpayable'\n        ? ` ${abiItem.stateMutability}`\n        : ''\n    }${\n      abiItem.outputs.length\n        ? ` returns (${formatAbiParameters(abiItem.outputs as Params)})`\n        : ''\n    }`\n  else if (abiItem.type === 'event')\n    return `event ${abiItem.name}(${formatAbiParameters(\n      abiItem.inputs as Params,\n    )})`\n  else if (abiItem.type === 'error')\n    return `error ${abiItem.name}(${formatAbiParameters(\n      abiItem.inputs as Params,\n    )})`\n  else if (abiItem.type === 'constructor')\n    return `constructor(${formatAbiParameters(abiItem.inputs as Params)})${\n      abiItem.stateMutability === 'payable' ? ' payable' : ''\n    }`\n  else if (abiItem.type === 'fallback') return 'fallback()' as Result\n  return 'receive() external payable' as Result\n}\n","import type { AbiEventParameter, AbiParameter } from '../abi.js'\nimport { execTyped } from '../regex.js'\nimport type { IsNarrowable, Join } from '../types.js'\nimport type { AssertName } from './types/signatures.js'\n\n/**\n * Formats {@link AbiParameter} to human-readable ABI parameter.\n *\n * @param TAbiParameter - ABI parameter\n * @returns Human-readable ABI parameter\n *\n * @example\n * type Result = FormatAbiParameter<{ type: 'address'; name: 'from'; }>\n * //   ^? type Result = 'address from'\n */\nexport type FormatAbiParameter<\n  TAbiParameter extends AbiParameter | AbiEventParameter,\n> = TAbiParameter extends {\n  name?: infer Name extends string\n  type: `tuple${infer Array}`\n  components: infer Components extends readonly AbiParameter[]\n  indexed?: infer Indexed extends boolean\n}\n  ? FormatAbiParameter<\n      {\n        type: `(${Join<\n          {\n            [K in keyof Components]: FormatAbiParameter<\n              {\n                type: Components[K]['type']\n              } & (IsNarrowable<Components[K]['name'], string> extends true\n                ? { name: Components[K]['name'] }\n                : unknown) &\n                (Components[K] extends { components: readonly AbiParameter[] }\n                  ? { components: Components[K]['components'] }\n                  : unknown)\n            >\n          },\n          ', '\n        >})${Array}`\n      } & (IsNarrowable<Name, string> extends true ? { name: Name } : unknown) &\n        (IsNarrowable<Indexed, boolean> extends true\n          ? { indexed: Indexed }\n          : unknown)\n    >\n  : `${TAbiParameter['type']}${TAbiParameter extends { indexed: true }\n      ? ' indexed'\n      : ''}${TAbiParameter['name'] extends infer Name extends string\n      ? Name extends ''\n        ? ''\n        : ` ${AssertName<Name>}`\n      : ''}`\n\n// https://regexr.com/7f7rv\nconst tupleRegex = /^tuple(?<array>(\\[(\\d*)\\])*)$/\n\n/**\n * Formats {@link AbiParameter} to human-readable ABI parameter.\n *\n * @param abiParameter - ABI parameter\n * @returns Human-readable ABI parameter\n *\n * @example\n * const result = formatAbiParameter({ type: 'address', name: 'from' })\n * //    ^? const result: 'address from'\n */\nexport function formatAbiParameter<\n  const TAbiParameter extends AbiParameter | AbiEventParameter,\n>(abiParameter: TAbiParameter): FormatAbiParameter<TAbiParameter> {\n  type Result = FormatAbiParameter<TAbiParameter>\n\n  let type = abiParameter.type\n  if (tupleRegex.test(abiParameter.type) && 'components' in abiParameter) {\n    type = '('\n    const length = abiParameter.components.length as number\n    for (let i = 0; i < length; i++) {\n      const component = abiParameter.components[i]!\n      type += formatAbiParameter(component)\n      if (i < length - 1) type += ', '\n    }\n    const result = execTyped<{ array?: string }>(tupleRegex, abiParameter.type)\n    type += `)${result?.array ?? ''}`\n    return formatAbiParameter({\n      ...abiParameter,\n      type,\n    }) as Result\n  }\n  // Add `indexed` to type if in `abiParameter`\n  if ('indexed' in abiParameter && abiParameter.indexed)\n    type = `${type} indexed`\n  // Return human-readable ABI parameter\n  if (abiParameter.name) return `${type} ${abiParameter.name}` as Result\n  return type as Result\n}\n","import type { AbiEventParameter, AbiParameter } from '../abi.js'\nimport type { Join } from '../types.js'\nimport {\n  type FormatAbiParameter,\n  formatAbiParameter,\n} from './formatAbiParameter.js'\n\n/**\n * Formats {@link AbiParameter}s to human-readable ABI parameter.\n *\n * @param TAbiParameters - ABI parameters\n * @returns Human-readable ABI parameters\n *\n * @example\n * type Result = FormatAbiParameters<[\n *   // ^? type Result = 'address from, uint256 tokenId'\n *   { type: 'address'; name: 'from'; },\n *   { type: 'uint256'; name: 'tokenId'; },\n * ]>\n */\nexport type FormatAbiParameters<\n  TAbiParameters extends readonly [\n    AbiParameter | AbiEventParameter,\n    ...(readonly (AbiParameter | AbiEventParameter)[]),\n  ],\n> = Join<\n  {\n    [K in keyof TAbiParameters]: FormatAbiParameter<TAbiParameters[K]>\n  },\n  ', '\n>\n\n/**\n * Formats {@link AbiParameter}s to human-readable ABI parameters.\n *\n * @param abiParameters - ABI parameters\n * @returns Human-readable ABI parameters\n *\n * @example\n * const result = formatAbiParameters([\n *   //  ^? const result: 'address from, uint256 tokenId'\n *   { type: 'address', name: 'from' },\n *   { type: 'uint256', name: 'tokenId' },\n * ])\n */\nexport function formatAbiParameters<\n  const TAbiParameters extends readonly [\n    AbiParameter | AbiEventParameter,\n    ...(readonly (AbiParameter | AbiEventParameter)[]),\n  ],\n>(abiParameters: TAbiParameters): FormatAbiParameters<TAbiParameters> {\n  let params = ''\n  const length = abiParameters.length\n  for (let i = 0; i < length; i++) {\n    const abiParameter = abiParameters[i]!\n    params += formatAbiParameter(abiParameter)\n    if (i !== length - 1) params += ', '\n  }\n  return params as FormatAbiParameters<TAbiParameters>\n}\n","import type { Abi } from '../abi.js'\nimport type { Error, Filter } from '../types.js'\nimport { isStructSignature } from './runtime/signatures.js'\nimport { parseStructs } from './runtime/structs.js'\nimport { parseSignature } from './runtime/utils.js'\nimport type { Signatures } from './types/signatures.js'\nimport type { ParseStructs } from './types/structs.js'\nimport type { ParseSignature } from './types/utils.js'\n\n/**\n * Parses human-readable ABI into JSON {@link Abi}\n *\n * @param TSignatures - Human-readable ABI\n * @returns Parsed {@link Abi}\n *\n * @example\n * type Result = ParseAbi<\n *   // ^? type Result = readonly [{ name: \"balanceOf\"; type: \"function\"; stateMutability:...\n *   [\n *     'function balanceOf(address owner) view returns (uint256)',\n *     'event Transfer(address indexed from, address indexed to, uint256 amount)',\n *   ]\n * >\n */\nexport type ParseAbi<TSignatures extends readonly string[]> =\n  string[] extends TSignatures\n    ? Abi // If `T` was not able to be inferred (e.g. just `string[]`), return `Abi`\n    : TSignatures extends readonly string[]\n    ? TSignatures extends Signatures<TSignatures> // Validate signatures\n      ? ParseStructs<TSignatures> extends infer Structs\n        ? {\n            [K in keyof TSignatures]: TSignatures[K] extends string\n              ? ParseSignature<TSignatures[K], Structs>\n              : never\n          } extends infer Mapped extends readonly unknown[]\n          ? Filter<Mapped, never> extends infer Result\n            ? Result extends readonly []\n              ? never\n              : Result\n            : never\n          : never\n        : never\n      : never\n    : never\n\n/**\n * Parses human-readable ABI into JSON {@link Abi}\n *\n * @param signatures - Human-Readable ABI\n * @returns Parsed {@link Abi}\n *\n * @example\n * const abi = parseAbi([\n *   //  ^? const abi: readonly [{ name: \"balanceOf\"; type: \"function\"; stateMutability:...\n *   'function balanceOf(address owner) view returns (uint256)',\n *   'event Transfer(address indexed from, address indexed to, uint256 amount)',\n * ])\n */\nexport function parseAbi<const TSignatures extends readonly string[]>(\n  signatures: TSignatures['length'] extends 0\n    ? Error<'At least one signature required'>\n    : Signatures<TSignatures> extends TSignatures\n    ? TSignatures\n    : Signatures<TSignatures>,\n): ParseAbi<TSignatures> {\n  const structs = parseStructs(signatures as readonly string[])\n  const abi = []\n  const length = signatures.length as number\n  for (let i = 0; i < length; i++) {\n    const signature = (signatures as readonly string[])[i]!\n    if (isStructSignature(signature)) continue\n    abi.push(parseSignature(signature, structs))\n  }\n  return abi as unknown as ParseAbi<TSignatures>\n}\n","import type { Abi } from '../abi.js'\nimport { InvalidAbiItemError } from '../index.js'\nimport type { Narrow } from '../narrow.js'\nimport type { Error, Filter } from '../types.js'\nimport { isStructSignature } from './runtime/signatures.js'\nimport { parseStructs } from './runtime/structs.js'\nimport { parseSignature } from './runtime/utils.js'\nimport type { Signature, Signatures } from './types/signatures.js'\nimport type { ParseStructs } from './types/structs.js'\nimport type { ParseSignature } from './types/utils.js'\n\n/**\n * Parses human-readable ABI item (e.g. error, event, function) into {@link Abi} item\n *\n * @param TSignature - Human-readable ABI item\n * @returns Parsed {@link Abi} item\n *\n * @example\n * type Result = ParseAbiItem<'function balanceOf(address owner) view returns (uint256)'>\n * //   ^? type Result = { name: \"balanceOf\"; type: \"function\"; stateMutability: \"view\";...\n *\n * @example\n * type Result = ParseAbiItem<\n *   // ^? type Result = { name: \"foo\"; type: \"function\"; stateMutability: \"view\"; inputs:...\n *   ['function foo(Baz bar) view returns (string)', 'struct Baz { string name; }']\n * >\n */\nexport type ParseAbiItem<\n  TSignature extends string | readonly string[] | readonly unknown[],\n> =\n  | (TSignature extends string\n      ? string extends TSignature\n        ? Abi[number]\n        : TSignature extends Signature<TSignature> // Validate signature\n        ? ParseSignature<TSignature>\n        : never\n      : never)\n  | (TSignature extends readonly string[]\n      ? string[] extends TSignature\n        ? Abi[number] // Return generic Abi item since type was no inferrable\n        : TSignature extends Signatures<TSignature> // Validate signature\n        ? ParseStructs<TSignature> extends infer Structs\n          ? {\n              [K in keyof TSignature]: ParseSignature<\n                TSignature[K] extends string ? TSignature[K] : never,\n                Structs\n              >\n            } extends infer Mapped extends readonly unknown[]\n            ? // Filter out `never` since those are structs\n              Filter<Mapped, never>[0] extends infer Result\n              ? Result extends undefined // convert `undefined` to `never` (e.g. `ParseAbiItem<['struct Foo { string name; }']>`)\n                ? never\n                : Result\n              : never\n            : never\n          : never\n        : never\n      : never)\n\n/**\n * Parses human-readable ABI item (e.g. error, event, function) into {@link Abi} item\n *\n * @param signature - Human-readable ABI item\n * @returns Parsed {@link Abi} item\n *\n * @example\n * const abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint256)')\n * //    ^? const abiItem: { name: \"balanceOf\"; type: \"function\"; stateMutability: \"view\";...\n *\n * @example\n * const abiItem = parseAbiItem([\n *   //  ^? const abiItem: { name: \"foo\"; type: \"function\"; stateMutability: \"view\"; inputs:...\n *   'function foo(Baz bar) view returns (string)',\n *   'struct Baz { string name; }',\n * ])\n */\nexport function parseAbiItem<\n  TSignature extends string | readonly string[] | readonly unknown[],\n>(\n  signature: Narrow<TSignature> &\n    (\n      | (TSignature extends string\n          ? string extends TSignature\n            ? unknown\n            : Signature<TSignature>\n          : never)\n      | (TSignature extends readonly string[]\n          ? TSignature extends readonly [] // empty array\n            ? Error<'At least one signature required.'>\n            : string[] extends TSignature\n            ? unknown\n            : Signatures<TSignature>\n          : never)\n    ),\n): ParseAbiItem<TSignature> {\n  let abiItem\n  if (typeof signature === 'string')\n    abiItem = parseSignature(signature) as ParseAbiItem<TSignature>\n  else {\n    const structs = parseStructs(signature as readonly string[])\n    const length = signature.length as number\n    for (let i = 0; i < length; i++) {\n      const signature_ = (signature as readonly string[])[i]!\n      if (isStructSignature(signature_)) continue\n      abiItem = parseSignature(signature_, structs)\n      break\n    }\n  }\n\n  if (!abiItem) throw new InvalidAbiItemError({ signature })\n  return abiItem as ParseAbiItem<TSignature>\n}\n","import type { AbiParameter } from '../abi.js'\nimport { InvalidAbiParameterError } from '../index.js'\nimport type { Narrow } from '../narrow.js'\nimport type { Error, Filter } from '../types.js'\nimport { isStructSignature, modifiers } from './runtime/signatures.js'\nimport { parseStructs } from './runtime/structs.js'\nimport { parseAbiParameter as parseAbiParameter_ } from './runtime/utils.js'\nimport type { IsStructSignature, Modifier } from './types/signatures.js'\nimport type { ParseStructs } from './types/structs.js'\nimport type { ParseAbiParameter as ParseAbiParameter_ } from './types/utils.js'\n\n/**\n * Parses human-readable ABI parameter into {@link AbiParameter}\n *\n * @param TParam - Human-readable ABI parameter\n * @returns Parsed {@link AbiParameter}\n *\n * @example\n * type Result = ParseAbiParameter<'address from'>\n * //   ^? type Result = { type: \"address\"; name: \"from\"; }\n *\n * @example\n * type Result = ParseAbiParameter<\n *   // ^? type Result = { type: \"tuple\"; components: [{ type: \"string\"; name:...\n *   ['Baz bar', 'struct Baz { string name; }']\n * >\n */\nexport type ParseAbiParameter<\n  TParam extends string | readonly string[] | readonly unknown[],\n> =\n  | (TParam extends string\n      ? TParam extends ''\n        ? never\n        : string extends TParam\n        ? AbiParameter\n        : ParseAbiParameter_<TParam, { Modifier: Modifier }>\n      : never)\n  | (TParam extends readonly string[]\n      ? string[] extends TParam\n        ? AbiParameter // Return generic AbiParameter item since type was no inferrable\n        : ParseStructs<TParam> extends infer Structs\n        ? {\n            [K in keyof TParam]: TParam[K] extends string\n              ? IsStructSignature<TParam[K]> extends true\n                ? never\n                : ParseAbiParameter_<\n                    TParam[K],\n                    { Modifier: Modifier; Structs: Structs }\n                  >\n              : never\n          } extends infer Mapped extends readonly unknown[]\n          ? Filter<Mapped, never>[0] extends infer Result\n            ? Result extends undefined\n              ? never\n              : Result\n            : never\n          : never\n        : never\n      : never)\n\n/**\n * Parses human-readable ABI parameter into {@link AbiParameter}\n *\n * @param param - Human-readable ABI parameter\n * @returns Parsed {@link AbiParameter}\n *\n * @example\n * const abiParameter = parseAbiParameter('address from')\n * //    ^? const abiParameter: { type: \"address\"; name: \"from\"; }\n *\n * @example\n * const abiParameter = parseAbiParameter([\n *   //  ^? const abiParameter: { type: \"tuple\"; components: [{ type: \"string\"; name:...\n *   'Baz bar',\n *   'struct Baz { string name; }',\n * ])\n */\nexport function parseAbiParameter<\n  TParam extends string | readonly string[] | readonly unknown[],\n>(\n  param: Narrow<TParam> &\n    (\n      | (TParam extends string\n          ? TParam extends ''\n            ? Error<'Empty string is not allowed.'>\n            : unknown\n          : never)\n      | (TParam extends readonly string[]\n          ? TParam extends readonly [] // empty array\n            ? Error<'At least one parameter required.'>\n            : string[] extends TParam\n            ? unknown\n            : unknown // TODO: Validate param string\n          : never)\n    ),\n): ParseAbiParameter<TParam> {\n  let abiParameter\n  if (typeof param === 'string')\n    abiParameter = parseAbiParameter_(param, {\n      modifiers,\n    }) as ParseAbiParameter<TParam>\n  else {\n    const structs = parseStructs(param as readonly string[])\n    const length = param.length as number\n    for (let i = 0; i < length; i++) {\n      const signature = (param as readonly string[])[i]!\n      if (isStructSignature(signature)) continue\n      abiParameter = parseAbiParameter_(signature, { modifiers, structs })\n      break\n    }\n  }\n\n  if (!abiParameter) throw new InvalidAbiParameterError({ param })\n\n  return abiParameter as ParseAbiParameter<TParam>\n}\n","import type { AbiParameter } from '../abi.js'\nimport { InvalidAbiParametersError } from '../index.js'\nimport type { Narrow } from '../narrow.js'\nimport type { Error, Filter } from '../types.js'\nimport { isStructSignature, modifiers } from './runtime/signatures.js'\nimport { parseStructs } from './runtime/structs.js'\nimport { splitParameters } from './runtime/utils.js'\nimport { parseAbiParameter as parseAbiParameter_ } from './runtime/utils.js'\nimport type { IsStructSignature, Modifier } from './types/signatures.js'\nimport type { ParseStructs } from './types/structs.js'\nimport type { SplitParameters } from './types/utils.js'\nimport type { ParseAbiParameters as ParseAbiParameters_ } from './types/utils.js'\n\n/**\n * Parses human-readable ABI parameters into {@link AbiParameter}s\n *\n * @param TParams - Human-readable ABI parameters\n * @returns Parsed {@link AbiParameter}s\n *\n * @example\n * type Result = ParseAbiParameters('address from, address to, uint256 amount')\n * //   ^? type Result: [{ type: \"address\"; name: \"from\"; }, { type: \"address\";...\n *\n * @example\n * type Result = ParseAbiParameters<\n *   // ^? type Result: [{ type: \"tuple\"; components: [{ type: \"string\"; name:...\n *   ['Baz bar', 'struct Baz { string name; }']\n * >\n */\nexport type ParseAbiParameters<\n  TParams extends string | readonly string[] | readonly unknown[],\n> =\n  | (TParams extends string\n      ? TParams extends ''\n        ? never\n        : string extends TParams\n        ? readonly AbiParameter[]\n        : ParseAbiParameters_<SplitParameters<TParams>, { Modifier: Modifier }>\n      : never)\n  | (TParams extends readonly string[]\n      ? string[] extends TParams\n        ? AbiParameter // Return generic AbiParameter item since type was no inferrable\n        : ParseStructs<TParams> extends infer Structs\n        ? {\n            [K in keyof TParams]: TParams[K] extends string\n              ? IsStructSignature<TParams[K]> extends true\n                ? never\n                : ParseAbiParameters_<\n                    SplitParameters<TParams[K]>,\n                    { Modifier: Modifier; Structs: Structs }\n                  >\n              : never\n          } extends infer Mapped extends readonly unknown[]\n          ? Filter<Mapped, never>[0] extends infer Result\n            ? Result extends undefined\n              ? never\n              : Result\n            : never\n          : never\n        : never\n      : never)\n\n/**\n * Parses human-readable ABI parameters into {@link AbiParameter}s\n *\n * @param params - Human-readable ABI parameters\n * @returns Parsed {@link AbiParameter}s\n *\n * @example\n * const abiParameters = parseAbiParameters('address from, address to, uint256 amount')\n * //    ^? const abiParameters: [{ type: \"address\"; name: \"from\"; }, { type: \"address\";...\n *\n * @example\n * const abiParameters = parseAbiParameters([\n *   //  ^? const abiParameters: [{ type: \"tuple\"; components: [{ type: \"string\"; name:...\n *   'Baz bar',\n *   'struct Baz { string name; }',\n * ])\n */\nexport function parseAbiParameters<\n  TParams extends string | readonly string[] | readonly unknown[],\n>(\n  params: Narrow<TParams> &\n    (\n      | (TParams extends string\n          ? TParams extends ''\n            ? Error<'Empty string is not allowed.'>\n            : unknown\n          : never)\n      | (TParams extends readonly string[]\n          ? TParams extends readonly [] // empty array\n            ? Error<'At least one parameter required.'>\n            : string[] extends TParams\n            ? unknown\n            : unknown // TODO: Validate param string\n          : never)\n    ),\n): ParseAbiParameters<TParams> {\n  const abiParameters: AbiParameter[] = []\n  if (typeof params === 'string') {\n    const parameters = splitParameters(params)\n    const length = parameters.length\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter_(parameters[i]!, { modifiers }))\n    }\n  } else {\n    const structs = parseStructs(params as readonly string[])\n    const length = params.length as number\n    for (let i = 0; i < length; i++) {\n      const signature = (params as readonly string[])[i]!\n      if (isStructSignature(signature)) continue\n      const parameters = splitParameters(signature)\n      const length = parameters.length\n      for (let k = 0; k < length; k++) {\n        abiParameters.push(\n          parseAbiParameter_(parameters[k]!, { modifiers, structs }),\n        )\n      }\n    }\n  }\n\n  if (abiParameters.length === 0)\n    throw new InvalidAbiParametersError({ params })\n\n  return abiParameters as ParseAbiParameters<TParams>\n}\n","import type { AbiItemType, AbiParameter } from '../../abi.js'\n\n/**\n * Gets {@link parameterCache} cache key namespaced by {@link type}. This prevents parameters from being accessible to types that don't allow them (e.g. `string indexed foo` not allowed outside of `type: 'event'`).\n * @param param ABI parameter string\n * @param type ABI parameter type\n * @returns Cache key for {@link parameterCache}\n */\nexport function getParameterCacheKey(\n  param: string,\n  type?: AbiItemType | 'struct',\n) {\n  if (type) return `${type}:${param}`\n  return param\n}\n\n/**\n * Basic cache seeded with common ABI parameter strings.\n *\n * **Note: When seeding more parameters, make sure you benchmark performance. The current number is the ideal balance between performance and having an already existing cache.**\n */\nexport const parameterCache = new Map<\n  string,\n  AbiParameter & { indexed?: boolean }\n>([\n  // Unnamed\n  ['address', { type: 'address' }],\n  ['bool', { type: 'bool' }],\n  ['bytes', { type: 'bytes' }],\n  ['bytes32', { type: 'bytes32' }],\n  ['int', { type: 'int256' }],\n  ['int256', { type: 'int256' }],\n  ['string', { type: 'string' }],\n  ['uint', { type: 'uint256' }],\n  ['uint8', { type: 'uint8' }],\n  ['uint16', { type: 'uint16' }],\n  ['uint24', { type: 'uint24' }],\n  ['uint32', { type: 'uint32' }],\n  ['uint64', { type: 'uint64' }],\n  ['uint96', { type: 'uint96' }],\n  ['uint112', { type: 'uint112' }],\n  ['uint160', { type: 'uint160' }],\n  ['uint192', { type: 'uint192' }],\n  ['uint256', { type: 'uint256' }],\n\n  // Named\n  ['address owner', { type: 'address', name: 'owner' }],\n  ['address to', { type: 'address', name: 'to' }],\n  ['bool approved', { type: 'bool', name: 'approved' }],\n  ['bytes _data', { type: 'bytes', name: '_data' }],\n  ['bytes data', { type: 'bytes', name: 'data' }],\n  ['bytes signature', { type: 'bytes', name: 'signature' }],\n  ['bytes32 hash', { type: 'bytes32', name: 'hash' }],\n  ['bytes32 r', { type: 'bytes32', name: 'r' }],\n  ['bytes32 root', { type: 'bytes32', name: 'root' }],\n  ['bytes32 s', { type: 'bytes32', name: 's' }],\n  ['string name', { type: 'string', name: 'name' }],\n  ['string symbol', { type: 'string', name: 'symbol' }],\n  ['string tokenURI', { type: 'string', name: 'tokenURI' }],\n  ['uint tokenId', { type: 'uint256', name: 'tokenId' }],\n  ['uint8 v', { type: 'uint8', name: 'v' }],\n  ['uint256 balance', { type: 'uint256', name: 'balance' }],\n  ['uint256 tokenId', { type: 'uint256', name: 'tokenId' }],\n  ['uint256 value', { type: 'uint256', name: 'value' }],\n\n  // Indexed\n  [\n    'event:address indexed from',\n    { type: 'address', name: 'from', indexed: true },\n  ],\n  ['event:address indexed to', { type: 'address', name: 'to', indexed: true }],\n  [\n    'event:uint indexed tokenId',\n    { type: 'uint256', name: 'tokenId', indexed: true },\n  ],\n  [\n    'event:uint256 indexed tokenId',\n    { type: 'uint256', name: 'tokenId', indexed: true },\n  ],\n])\n","import type { AbiStateMutability } from '../../abi.js'\nimport { execTyped } from '../../regex.js'\nimport type {\n  EventModifier,\n  FunctionModifier,\n  Modifier,\n} from '../types/signatures.js'\n\n// https://regexr.com/7gmok\nconst errorSignatureRegex =\n  /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)$/\nexport function isErrorSignature(signature: string) {\n  return errorSignatureRegex.test(signature)\n}\nexport function execErrorSignature(signature: string) {\n  return execTyped<{ name: string; parameters: string }>(\n    errorSignatureRegex,\n    signature,\n  )\n}\n\n// https://regexr.com/7gmoq\nconst eventSignatureRegex =\n  /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)$/\nexport function isEventSignature(signature: string) {\n  return eventSignatureRegex.test(signature)\n}\nexport function execEventSignature(signature: string) {\n  return execTyped<{ name: string; parameters: string }>(\n    eventSignatureRegex,\n    signature,\n  )\n}\n\n// https://regexr.com/7gmot\nconst functionSignatureRegex =\n  /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\\s?\\((?<returns>.*?)\\))?$/\nexport function isFunctionSignature(signature: string) {\n  return functionSignatureRegex.test(signature)\n}\nexport function execFunctionSignature(signature: string) {\n  return execTyped<{\n    name: string\n    parameters: string\n    stateMutability?: AbiStateMutability\n    returns?: string\n  }>(functionSignatureRegex, signature)\n}\n\n// https://regexr.com/7gmp3\nconst structSignatureRegex =\n  /^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \\{(?<properties>.*?)\\}$/\nexport function isStructSignature(signature: string) {\n  return structSignatureRegex.test(signature)\n}\nexport function execStructSignature(signature: string) {\n  return execTyped<{ name: string; properties: string }>(\n    structSignatureRegex,\n    signature,\n  )\n}\n\n// https://regexr.com/78u01\nconst constructorSignatureRegex =\n  /^constructor\\((?<parameters>.*?)\\)(?:\\s(?<stateMutability>payable{1}))?$/\nexport function isConstructorSignature(signature: string) {\n  return constructorSignatureRegex.test(signature)\n}\nexport function execConstructorSignature(signature: string) {\n  return execTyped<{\n    parameters: string\n    stateMutability?: Extract<AbiStateMutability, 'payable'>\n  }>(constructorSignatureRegex, signature)\n}\n\n// https://regexr.com/78u18\nconst fallbackSignatureRegex = /^fallback\\(\\)$/\nexport function isFallbackSignature(signature: string) {\n  return fallbackSignatureRegex.test(signature)\n}\n\n// https://regexr.com/78u1k\nconst receiveSignatureRegex = /^receive\\(\\) external payable$/\nexport function isReceiveSignature(signature: string) {\n  return receiveSignatureRegex.test(signature)\n}\n\nexport const modifiers = new Set<Modifier>([\n  'memory',\n  'indexed',\n  'storage',\n  'calldata',\n])\nexport const eventModifiers = new Set<EventModifier>(['indexed'])\nexport const functionModifiers = new Set<FunctionModifier>([\n  'calldata',\n  'memory',\n  'storage',\n])\n","import type { AbiParameter } from '../../abi.js'\nimport { execTyped, isTupleRegex } from '../../regex.js'\nimport { UnknownTypeError } from '../errors/abiItem.js'\nimport { InvalidAbiTypeParameterError } from '../errors/abiParameter.js'\nimport {\n  InvalidSignatureError,\n  InvalidStructSignatureError,\n} from '../errors/signature.js'\nimport { CircularReferenceError } from '../errors/struct.js'\nimport type { StructLookup } from '../types/structs.js'\nimport { execStructSignature, isStructSignature } from './signatures.js'\nimport { isSolidityType, parseAbiParameter } from './utils.js'\n\nexport function parseStructs(signatures: readonly string[]) {\n  // Create \"shallow\" version of each struct (and filter out non-structs or invalid structs)\n  const shallowStructs: StructLookup = {}\n  const signaturesLength = signatures.length\n  for (let i = 0; i < signaturesLength; i++) {\n    const signature = signatures[i]!\n    if (!isStructSignature(signature)) continue\n\n    const match = execStructSignature(signature)\n    if (!match) throw new InvalidSignatureError({ signature, type: 'struct' })\n\n    const properties = match.properties.split(';')\n\n    const components: AbiParameter[] = []\n    const propertiesLength = properties.length\n    for (let k = 0; k < propertiesLength; k++) {\n      const property = properties[k]!\n      const trimmed = property.trim()\n      if (!trimmed) continue\n      const abiParameter = parseAbiParameter(trimmed, {\n        type: 'struct',\n      })\n      components.push(abiParameter)\n    }\n\n    if (!components.length) throw new InvalidStructSignatureError({ signature })\n    shallowStructs[match.name] = components\n  }\n\n  // Resolve nested structs inside each parameter\n  const resolvedStructs: StructLookup = {}\n  const entries = Object.entries(shallowStructs)\n  const entriesLength = entries.length\n  for (let i = 0; i < entriesLength; i++) {\n    const [name, parameters] = entries[i]!\n    resolvedStructs[name] = resolveStructs(parameters, shallowStructs)\n  }\n\n  return resolvedStructs\n}\n\nconst typeWithoutTupleRegex =\n  /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\[\\d*?\\])+?)?$/\n\nfunction resolveStructs(\n  abiParameters: readonly (AbiParameter & { indexed?: true })[],\n  structs: StructLookup,\n  ancestors = new Set<string>(),\n) {\n  const components: AbiParameter[] = []\n  const length = abiParameters.length\n  for (let i = 0; i < length; i++) {\n    const abiParameter = abiParameters[i]!\n    const isTuple = isTupleRegex.test(abiParameter.type)\n    if (isTuple) components.push(abiParameter)\n    else {\n      const match = execTyped<{ array?: string; type: string }>(\n        typeWithoutTupleRegex,\n        abiParameter.type,\n      )\n      if (!match?.type) throw new InvalidAbiTypeParameterError({ abiParameter })\n\n      const { array, type } = match\n      if (type in structs) {\n        if (ancestors.has(type)) throw new CircularReferenceError({ type })\n\n        components.push({\n          ...abiParameter,\n          type: `tuple${array ?? ''}`,\n          components: resolveStructs(\n            structs[type] ?? [],\n            structs,\n            new Set([...ancestors, type]),\n          ),\n        })\n      } else {\n        if (isSolidityType(type)) components.push(abiParameter)\n        else throw new UnknownTypeError({ type })\n      }\n    }\n  }\n\n  return components\n}\n","import type {\n  AbiItemType,\n  AbiType,\n  SolidityArray,\n  SolidityBytes,\n  SolidityString,\n  SolidityTuple,\n} from '../../abi.js'\nimport {\n  bytesRegex,\n  execTyped,\n  integerRegex,\n  isTupleRegex,\n} from '../../regex.js'\nimport { UnknownSolidityTypeError } from '../errors/abiItem.js'\nimport {\n  InvalidFunctionModifierError,\n  InvalidModifierError,\n  InvalidParameterError,\n  SolidityProtectedKeywordError,\n} from '../errors/abiParameter.js'\nimport {\n  InvalidSignatureError,\n  UnknownSignatureError,\n} from '../errors/signature.js'\nimport { InvalidParenthesisError } from '../errors/splitParameters.js'\nimport type { FunctionModifier, Modifier } from '../types/signatures.js'\nimport type { StructLookup } from '../types/structs.js'\nimport { getParameterCacheKey, parameterCache } from './cache.js'\nimport {\n  eventModifiers,\n  execConstructorSignature,\n  execErrorSignature,\n  execEventSignature,\n  execFunctionSignature,\n  functionModifiers,\n  isConstructorSignature,\n  isErrorSignature,\n  isEventSignature,\n  isFallbackSignature,\n  isFunctionSignature,\n  isReceiveSignature,\n} from './signatures.js'\n\nexport function parseSignature(signature: string, structs: StructLookup = {}) {\n  if (isFunctionSignature(signature)) {\n    const match = execFunctionSignature(signature)\n    if (!match) throw new InvalidSignatureError({ signature, type: 'function' })\n\n    const inputParams = splitParameters(match.parameters)\n    const inputs = []\n    const inputLength = inputParams.length\n    for (let i = 0; i < inputLength; i++) {\n      inputs.push(\n        parseAbiParameter(inputParams[i]!, {\n          modifiers: functionModifiers,\n          structs,\n          type: 'function',\n        }),\n      )\n    }\n\n    const outputs = []\n    if (match.returns) {\n      const outputParams = splitParameters(match.returns)\n      const outputLength = outputParams.length\n      for (let i = 0; i < outputLength; i++) {\n        outputs.push(\n          parseAbiParameter(outputParams[i]!, {\n            modifiers: functionModifiers,\n            structs,\n            type: 'function',\n          }),\n        )\n      }\n    }\n\n    return {\n      name: match.name,\n      type: 'function',\n      stateMutability: match.stateMutability ?? 'nonpayable',\n      inputs,\n      outputs,\n    }\n  }\n\n  if (isEventSignature(signature)) {\n    const match = execEventSignature(signature)\n    if (!match) throw new InvalidSignatureError({ signature, type: 'event' })\n\n    const params = splitParameters(match.parameters)\n    const abiParameters = []\n    const length = params.length\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(\n        parseAbiParameter(params[i]!, {\n          modifiers: eventModifiers,\n          structs,\n          type: 'event',\n        }),\n      )\n    }\n    return { name: match.name, type: 'event', inputs: abiParameters }\n  }\n\n  if (isErrorSignature(signature)) {\n    const match = execErrorSignature(signature)\n    if (!match) throw new InvalidSignatureError({ signature, type: 'error' })\n\n    const params = splitParameters(match.parameters)\n    const abiParameters = []\n    const length = params.length\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(\n        parseAbiParameter(params[i]!, { structs, type: 'error' }),\n      )\n    }\n    return { name: match.name, type: 'error', inputs: abiParameters }\n  }\n\n  if (isConstructorSignature(signature)) {\n    const match = execConstructorSignature(signature)\n    if (!match)\n      throw new InvalidSignatureError({ signature, type: 'constructor' })\n\n    const params = splitParameters(match.parameters)\n    const abiParameters = []\n    const length = params.length\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(\n        parseAbiParameter(params[i]!, { structs, type: 'constructor' }),\n      )\n    }\n    return {\n      type: 'constructor',\n      stateMutability: match.stateMutability ?? 'nonpayable',\n      inputs: abiParameters,\n    }\n  }\n\n  if (isFallbackSignature(signature)) return { type: 'fallback' }\n  if (isReceiveSignature(signature))\n    return {\n      type: 'receive',\n      stateMutability: 'payable',\n    }\n\n  throw new UnknownSignatureError({ signature })\n}\n\nconst abiParameterWithoutTupleRegex =\n  /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/\nconst abiParameterWithTupleRegex =\n  /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/\nconst dynamicIntegerRegex = /^u?int$/\n\ntype ParseOptions = {\n  modifiers?: Set<Modifier>\n  structs?: StructLookup\n  type?: AbiItemType | 'struct'\n}\n\nexport function parseAbiParameter(param: string, options?: ParseOptions) {\n  // optional namespace cache by `type`\n  const parameterCacheKey = getParameterCacheKey(param, options?.type)\n  if (parameterCache.has(parameterCacheKey))\n    return parameterCache.get(parameterCacheKey)!\n\n  const isTuple = isTupleRegex.test(param)\n  const match = execTyped<{\n    array?: string\n    modifier?: Modifier\n    name?: string\n    type: string\n  }>(\n    isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex,\n    param,\n  )\n  if (!match) throw new InvalidParameterError({ param })\n\n  if (match.name && isSolidityKeyword(match.name))\n    throw new SolidityProtectedKeywordError({ param, name: match.name })\n\n  const name = match.name ? { name: match.name } : {}\n  const indexed = match.modifier === 'indexed' ? { indexed: true } : {}\n  const structs = options?.structs ?? {}\n  let type: string\n  let components = {}\n  if (isTuple) {\n    type = 'tuple'\n    const params = splitParameters(match.type)\n    const components_ = []\n    const length = params.length\n    for (let i = 0; i < length; i++) {\n      // remove `modifiers` from `options` to prevent from being added to tuple components\n      components_.push(parseAbiParameter(params[i]!, { structs }))\n    }\n    components = { components: components_ }\n  } else if (match.type in structs) {\n    type = 'tuple'\n    components = { components: structs[match.type] }\n  } else if (dynamicIntegerRegex.test(match.type)) {\n    type = `${match.type}256`\n  } else {\n    type = match.type\n    if (!(options?.type === 'struct') && !isSolidityType(type))\n      throw new UnknownSolidityTypeError({ type })\n  }\n\n  if (match.modifier) {\n    // Check if modifier exists, but is not allowed (e.g. `indexed` in `functionModifiers`)\n    if (!options?.modifiers?.has?.(match.modifier))\n      throw new InvalidModifierError({\n        param,\n        type: options?.type,\n        modifier: match.modifier,\n      })\n\n    // Check if resolved `type` is valid if there is a function modifier\n    if (\n      functionModifiers.has(match.modifier as FunctionModifier) &&\n      !isValidDataLocation(type, !!match.array)\n    )\n      throw new InvalidFunctionModifierError({\n        param,\n        type: options?.type,\n        modifier: match.modifier,\n      })\n  }\n\n  const abiParameter = {\n    type: `${type}${match.array ?? ''}`,\n    ...name,\n    ...indexed,\n    ...components,\n  }\n  parameterCache.set(parameterCacheKey, abiParameter)\n  return abiParameter\n}\n\n// s/o latika for this\nexport function splitParameters(\n  params: string,\n  result: string[] = [],\n  current = '',\n  depth = 0,\n): readonly string[] {\n  if (params === '') {\n    if (current === '') return result\n    if (depth !== 0) throw new InvalidParenthesisError({ current, depth })\n\n    result.push(current.trim())\n    return result\n  }\n\n  const length = params.length\n  // rome-ignore lint/correctness/noUnreachable: recursive\n  for (let i = 0; i < length; i++) {\n    const char = params[i]\n    const tail = params.slice(i + 1)\n    switch (char) {\n      case ',':\n        return depth === 0\n          ? splitParameters(tail, [...result, current.trim()])\n          : splitParameters(tail, result, `${current}${char}`, depth)\n      case '(':\n        return splitParameters(tail, result, `${current}${char}`, depth + 1)\n      case ')':\n        return splitParameters(tail, result, `${current}${char}`, depth - 1)\n      default:\n        return splitParameters(tail, result, `${current}${char}`, depth)\n    }\n  }\n\n  return []\n}\n\nexport function isSolidityType(\n  type: string,\n): type is Exclude<AbiType, SolidityTuple | SolidityArray> {\n  return (\n    type === 'address' ||\n    type === 'bool' ||\n    type === 'function' ||\n    type === 'string' ||\n    bytesRegex.test(type) ||\n    integerRegex.test(type)\n  )\n}\n\nconst protectedKeywordsRegex =\n  /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/\n\nexport function isSolidityKeyword(name: string) {\n  return (\n    name === 'address' ||\n    name === 'bool' ||\n    name === 'function' ||\n    name === 'string' ||\n    name === 'tuple' ||\n    bytesRegex.test(name) ||\n    integerRegex.test(name) ||\n    protectedKeywordsRegex.test(name)\n  )\n}\n\nexport function isValidDataLocation(\n  type: string,\n  isArray: boolean,\n): type is Exclude<\n  AbiType,\n  SolidityString | Extract<SolidityBytes, 'bytes'> | SolidityArray\n> {\n  return isArray || type === 'bytes' || type === 'string' || type === 'tuple'\n}\n","export type {\n  Abi,\n  AbiConstructor,\n  AbiError,\n  AbiEvent,\n  AbiEventParameter,\n  AbiFallback,\n  AbiFunction,\n  AbiInternalType,\n  AbiItemType,\n  AbiParameter,\n  AbiParameterKind,\n  AbiReceive,\n  AbiStateMutability,\n  AbiType,\n  Address,\n  SolidityAddress,\n  SolidityArray,\n  SolidityArrayWithoutTuple,\n  SolidityArrayWithTuple,\n  SolidityBool,\n  SolidityBytes,\n  SolidityFixedArrayRange,\n  SolidityFixedArraySizeLookup,\n  SolidityFunction,\n  SolidityInt,\n  SolidityString,\n  SolidityTuple,\n  TypedData,\n  TypedDataDomain,\n  TypedDataParameter,\n  TypedDataType,\n} from './abi.js'\n\nexport type { Config, DefaultConfig, ResolvedConfig } from './config.js'\n\nexport { BaseError } from './errors.js'\n\nexport type { Narrow } from './narrow.js'\nexport { narrow } from './narrow.js'\n\nexport type {\n  AbiParameterToPrimitiveType,\n  AbiParametersToPrimitiveTypes,\n  AbiTypeToPrimitiveType,\n  ExtractAbiError,\n  ExtractAbiErrorNames,\n  ExtractAbiErrors,\n  ExtractAbiEvent,\n  ExtractAbiEventNames,\n  ExtractAbiEvents,\n  ExtractAbiFunction,\n  ExtractAbiFunctionNames,\n  ExtractAbiFunctions,\n  IsAbi,\n  IsTypedData,\n  TypedDataToPrimitiveTypes,\n} from './utils.js'\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n// Human-Readable\n\nexport {\n  formatAbi,\n  type FormatAbi,\n} from './human-readable/formatAbi.js'\n\nexport {\n  formatAbiItem,\n  type FormatAbiItem,\n} from './human-readable/formatAbiItem.js'\n\nexport {\n  formatAbiParameter,\n  type FormatAbiParameter,\n} from './human-readable/formatAbiParameter.js'\n\nexport {\n  formatAbiParameters,\n  type FormatAbiParameters,\n} from './human-readable/formatAbiParameters.js'\n\nexport { parseAbi, type ParseAbi } from './human-readable/parseAbi.js'\n\nexport {\n  parseAbiItem,\n  type ParseAbiItem,\n} from './human-readable/parseAbiItem.js'\n\nexport {\n  parseAbiParameter,\n  type ParseAbiParameter,\n} from './human-readable/parseAbiParameter.js'\n\nexport {\n  parseAbiParameters,\n  type ParseAbiParameters,\n} from './human-readable/parseAbiParameters.js'\n\nexport {\n  UnknownTypeError,\n  InvalidAbiItemError,\n  UnknownSolidityTypeError,\n} from './human-readable/errors/abiItem.js'\n\nexport {\n  InvalidAbiTypeParameterError,\n  InvalidFunctionModifierError,\n  InvalidModifierError,\n  SolidityProtectedKeywordError,\n  InvalidParameterError,\n  InvalidAbiParametersError,\n  InvalidAbiParameterError,\n} from './human-readable/errors/abiParameter.js'\n\nexport {\n  InvalidStructSignatureError,\n  InvalidSignatureError,\n  UnknownSignatureError,\n} from './human-readable/errors/signature.js'\n\nexport { InvalidParenthesisError } from './human-readable/errors/splitParameters.js'\n\nexport { CircularReferenceError } from './human-readable/errors/struct.js'\n","/**\n * Infers embedded primitive type of any type\n *\n * @param T - Type to infer\n * @returns Embedded type of {@link TType}\n *\n * @example\n * type Result = Narrow<['foo', 'bar', 1]>\n */\n// s/o https://twitter.com/hd_nvim/status/1578567206190780417\nexport type Narrow<TType> =\n  | (unknown extends TType ? unknown : never)\n  | (TType extends Function ? TType : never)\n  | (TType extends bigint | boolean | number | string ? TType : never)\n  | (TType extends [] ? [] : never)\n  | { [K in keyof TType]: Narrow<TType[K]> }\n\n/**\n * Infers embedded primitive type of any type\n * Same as `as const` but without setting the object as readonly and without needing the user to use it.\n *\n * @param value - Value to infer\n * @returns Value with embedded type inferred\n *\n * @example\n * const result = narrow(['foo', 'bar', 1])\n */\nexport function narrow<TType>(value: Narrow<TType>) {\n  return value\n}\n","// TODO: This looks cool. Need to check the performance of `new RegExp` versus defined inline though.\n// https://twitter.com/GabrielVergnaud/status/1622906834343366657\nexport function execTyped<T>(regex: RegExp, string: string) {\n  const match = regex.exec(string)\n  return match?.groups as T | undefined\n}\n\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\n\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nexport const integerRegex =\n  /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\n\nexport const isTupleRegex = /^\\(.+?\\).*?$/\n","export const version = '0.9.8'\n","import type { Address } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../types.js'\n\nexport type ParseAccountErrorType = ErrorType\n\nexport function parseAccount(account: Address | Account): Account {\n  if (typeof account === 'string') return { address: account, type: 'json-rpc' }\n  return account\n}\n","import type { Address } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport {\n  type ChecksumAddressErrorType,\n  checksumAddress,\n} from '../../utils/address/getAddress.js'\nimport {\n  type Keccak256ErrorType,\n  keccak256,\n} from '../../utils/hash/keccak256.js'\n\nexport type PublicKeyToAddressErrorType =\n  | ChecksumAddressErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\n/**\n * @description Converts an ECDSA public key to an address.\n *\n * @param publicKey The public key to convert.\n *\n * @returns The address.\n */\nexport function publicKeyToAddress(publicKey: Hex): Address {\n  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26)\n  return checksumAddress(`0x${address}`) as Address\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  addressResolverAbi,\n  universalResolverResolveAbi,\n} from '../../constants/abis.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type TrimErrorType, trim } from '../../utils/data/trim.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport { type NamehashErrorType, namehash } from '../../utils/ens/namehash.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsAddressParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** ENSIP-9 compliant coinType used to resolve addresses for other chains */\n    coinType?: number\n    /** Name to get the address for. */\n    name: string\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address\n  }\n>\n\nexport type GetEnsAddressReturnType = Address | null\n\nexport type GetEnsAddressErrorType =\n  | GetChainContractAddressErrorType\n  | EncodeFunctionDataErrorType\n  | NamehashErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | DecodeFunctionResultErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Gets address for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAddressParameters}\n * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAddress, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAddress = await getEnsAddress(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n */\nexport async function getEnsAddress<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    coinType,\n    name,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsAddressParameters,\n): Promise<GetEnsAddressReturnType> {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  try {\n    const functionData = encodeFunctionData({\n      abi: addressResolverAbi,\n      functionName: 'addr',\n      ...(coinType != null\n        ? { args: [namehash(name), BigInt(coinType)] }\n        : { args: [namehash(name)] }),\n    })\n\n    const res = await getAction(\n      client,\n      readContract,\n      'readContract',\n    )({\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      functionName: 'resolve',\n      args: [toHex(packetToBytes(name)), functionData],\n      blockNumber,\n      blockTag,\n    })\n\n    if (res[0] === '0x') return null\n\n    const address = decodeFunctionResult({\n      abi: addressResolverAbi,\n      args: coinType != null ? [namehash(name), BigInt(coinType)] : undefined,\n      functionName: 'addr',\n      data: res[0],\n    })\n\n    if (address === '0x') return null\n    if (trim(address) === '0x00') return null\n    return address\n  } catch (err) {\n    if (isNullUniversalResolverError(err, 'resolve')) return null\n    throw err\n  }\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { AssetGatewayUrls } from '../../types/ens.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type ParseAvatarRecordErrorType,\n  parseAvatarRecord,\n} from '../../utils/ens/avatar/parseAvatarRecord.js'\nimport { getAction } from '../../utils/getAction.js'\n\nimport {\n  type GetEnsTextErrorType,\n  type GetEnsTextParameters,\n  getEnsText,\n} from './getEnsText.js'\n\nexport type GetEnsAvatarParameters = Prettify<\n  Omit<GetEnsTextParameters, 'key'> & {\n    /** Gateway urls to resolve IPFS and/or Arweave assets. */\n    gatewayUrls?: AssetGatewayUrls\n  }\n>\n\nexport type GetEnsAvatarReturnType = string | null\n\nexport type GetEnsAvatarErrorType =\n  | GetEnsTextErrorType\n  | ParseAvatarRecordErrorType\n  | ErrorType\n\n/**\n * Gets the avatar of an ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAvatar.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls [`getEnsText`](https://viem.sh/docs/ens/actions/getEnsText.html) with `key` set to `'avatar'`.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAvatarParameters}\n * @returns Avatar URI or `null` if not found. {@link GetEnsAvatarReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAvatar, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAvatar = await getEnsAvatar(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\n */\nexport async function getEnsAvatar<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    gatewayUrls,\n    name,\n    universalResolverAddress,\n  }: GetEnsAvatarParameters,\n): Promise<GetEnsAvatarReturnType> {\n  const record = await getAction(\n    client,\n    getEnsText,\n    'getEnsText',\n  )({\n    blockNumber,\n    blockTag,\n    key: 'avatar',\n    name,\n    universalResolverAddress,\n  })\n  if (!record) return null\n  try {\n    return await parseAvatarRecord(client, { record, gatewayUrls })\n  } catch {\n    return null\n  }\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { universalResolverReverseAbi } from '../../constants/abis.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsNameParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** Address to get ENS name for. */\n    address: Address\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address\n  }\n>\n\nexport type GetEnsNameReturnType = string | null\n\nexport type GetEnsNameErrorType =\n  | GetChainContractAddressErrorType\n  | ReadContractErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | ErrorType\n\n/**\n * Gets primary name for specified address.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsName.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsNameParameters}\n * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsName } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensName = await getEnsName(client, {\n *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n * })\n * // 'wevm.eth'\n */\nexport async function getEnsName<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    blockNumber,\n    blockTag,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsNameParameters,\n): Promise<GetEnsNameReturnType> {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`\n  try {\n    const [name, resolvedAddress] = await getAction(\n      client,\n      readContract,\n      'readContract',\n    )({\n      address: universalResolverAddress,\n      abi: universalResolverReverseAbi,\n      functionName: 'reverse',\n      args: [toHex(packetToBytes(reverseNode))],\n      blockNumber,\n      blockTag,\n    })\n    if (address.toLowerCase() !== resolvedAddress.toLowerCase()) return null\n    return name\n  } catch (err) {\n    if (isNullUniversalResolverError(err, 'reverse')) return null\n    throw err\n  }\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsResolverParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** Name to get the address for. */\n    name: string\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address\n  }\n>\n\nexport type GetEnsResolverReturnType = Address\n\nexport type GetEnsResolverErrorType =\n  | GetChainContractAddressErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | ErrorType\n\n/**\n * Gets resolver for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsResolverParameters}\n * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsResolver, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const resolverAddress = await getEnsResolver(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\n */\nexport async function getEnsResolver<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    name,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsResolverParameters,\n) {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  const [resolverAddress] = await getAction(\n    client,\n    readContract,\n    'readContract',\n  )({\n    address: universalResolverAddress,\n    abi: [\n      {\n        inputs: [{ type: 'bytes' }],\n        name: 'findResolver',\n        outputs: [{ type: 'address' }, { type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n      },\n    ],\n    functionName: 'findResolver',\n    args: [toHex(packetToBytes(name))],\n    blockNumber,\n    blockTag,\n  })\n  return resolverAddress\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  textResolverAbi,\n  universalResolverResolveAbi,\n} from '../../constants/abis.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport { type NamehashErrorType, namehash } from '../../utils/ens/namehash.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsTextParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** ENS name to get Text for. */\n    name: string\n    /** Text record to retrieve. */\n    key: string\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address\n  }\n>\n\nexport type GetEnsTextReturnType = string | null\n\nexport type GetEnsTextErrorType =\n  | GetChainContractAddressErrorType\n  | ReadContractErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | EncodeFunctionDataErrorType\n  | NamehashErrorType\n  | DecodeFunctionResultErrorType\n\n/**\n * Gets a text record for specified ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsTextParameters}\n * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsText, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const twitterRecord = await getEnsText(client, {\n *   name: normalize('wevm.eth'),\n *   key: 'com.twitter',\n * })\n * // 'wagmi_sh'\n */\nexport async function getEnsText<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    name,\n    key,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsTextParameters,\n): Promise<GetEnsTextReturnType> {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  try {\n    const res = await getAction(\n      client,\n      readContract,\n      'readContract',\n    )({\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      functionName: 'resolve',\n      args: [\n        toHex(packetToBytes(name)),\n        encodeFunctionData({\n          abi: textResolverAbi,\n          functionName: 'text',\n          args: [namehash(name), key],\n        }),\n      ],\n      blockNumber,\n      blockTag,\n    })\n\n    if (res[0] === '0x') return null\n\n    const record = decodeFunctionResult({\n      abi: textResolverAbi,\n      functionName: 'text',\n      data: res[0],\n    })\n\n    return record === '' ? null : record\n  } catch (err) {\n    if (isNullUniversalResolverError(err, 'resolve')) return null\n    throw err\n  }\n}\n","import type {\n  Abi,\n  AbiEvent,\n  AbiFunction,\n  AbiParametersToPrimitiveTypes,\n  Address,\n  ExtractAbiEvent,\n  ExtractAbiEventNames,\n  ExtractAbiFunction,\n  ExtractAbiFunctionNames,\n} from 'abitype'\n\nimport type { Account } from '../accounts/types.js'\nimport type { Client } from '../clients/createClient.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport type { Chain } from '../types/chain.js'\nimport type {\n  AbiEventParametersToPrimitiveTypes,\n  MaybeExtractEventArgsFromAbi,\n} from '../types/contract.js'\nimport type {\n  IsNarrowable,\n  IsNever,\n  IsUndefined,\n  Or,\n  Prettify,\n  UnionOmit,\n} from '../types/utils.js'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type CreateContractEventFilterParameters,\n  type CreateContractEventFilterReturnType,\n  createContractEventFilter,\n} from './public/createContractEventFilter.js'\nimport {\n  type EstimateContractGasParameters,\n  type EstimateContractGasReturnType,\n  estimateContractGas,\n} from './public/estimateContractGas.js'\nimport {\n  type GetContractEventsParameters,\n  type GetContractEventsReturnType,\n  getContractEvents,\n} from './public/getContractEvents.js'\nimport {\n  type ReadContractParameters,\n  type ReadContractReturnType,\n  readContract,\n} from './public/readContract.js'\nimport {\n  type SimulateContractParameters,\n  type SimulateContractReturnType,\n  simulateContract,\n} from './public/simulateContract.js'\nimport {\n  type WatchContractEventParameters,\n  type WatchContractEventReturnType,\n  watchContractEvent,\n} from './public/watchContractEvent.js'\nimport {\n  type WriteContractParameters,\n  type WriteContractReturnType,\n  writeContract,\n} from './wallet/writeContract.js'\n\nexport type GetContractParameters<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TPublicClient extends Client<TTransport, TChain> | unknown = unknown,\n  TWalletClient extends\n    | Client<TTransport, TChain, TAccount>\n    | unknown = unknown,\n  TAddress extends Address = Address,\n> = {\n  /** Contract ABI */\n  abi: TAbi\n  /** Contract address */\n  address: TAddress\n  /**\n   * Public client\n   *\n   * If you pass in a [`publicClient`](https://viem.sh/docs/clients/public.html), the following methods are available:\n   *\n   * - [`createEventFilter`](https://viem.sh/docs/contract/createContractEventFilter.html)\n   * - [`estimateGas`](https://viem.sh/docs/contract/estimateContractGas.html)\n   * - [`getEvents`](https://viem.sh/docs/contract/getContractEvents.html)\n   * - [`read`](https://viem.sh/docs/contract/readContract.html)\n   * - [`simulate`](https://viem.sh/docs/contract/simulateContract.html)\n   * - [`watchEvent`](https://viem.sh/docs/contract/watchContractEvent.html)\n   */\n  publicClient?: TPublicClient\n  /**\n   * Wallet client\n   *\n   * If you pass in a [`walletClient`](https://viem.sh/docs/clients/wallet.html), the following methods are available:\n   *\n   * - [`estimateGas`](https://viem.sh/docs/contract/estimateContractGas.html)\n   * - [`write`](https://viem.sh/docs/contract/writeContract.html)\n   */\n  walletClient?: TWalletClient\n}\n\nexport type GetContractReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TPublicClient extends Client | unknown = unknown,\n  TWalletClient extends Client | unknown = unknown,\n  TAddress extends Address = Address,\n  _EventNames extends string = TAbi extends Abi\n    ? Abi extends TAbi\n      ? string\n      : ExtractAbiEventNames<TAbi>\n    : string,\n  _ReadFunctionNames extends string = TAbi extends Abi\n    ? Abi extends TAbi\n      ? string\n      : ExtractAbiFunctionNames<TAbi, 'pure' | 'view'>\n    : string,\n  _WriteFunctionNames extends string = TAbi extends Abi\n    ? Abi extends TAbi\n      ? string\n      : ExtractAbiFunctionNames<TAbi, 'nonpayable' | 'payable'>\n    : string,\n  _Narrowable extends boolean = IsNarrowable<TAbi, Abi>,\n> = Prettify<\n  (TPublicClient extends Client\n    ? (IsNever<_ReadFunctionNames> extends true\n        ? unknown\n        : {\n            /**\n             * Calls a read-only function on a contract, and returns the response.\n             *\n             * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n             *\n             * Internally, `read` uses a [Public Client](https://viem.sh/docs/clients/public.html) to call the [`call` action](https://viem.sh/docs/actions/public/call.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n             *\n             * @example\n             * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n             * import { mainnet } from 'viem/chains'\n             *\n             * const publicClient = createPublicClient({\n             *   chain: mainnet,\n             *   transport: http(),\n             * })\n             * const contract = getContract({\n             *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n             *   abi: parseAbi([\n             *     'function balanceOf(address owner) view returns (uint256)',\n             *   ]),\n             *   publicClient,\n             * })\n             * const result = await contract.read.balanceOf(['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'])\n             * // 424122n\n             */\n            read: {\n              [_FunctionName in _ReadFunctionNames]: GetReadFunction<\n                _Narrowable,\n                TAbi,\n                _FunctionName\n              >\n            }\n          }) &\n        (IsNever<_WriteFunctionNames> extends true\n          ? unknown\n          : {\n              /**\n               * Estimates the gas necessary to complete a transaction without submitting it to the network.\n               *\n               * @example\n               * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n               * import { mainnet } from 'viem/chains'\n               *\n               * const publicClient = createPublicClient({\n               *   chain: mainnet,\n               *   transport: http(),\n               * })\n               * const contract = getContract({\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               *   abi: parseAbi(['function mint() public']),\n               *   publicClient,\n               * })\n               * const gas = await contract.estimateGas.mint({\n               *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n               * })\n               */\n              estimateGas: {\n                [_FunctionName in _WriteFunctionNames]: GetEstimateFunction<\n                  _Narrowable,\n                  TPublicClient['chain'],\n                  undefined,\n                  TAbi,\n                  _FunctionName\n                >\n              }\n              /**\n               * Simulates/validates a contract interaction. This is useful for retrieving return data and revert reasons of contract write functions.\n               *\n               * This function does not require gas to execute and does not change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract.html), but also supports contract write functions.\n               *\n               * Internally, `simulate` uses a [Public Client](https://viem.sh/docs/clients/public.html) to call the [`call` action](https://viem.sh/docs/actions/public/call.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n               *\n               * @example\n               * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n               * import { mainnet } from 'viem/chains'\n               *\n               * const publicClient = createPublicClient({\n               *   chain: mainnet,\n               *   transport: http(),\n               * })\n               * const contract = getContract({\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               *   abi: parseAbi(['function mint() public']),\n               *   publicClient,\n               * })\n               * const result = await contract.simulate.mint({\n               *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n               * })\n               */\n              simulate: {\n                [_FunctionName in _WriteFunctionNames]: GetSimulateFunction<\n                  _Narrowable,\n                  TPublicClient['chain'],\n                  TAbi,\n                  _FunctionName\n                >\n              }\n            }) &\n        (IsNever<_EventNames> extends true\n          ? unknown\n          : {\n              /**\n               * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs.html).\n               *\n               * @example\n               * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n               * import { mainnet } from 'viem/chains'\n               *\n               * const publicClient = createPublicClient({\n               *   chain: mainnet,\n               *   transport: http(),\n               * })\n               * const contract = getContract({\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n               *   publicClient,\n               * })\n               * const filter = await contract.createEventFilter.Transfer()\n               */\n              createEventFilter: {\n                [_EventName in _EventNames]: GetEventFilter<\n                  _Narrowable,\n                  TAbi,\n                  _EventName\n                >\n              }\n              /**\n               * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs.html).\n               *\n               * @example\n               * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n               * import { mainnet } from 'viem/chains'\n               *\n               * const publicClient = createPublicClient({\n               *   chain: mainnet,\n               *   transport: http(),\n               * })\n               * const contract = getContract({\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n               *   publicClient,\n               * })\n               * const filter = await contract.createEventFilter.Transfer()\n               */\n              getEvents: {\n                [_EventName in _EventNames]: GetEventsFunction<\n                  _Narrowable,\n                  TAbi,\n                  _EventName\n                >\n              }\n              /**\n               * Watches and returns emitted contract event logs.\n               *\n               * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent.html#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent.html#onLogs).\n               *\n               * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter.html) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getEvents`](https://viem.sh/docs/actions/public/getEvents.html) instead.\n               *\n               * @example\n               * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n               * import { mainnet } from 'viem/chains'\n               *\n               * const publicClient = createPublicClient({\n               *   chain: mainnet,\n               *   transport: http(),\n               * })\n               * const contract = getContract({\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n               *   publicClient,\n               * })\n               * const filter = await contract.createEventFilter.Transfer()\n               * const unwatch = contract.watchEvent.Transfer(\n               *   { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n               *   { onLogs: (logs) => console.log(logs) },\n               * )\n               */\n              watchEvent: {\n                [_EventName in _EventNames]: GetWatchEvent<\n                  _Narrowable,\n                  TAbi,\n                  _EventName\n                >\n              }\n            })\n    : unknown) &\n    (TWalletClient extends Client\n      ? IsNever<_WriteFunctionNames> extends true\n        ? unknown\n        : {\n            /**\n             * Estimates the gas necessary to complete a transaction without submitting it to the network.\n             *\n             * @example\n             * import { createWalletClient, getContract, http, parseAbi } from 'viem'\n             * import { mainnet } from 'viem/chains'\n             *\n             * const walletClient = createWalletClient({\n             *   chain: mainnet,\n             *   transport: http(),\n             * })\n             * const contract = getContract({\n             *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n             *   abi: parseAbi(['function mint() public']),\n             *   walletClient,\n             * })\n             * const gas = await contract.estimateGas.mint({\n             *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n             * })\n             */\n            estimateGas: {\n              [_FunctionName in _WriteFunctionNames]: GetEstimateFunction<\n                _Narrowable,\n                TWalletClient['chain'],\n                TWalletClient['account'],\n                TAbi,\n                _FunctionName\n              >\n            }\n            /**\n             * Executes a write function on a contract.\n             *\n             * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms.html) is needed to be broadcast in order to change the state.\n             *\n             * Internally, `write` uses a [Wallet Client](https://viem.sh/docs/clients/wallet.html) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n             *\n             * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract.html#usage) before you execute it.__\n             *\n             * @example\n             * import { createWalletClient, getContract, http, parseAbi } from 'viem'\n             * import { mainnet } from 'viem/chains'\n             *\n             * const walletClient = createWalletClient({\n             *   chain: mainnet,\n             *   transport: http(),\n             * })\n             * const contract = getContract({\n             *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n             *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n             *   walletClient,\n             * })\n             * const hash = await contract.write.min([69420], {\n             *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n             * })\n             */\n            write: {\n              [_FunctionName in _WriteFunctionNames]: GetWriteFunction<\n                _Narrowable,\n                TWalletClient['chain'],\n                TWalletClient['account'],\n                TAbi,\n                _FunctionName\n              >\n            }\n          }\n      : unknown)\n> & { address: TAddress; abi: TAbi }\n\nexport type GetContractErrorType = ErrorType\n\n/**\n * Gets type-safe interface for performing contract-related actions with a specific `abi` and `address`.\n *\n * - Docs https://viem.sh/docs/contract/getContract.html\n *\n * Using Contract Instances can make it easier to work with contracts if you don't want to pass the `abi` and `address` properites every time you perform contract actions, e.g. [`readContract`](https://viem.sh/docs/contract/readContract.html), [`writeContract`](https://viem.sh/docs/contract/writeContract.html), [`estimateContractGas`](https://viem.sh/docs/contract/estimateContractGas.html), etc.\n *\n * @example\n * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const publicClient = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const contract = getContract({\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi([\n *     'function balanceOf(address owner) view returns (uint256)',\n *     'function ownerOf(uint256 tokenId) view returns (address)',\n *     'function totalSupply() view returns (uint256)',\n *   ]),\n *   publicClient,\n * })\n */\nexport function getContract<\n  TTransport extends Transport,\n  TAddress extends Address,\n  const TAbi extends Abi | readonly unknown[],\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TPublicClient extends Client<TTransport, TChain> | undefined =\n    | Client<TTransport, TChain>\n    | undefined,\n  TWalletClient extends Client<TTransport, TChain, TAccount> | undefined =\n    | Client<TTransport, TChain, TAccount>\n    | undefined,\n>({\n  abi,\n  address,\n  publicClient,\n  walletClient,\n}: GetContractParameters<\n  TTransport,\n  TChain,\n  TAccount,\n  TAbi,\n  TPublicClient,\n  TWalletClient,\n  TAddress\n>): GetContractReturnType<TAbi, TPublicClient, TWalletClient, TAddress> {\n  const hasPublicClient = publicClient !== undefined && publicClient !== null\n  const hasWalletClient = walletClient !== undefined && walletClient !== null\n\n  const contract: {\n    [_ in\n      | 'abi'\n      | 'address'\n      | 'createEventFilter'\n      | 'estimateGas'\n      | 'getEvents'\n      | 'read'\n      | 'simulate'\n      | 'watchEvent'\n      | 'write']?: unknown\n  } = {}\n\n  let hasReadFunction = false\n  let hasWriteFunction = false\n  let hasEvent = false\n  for (const item of abi as Abi) {\n    if (item.type === 'function')\n      if (item.stateMutability === 'view' || item.stateMutability === 'pure')\n        hasReadFunction = true\n      else hasWriteFunction = true\n    else if (item.type === 'event') hasEvent = true\n    // Exit early if all flags are `true`\n    if (hasReadFunction && hasWriteFunction && hasEvent) break\n  }\n\n  if (hasPublicClient) {\n    if (hasReadFunction)\n      contract.read = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[],\n                options?: UnionOmit<\n                  ReadContractParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              return getAction(\n                publicClient,\n                readContract,\n                'readContract',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...options,\n              } as ReadContractParameters)\n            }\n          },\n        },\n      )\n\n    if (hasWriteFunction)\n      contract.simulate = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[],\n                options?: UnionOmit<\n                  SimulateContractParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              return getAction(\n                publicClient,\n                simulateContract,\n                'simulateContract',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...options,\n              } as SimulateContractParameters)\n            }\n          },\n        },\n      )\n\n    if (hasEvent) {\n      contract.createEventFilter = new Proxy(\n        {},\n        {\n          get(_, eventName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[] | object,\n                options?: Omit<\n                  CreateContractEventFilterParameters,\n                  'abi' | 'address' | 'eventName' | 'args'\n                >,\n              ]\n            ) => {\n              const abiEvent = (abi as readonly AbiEvent[]).find(\n                (x: AbiEvent) => x.type === 'event' && x.name === eventName,\n              )\n              const { args, options } = getEventParameters(\n                parameters,\n                abiEvent!,\n              )\n              return getAction(\n                publicClient,\n                createContractEventFilter,\n                'createContractEventFilter',\n              )({\n                abi,\n                address,\n                eventName,\n                args,\n                ...options,\n              } as CreateContractEventFilterParameters)\n            }\n          },\n        },\n      )\n      contract.getEvents = new Proxy(\n        {},\n        {\n          get(_, eventName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[] | object,\n                options?: Omit<\n                  GetContractEventsParameters,\n                  'abi' | 'address' | 'eventName'\n                >,\n              ]\n            ) => {\n              const abiEvent = (abi as readonly AbiEvent[]).find(\n                (x: AbiEvent) => x.type === 'event' && x.name === eventName,\n              )\n              const { args, options } = getEventParameters(\n                parameters,\n                abiEvent!,\n              )\n              return getAction(\n                publicClient,\n                getContractEvents,\n                'getContractEvents',\n              )({\n                abi,\n                address,\n                eventName,\n                args,\n                ...options,\n              } as unknown as GetContractEventsParameters)\n            }\n          },\n        },\n      )\n      contract.watchEvent = new Proxy(\n        {},\n        {\n          get(_, eventName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[] | object,\n                options?: Omit<\n                  WatchContractEventParameters,\n                  'abi' | 'address' | 'eventName'\n                >,\n              ]\n            ) => {\n              const abiEvent = (abi as readonly AbiEvent[]).find(\n                (x: AbiEvent) => x.type === 'event' && x.name === eventName,\n              )\n              const { args, options } = getEventParameters(\n                parameters,\n                abiEvent!,\n              )\n              return getAction(\n                publicClient,\n                watchContractEvent,\n                'watchContractEvent',\n              )({\n                abi,\n                address,\n                eventName,\n                args,\n                ...options,\n              } as unknown as WatchContractEventParameters)\n            }\n          },\n        },\n      )\n    }\n  }\n\n  if (hasWalletClient) {\n    if (hasWriteFunction)\n      contract.write = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[],\n                options?: UnionOmit<\n                  WriteContractParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              return getAction(\n                walletClient,\n                writeContract,\n                'writeContract',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...options,\n              } as unknown as WriteContractParameters<\n                TAbi,\n                typeof functionName,\n                TChain,\n                TAccount\n              >)\n            }\n          },\n        },\n      )\n  }\n\n  if (hasPublicClient || hasWalletClient)\n    if (hasWriteFunction)\n      contract.estimateGas = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[],\n                options?: UnionOmit<\n                  EstimateContractGasParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              const client = (publicClient ?? walletClient)!\n              return getAction(\n                client,\n                estimateContractGas,\n                'estimateContractGas',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...options,\n                account:\n                  (options as EstimateContractGasParameters).account ??\n                  (walletClient as unknown as Client).account,\n              } as any)\n            }\n          },\n        },\n      )\n  contract.address = address\n  contract.abi = abi\n\n  return contract as unknown as GetContractReturnType<\n    TAbi,\n    TPublicClient,\n    TWalletClient,\n    TAddress\n  >\n}\n\n/**\n * @internal exporting for testing only\n */\nexport function getFunctionParameters(\n  values: [args?: readonly unknown[], options?: object],\n) {\n  const hasArgs = values.length && Array.isArray(values[0])\n  const args = hasArgs ? values[0]! : []\n  const options = (hasArgs ? values[1] : values[0]) ?? {}\n  return { args, options }\n}\n\n/**\n * @internal exporting for testing only\n */\nexport function getEventParameters(\n  values: [args?: object | unknown[], options?: object],\n  abiEvent: AbiEvent,\n) {\n  let hasArgs = false\n  // If first item is array, must be `args`\n  if (Array.isArray(values[0])) hasArgs = true\n  // Check if first item is `args` or `options`\n  else if (values.length === 1) {\n    // if event has indexed inputs, must have `args`\n    hasArgs = abiEvent.inputs.some((x) => x.indexed)\n    // If there are two items in array, must have `args`\n  } else if (values.length === 2) {\n    hasArgs = true\n  }\n\n  const args = hasArgs ? values[0]! : undefined\n  const options = (hasArgs ? values[1] : values[0]) ?? {}\n  return { args, options }\n}\n\ntype GetReadFunction<\n  Narrowable extends boolean,\n  TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string,\n  TAbiFunction extends AbiFunction = TAbi extends Abi\n    ? ExtractAbiFunction<TAbi, TFunctionName>\n    : AbiFunction,\n  Args = AbiParametersToPrimitiveTypes<TAbiFunction['inputs']>,\n  Options = Prettify<\n    UnionOmit<\n      ReadContractParameters<TAbi, TFunctionName>,\n      'abi' | 'address' | 'args' | 'functionName'\n    >\n  >,\n> = Narrowable extends true\n  ? (\n      ...parameters: Args extends readonly []\n        ? [options?: Options]\n        : [args: Args, options?: Options]\n    ) => Promise<ReadContractReturnType<TAbi, TFunctionName>>\n  : (\n      ...parameters:\n        | [options?: Options]\n        | [args: readonly unknown[], options?: Options]\n    ) => Promise<ReadContractReturnType>\n\ntype GetEstimateFunction<\n  Narrowable extends boolean,\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string,\n  TAbiFunction extends AbiFunction = TAbi extends Abi\n    ? ExtractAbiFunction<TAbi, TFunctionName>\n    : AbiFunction,\n  Args = AbiParametersToPrimitiveTypes<TAbiFunction['inputs']>,\n  Options = Prettify<\n    UnionOmit<\n      EstimateContractGasParameters<TAbi, TFunctionName, TChain, TAccount>,\n      'abi' | 'address' | 'args' | 'functionName'\n    >\n  >,\n  // For making `options` parameter required if `TAccount`\n  IsOptionsRequired = IsUndefined<TAccount>,\n> = Narrowable extends true\n  ? (\n      ...parameters: Args extends readonly []\n        ? IsOptionsRequired extends true\n          ? [options: Options]\n          : [options?: Options]\n        : [\n            args: Args,\n            ...parameters: IsOptionsRequired extends true\n              ? [options: Options]\n              : [options?: Options],\n          ]\n    ) => Promise<EstimateContractGasReturnType>\n  : (\n      ...parameters:\n        | (IsOptionsRequired extends true\n            ? [options: Options]\n            : [options?: Options])\n        | [\n            args: readonly unknown[],\n            ...parameters: IsOptionsRequired extends true\n              ? [options: Options]\n              : [options?: Options],\n          ]\n    ) => Promise<EstimateContractGasReturnType>\n\ntype GetSimulateFunction<\n  Narrowable extends boolean,\n  TChain extends Chain | undefined,\n  TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string,\n  TAbiFunction extends AbiFunction = TAbi extends Abi\n    ? ExtractAbiFunction<TAbi, TFunctionName>\n    : AbiFunction,\n  Args = AbiParametersToPrimitiveTypes<TAbiFunction['inputs']>,\n> = Narrowable extends true\n  ? <\n      TChainOverride extends Chain | undefined,\n      Options extends Prettify<\n        UnionOmit<\n          SimulateContractParameters<\n            TAbi,\n            TFunctionName,\n            TChain,\n            TChainOverride\n          >,\n          'abi' | 'address' | 'args' | 'functionName'\n        >\n      >,\n    >(\n      ...parameters: Args extends readonly []\n        ? [options?: Options]\n        : [args: Args, options?: Options]\n    ) => Promise<\n      SimulateContractReturnType<TAbi, TFunctionName, TChain, TChainOverride>\n    >\n  : <\n      TChainOverride extends Chain | undefined,\n      Options extends Prettify<\n        UnionOmit<\n          SimulateContractParameters<\n            TAbi,\n            TFunctionName,\n            TChain,\n            TChainOverride\n          >,\n          'abi' | 'address' | 'args' | 'functionName'\n        >\n      >,\n    >(\n      ...parameters:\n        | [options?: Options]\n        | [args: readonly unknown[], options?: Options]\n    ) => Promise<SimulateContractReturnType>\n\ntype GetWriteFunction<\n  Narrowable extends boolean,\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string,\n  TAbiFunction extends AbiFunction = TAbi extends Abi\n    ? ExtractAbiFunction<TAbi, TFunctionName>\n    : AbiFunction,\n  Args = AbiParametersToPrimitiveTypes<TAbiFunction['inputs']>,\n  // For making `options` parameter required if `TAccount` or `TChain` is undefined\n  IsOptionsRequired = Or<[IsUndefined<TAccount>, IsUndefined<TChain>]>,\n> = Narrowable extends true\n  ? <\n      TChainOverride extends Chain | undefined,\n      Options extends Prettify<\n        UnionOmit<\n          WriteContractParameters<\n            TAbi,\n            TFunctionName,\n            TChain,\n            TAccount,\n            TChainOverride\n          >,\n          'abi' | 'address' | 'args' | 'functionName'\n        >\n      >,\n    >(\n      ...parameters: Args extends readonly []\n        ? IsOptionsRequired extends true\n          ? [options: Options]\n          : [options?: Options]\n        : [\n            args: Args,\n            ...parameters: IsOptionsRequired extends true\n              ? [options: Options]\n              : [options?: Options],\n          ]\n    ) => Promise<WriteContractReturnType>\n  : <\n      TChainOverride extends Chain | undefined,\n      Options extends Prettify<\n        UnionOmit<\n          WriteContractParameters<\n            TAbi,\n            TFunctionName,\n            TChain,\n            TAccount,\n            TChainOverride\n          >,\n          'abi' | 'address' | 'args' | 'functionName'\n        >\n      >,\n      Rest extends unknown[] = IsOptionsRequired extends true\n        ? [options: Options]\n        : [options?: Options],\n    >(\n      ...parameters: Rest | [args: readonly unknown[], ...parameters: Rest]\n    ) => Promise<WriteContractReturnType>\n\ntype GetEventFilter<\n  Narrowable extends boolean,\n  TAbi extends Abi | readonly unknown[],\n  TEventName extends string,\n  TAbiEvent extends AbiEvent = TAbi extends Abi\n    ? ExtractAbiEvent<TAbi, TEventName>\n    : AbiEvent,\n  Args = AbiEventParametersToPrimitiveTypes<TAbiEvent['inputs']>,\n  Options = Prettify<\n    Omit<\n      CreateContractEventFilterParameters<TAbi, TEventName>,\n      'abi' | 'address' | 'args' | 'eventName' | 'strict'\n    >\n  >,\n  IndexedInputs = Extract<TAbiEvent['inputs'][number], { indexed: true }>,\n> = Narrowable extends true\n  ? <\n      const TArgs extends\n        | MaybeExtractEventArgsFromAbi<TAbi, TEventName>\n        | undefined,\n      TStrict extends boolean | undefined = undefined,\n    >(\n      ...parameters: IsNever<IndexedInputs> extends true\n        ? [options?: Options & { strict?: TStrict }]\n        : [\n            args: Args | (Args extends TArgs ? Readonly<TArgs> : never),\n            options?: Options & { strict?: TStrict },\n          ]\n    ) => Promise<\n      CreateContractEventFilterReturnType<TAbi, TEventName, TArgs, TStrict>\n    >\n  : <TStrict extends boolean | undefined = undefined>(\n      ...parameters:\n        | [options?: Options & { strict?: TStrict }]\n        | [\n            args: readonly unknown[] | CreateContractFilterOptions,\n            options?: Options & { strict?: TStrict },\n          ]\n    ) => Promise<CreateContractEventFilterReturnType>\n\ntype GetEventsFunction<\n  Narrowable extends boolean,\n  TAbi extends Abi | readonly unknown[],\n  TEventName extends string,\n  TAbiEvent extends AbiEvent = TAbi extends Abi\n    ? ExtractAbiEvent<TAbi, TEventName>\n    : AbiEvent,\n  Args = AbiEventParametersToPrimitiveTypes<TAbiEvent['inputs']>,\n  Options = Prettify<\n    Omit<\n      GetContractEventsParameters<TAbi, TEventName>,\n      'abi' | 'address' | 'args' | 'eventName'\n    >\n  >,\n  IndexedInputs = Extract<TAbiEvent['inputs'][number], { indexed: true }>,\n> = Narrowable extends true\n  ? (\n      ...parameters: IsNever<IndexedInputs> extends true\n        ? [options?: Options]\n        : [args?: Args, options?: Options]\n    ) => Promise<GetContractEventsReturnType<TAbi, TEventName>>\n  : (\n      ...parameters:\n        | [options?: Options]\n        | [\n            args?: readonly unknown[] | WatchContractEventOptions,\n            options?: Options,\n          ]\n    ) => Promise<GetContractEventsReturnType<TAbi, TEventName>>\n\ntype GetWatchEvent<\n  Narrowable extends boolean,\n  TAbi extends Abi | readonly unknown[],\n  TEventName extends string,\n  TAbiEvent extends AbiEvent = TAbi extends Abi\n    ? ExtractAbiEvent<TAbi, TEventName>\n    : AbiEvent,\n  Args = AbiEventParametersToPrimitiveTypes<TAbiEvent['inputs']>,\n  Options = Prettify<\n    Omit<\n      WatchContractEventParameters<TAbi, TEventName>,\n      'abi' | 'address' | 'args' | 'eventName'\n    >\n  >,\n  IndexedInputs = Extract<TAbiEvent['inputs'][number], { indexed: true }>,\n> = Narrowable extends true\n  ? (\n      ...parameters: IsNever<IndexedInputs> extends true\n        ? [options: Options]\n        : [args: Args, options: Options]\n    ) => WatchContractEventReturnType\n  : (\n      ...parameters:\n        | [options?: Options]\n        | [\n            args: readonly unknown[] | WatchContractEventOptions,\n            options?: Options,\n          ]\n    ) => WatchContractEventReturnType\n\ntype CreateContractFilterOptions =\n  RemoveProperties<CreateContractEventFilterParameters>\ntype WatchContractEventOptions = RemoveProperties<WatchContractEventParameters>\n\ntype RemoveProperties<T extends object> = Prettify<\n  {\n    [key: string]: unknown\n  } & {\n    [_ in keyof T]?: never\n  }\n>\n","import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { multicall3Abi } from '../../constants/abis.js'\nimport { aggregate3Signature } from '../../constants/contract.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  ChainDoesNotSupportContract,\n  ClientChainNotConfiguredError,\n} from '../../errors/chain.js'\nimport {\n  RawContractError,\n  type RawContractErrorType,\n} from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetCallErrorReturnType,\n  getCallError,\n} from '../../utils/errors/getCallError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormatTransactionRequestErrorType,\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport {\n  type CreateBatchSchedulerErrorType,\n  createBatchScheduler,\n} from '../../utils/promise/createBatchScheduler.js'\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\nimport type {\n  AssertRequestErrorType,\n  AssertRequestParameters,\n} from '../../utils/transaction/assertRequest.js'\n\nexport type FormattedCall<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<TChain>\n\nexport type CallParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n> = UnionOmit<FormattedCall<TChain>, 'from'> & {\n  account?: Account | Address\n  batch?: boolean\n} & (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint\n        blockTag?: never\n      }\n    | {\n        blockNumber?: never\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag\n      }\n  )\n\nexport type CallReturnType = { data: Hex | undefined }\n\nexport type CallErrorType = GetCallErrorReturnType<\n  | ParseAccountErrorType\n  | AssertRequestErrorType\n  | NumberToHexErrorType\n  | FormatTransactionRequestErrorType\n  | ScheduleMulticallErrorType\n  | RequestErrorType\n>\n\n/**\n * Executes a new message call immediately without submitting a transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/call.html\n * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\n *\n * @param client - Client to use\n * @param parameters - {@link CallParameters}\n * @returns The call data. {@link CallReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { call } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const data = await call(client, {\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n */\nexport async function call<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  args: CallParameters<TChain>,\n): Promise<CallReturnType> {\n  const {\n    account: account_ = client.account,\n    batch = Boolean(client.batch?.multicall),\n    blockNumber,\n    blockTag = 'latest',\n    accessList,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args\n  const account = account_ ? parseAccount(account_) : undefined\n\n  try {\n    assertRequest(args as AssertRequestParameters)\n\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      accessList,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest) as TransactionRequest\n\n    if (batch && shouldPerformMulticall({ request })) {\n      try {\n        return await scheduleMulticall(client, {\n          ...request,\n          blockNumber,\n          blockTag,\n        } as unknown as ScheduleMulticallParameters<TChain>)\n      } catch (err) {\n        if (\n          !(err instanceof ClientChainNotConfiguredError) &&\n          !(err instanceof ChainDoesNotSupportContract)\n        )\n          throw err\n      }\n    }\n\n    const response = await client.request({\n      method: 'eth_call',\n      params: block\n        ? [request as Partial<RpcTransactionRequest>, block]\n        : [request as Partial<RpcTransactionRequest>],\n    })\n    if (response === '0x') return { data: undefined }\n    return { data: response }\n  } catch (err) {\n    const data = getRevertErrorData(err)\n    const { offchainLookup, offchainLookupSignature } = await import(\n      '../../utils/ccip.js'\n    )\n    if (data?.slice(0, 10) === offchainLookupSignature && to) {\n      return { data: await offchainLookup(client, { data, to }) }\n    }\n    throw getCallError(err as ErrorType, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n\n// We only want to perform a scheduled multicall if:\n// - The request has calldata,\n// - The request has a target address,\n// - The target address is not already the aggregate3 signature,\n// - The request has no other properties (`nonce`, `gas`, etc cannot be sent with a multicall).\nfunction shouldPerformMulticall({ request }: { request: TransactionRequest }) {\n  const { data, to, ...request_ } = request\n  if (!data) return false\n  if (data.startsWith(aggregate3Signature)) return false\n  if (!to) return false\n  if (\n    Object.values(request_).filter((x) => typeof x !== 'undefined').length > 0\n  )\n    return false\n  return true\n}\n\ntype ScheduleMulticallParameters<TChain extends Chain | undefined> = Pick<\n  CallParameters<TChain>,\n  'blockNumber' | 'blockTag'\n> & {\n  data: Hex\n  multicallAddress?: Address\n  to: Address\n}\n\nexport type ScheduleMulticallErrorType =\n  | GetChainContractAddressErrorType\n  | NumberToHexErrorType\n  | CreateBatchSchedulerErrorType\n  | EncodeFunctionDataErrorType\n  | DecodeFunctionResultErrorType\n  | RawContractErrorType\n  | ErrorType\n\nasync function scheduleMulticall<TChain extends Chain | undefined>(\n  client: Client<Transport>,\n  args: ScheduleMulticallParameters<TChain>,\n) {\n  const { batchSize = 1024, wait = 0 } =\n    typeof client.batch?.multicall === 'object' ? client.batch.multicall : {}\n  const {\n    blockNumber,\n    blockTag = 'latest',\n    data,\n    multicallAddress: multicallAddress_,\n    to,\n  } = args\n\n  let multicallAddress = multicallAddress_\n  if (!multicallAddress) {\n    if (!client.chain) throw new ClientChainNotConfiguredError()\n\n    multicallAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'multicall3',\n    })\n  }\n\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n  const block = blockNumberHex || blockTag\n\n  const { schedule } = createBatchScheduler({\n    id: `${client.uid}.${block}`,\n    wait,\n    shouldSplitBatch(args) {\n      const size = args.reduce((size, { data }) => size + (data.length - 2), 0)\n      return size > batchSize * 2\n    },\n    fn: async (\n      requests: {\n        data: Hex\n        to: Address\n      }[],\n    ) => {\n      const calls = requests.map((request) => ({\n        allowFailure: true,\n        callData: request.data,\n        target: request.to,\n      }))\n\n      const calldata = encodeFunctionData({\n        abi: multicall3Abi,\n        args: [calls],\n        functionName: 'aggregate3',\n      })\n\n      const data = await client.request({\n        method: 'eth_call',\n        params: [\n          {\n            data: calldata,\n            to: multicallAddress,\n          },\n          block,\n        ],\n      })\n\n      return decodeFunctionResult({\n        abi: multicall3Abi,\n        args: [calls],\n        functionName: 'aggregate3',\n        data: data || '0x',\n      })\n    },\n  })\n\n  const [{ returnData, success }] = await schedule({ data, to })\n\n  if (!success) throw new RawContractError({ data: returnData })\n  if (returnData === '0x') return { data: undefined }\n  return { data: returnData }\n}\n\nexport type GetRevertErrorDataErrorType = ErrorType\n\nexport function getRevertErrorData(err: unknown) {\n  if (!(err instanceof BaseError)) return undefined\n  const error = err.walk() as RawContractError\n  return typeof error.data === 'object' ? error.data.data : error.data\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreateBlockFilterReturnType = Filter<'block'>\n\nexport type CreateBlockFilterErrorType = RequestErrorType | ErrorType\n\n/**\n * Creates a [`Filter`](https://viem.sh/docs/glossary/types.html#filter) to listen for new block hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html).\n *\n * - Docs: https://viem.sh/docs/actions/public/createBlockFilter.html\n * - JSON-RPC Methods: [`eth_newBlockFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newBlockFilter)\n *\n * @param client - Client to use\n * @returns [`Filter`](https://viem.sh/docs/glossary/types.html#filter). {@link CreateBlockFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createBlockFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createBlockFilter(client)\n * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\n */\nexport async function createBlockFilter<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n): Promise<CreateBlockFilterReturnType> {\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newBlockFilter',\n  })\n  const id = await client.request({\n    method: 'eth_newBlockFilter',\n  })\n  return { id, request: getRequest(id), type: 'block' }\n}\n","import type { Abi, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  InferEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Hex } from '../../types/misc.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreateContractEventFilterParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TEventName extends string | undefined = undefined,\n  TArgs extends\n    | MaybeExtractEventArgsFromAbi<TAbi, TEventName>\n    | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  address?: Address | Address[]\n  abi: TAbi\n  eventName?: InferEventName<TAbi, TEventName>\n  fromBlock?: TFromBlock | BlockNumber | BlockTag\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments in the event ABI item.\n   * @default false\n   */\n  strict?: TStrict\n  toBlock?: TToBlock | BlockNumber | BlockTag\n} & (undefined extends TEventName\n  ? {\n      args?: never\n    }\n  : MaybeExtractEventArgsFromAbi<\n        TAbi,\n        TEventName\n      > extends infer TEventFilterArgs\n    ? {\n        args?:\n          | TEventFilterArgs\n          | (TArgs extends TEventFilterArgs ? TArgs : never)\n      }\n    : {\n        args?: never\n      })\n\nexport type CreateContractEventFilterReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TEventName extends string | undefined = undefined,\n  TArgs extends\n    | MaybeExtractEventArgsFromAbi<TAbi, TEventName>\n    | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = Filter<'event', TAbi, TEventName, TArgs, TStrict, TFromBlock, TToBlock>\n\nexport type CreateContractEventFilterErrorType =\n  | EncodeEventTopicsErrorType\n  | RequestErrorType\n  | NumberToHexErrorType\n  | ErrorType\n\n/**\n * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs.html).\n *\n * - Docs: https://viem.sh/docs/contract/createContractEventFilter.html\n *\n * @param client - Client to use\n * @param parameters - {@link CreateContractEventFilterParameters}\n * @returns [`Filter`](https://viem.sh/docs/glossary/types.html#filter). {@link CreateContractEventFilterReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n * })\n */\nexport async function createContractEventFilter<\n  TChain extends Chain | undefined,\n  const TAbi extends Abi | readonly unknown[],\n  TEventName extends string | undefined,\n  TArgs extends MaybeExtractEventArgsFromAbi<TAbi, TEventName> | undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    abi,\n    args,\n    eventName,\n    fromBlock,\n    strict,\n    toBlock,\n  }: CreateContractEventFilterParameters<\n    TAbi,\n    TEventName,\n    TArgs,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >,\n): Promise<\n  CreateContractEventFilterReturnType<\n    TAbi,\n    TEventName,\n    TArgs,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n> {\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newFilter',\n  })\n\n  const topics = eventName\n    ? encodeEventTopics({\n        abi,\n        args,\n        eventName,\n      } as unknown as EncodeEventTopicsParameters)\n    : undefined\n  const id: Hex = await client.request({\n    method: 'eth_newFilter',\n    params: [\n      {\n        address,\n        fromBlock:\n          typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n        toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        topics,\n      },\n    ],\n  })\n\n  return {\n    abi,\n    args,\n    eventName,\n    id,\n    request: getRequest(id),\n    strict,\n    type: 'event',\n  } as unknown as CreateContractEventFilterReturnType<\n    TAbi,\n    TEventName,\n    TArgs,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n","import type { AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Hex, LogTopic } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreateEventFilterParameters<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n  _Args extends\n    | MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n    | undefined = undefined,\n> = {\n  address?: Address | Address[]\n  fromBlock?: TFromBlock | BlockNumber | BlockTag\n  toBlock?: TToBlock | BlockNumber | BlockTag\n} & (MaybeExtractEventArgsFromAbi<\n  TAbiEvents,\n  _EventName\n> extends infer TEventFilterArgs\n  ?\n      | {\n          args:\n            | TEventFilterArgs\n            | (_Args extends TEventFilterArgs ? _Args : never)\n          event: TAbiEvent\n          events?: never\n          /**\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n           * @default false\n           */\n          strict?: TStrict\n        }\n      | {\n          args?: never\n          event?: TAbiEvent\n          events?: never\n          /**\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n           * @default false\n           */\n          strict?: TStrict\n        }\n      | {\n          args?: never\n          event?: never\n          events: TAbiEvents\n          /**\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n           * @default false\n           */\n          strict?: TStrict\n        }\n      | {\n          args?: never\n          event?: never\n          events?: never\n          strict?: never\n        }\n  : {\n      args?: never\n      event?: never\n      events?: never\n      strict?: never\n    })\n\nexport type CreateEventFilterReturnType<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n  _Args extends\n    | MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n    | undefined = undefined,\n> = Prettify<\n  Filter<'event', TAbiEvents, _EventName, _Args, TStrict, TFromBlock, TToBlock>\n>\n\nexport type CreateEventFilterErrorType =\n  | EncodeEventTopicsErrorType\n  | RequestErrorType\n  | NumberToHexErrorType\n  | ErrorType\n\n/**\n * Creates a [`Filter`](https://viem.sh/docs/glossary/types.html#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html).\n *\n * - Docs: https://viem.sh/docs/actions/public/createEventFilter.html\n * - JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\n *\n * @param client - Client to use\n * @param parameters - {@link CreateEventFilterParameters}\n * @returns [`Filter`](https://viem.sh/docs/glossary/types.html#filter). {@link CreateEventFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * })\n */\nexport async function createEventFilter<\n  TChain extends Chain | undefined,\n  const TAbiEvent extends AbiEvent | undefined = undefined,\n  const TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber<bigint> | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber<bigint> | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n  _Args extends\n    | MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n    | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    args,\n    event,\n    events: events_,\n    fromBlock,\n    strict,\n    toBlock,\n  }: CreateEventFilterParameters<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock,\n    _EventName,\n    _Args\n  > = {} as any,\n): Promise<\n  CreateEventFilterReturnType<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock,\n    _EventName,\n    _Args\n  >\n> {\n  const events = events_ ?? (event ? [event] : undefined)\n\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newFilter',\n  })\n\n  let topics: LogTopic[] = []\n  if (events) {\n    topics = [\n      (events as AbiEvent[]).flatMap((event) =>\n        encodeEventTopics({\n          abi: [event],\n          eventName: (event as AbiEvent).name,\n          args,\n        } as EncodeEventTopicsParameters),\n      ),\n    ]\n    if (event) topics = topics[0] as LogTopic[]\n  }\n\n  const id: Hex = await client.request({\n    method: 'eth_newFilter',\n    params: [\n      {\n        address,\n        fromBlock:\n          typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n        toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        ...(topics.length ? { topics } : {}),\n      },\n    ],\n  })\n\n  return {\n    abi: events,\n    args,\n    eventName: event ? (event as AbiEvent).name : undefined,\n    fromBlock,\n    id,\n    request: getRequest(id),\n    strict,\n    toBlock,\n    type: 'event',\n  } as unknown as CreateEventFilterReturnType<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock,\n    _EventName,\n    _Args\n  >\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreatePendingTransactionFilterReturnType = Filter<'transaction'>\n\nexport type CreatePendingTransactionFilterErrorType =\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html).\n *\n * - Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter.html\n * - JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\n *\n * @param client - Client to use\n * @returns [`Filter`](https://viem.sh/docs/glossary/types.html#filter). {@link CreateBlockFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createPendingTransactionFilter(client)\n * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'transaction' }\n */\nexport async function createPendingTransactionFilter<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n>(\n  client: Client<TTransport, TChain>,\n): Promise<CreatePendingTransactionFilterReturnType> {\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newPendingTransactionFilter',\n  })\n  const id = await client.request({\n    method: 'eth_newPendingTransactionFilter',\n  })\n  return { id, request: getRequest(id), type: 'transaction' }\n}\n","import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ContractFunctionConfig, GetValue } from '../../types/contract.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  estimateGas,\n} from './estimateGas.js'\n\nexport type EstimateContractGasParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string = string,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n> = ContractFunctionConfig<TAbi, TFunctionName, 'payable' | 'nonpayable'> &\n  UnionOmit<EstimateGasParameters<TChain, TAccount>, 'data' | 'to' | 'value'> &\n  GetValue<\n    TAbi,\n    TFunctionName,\n    EstimateGasParameters<TChain> extends EstimateGasParameters\n      ? EstimateGasParameters<TChain>['value']\n      : EstimateGasParameters['value']\n  >\n\nexport type EstimateContractGasReturnType = bigint\n\nexport type EstimateContractGasErrorType = GetContractErrorReturnType<\n  EncodeFunctionDataErrorType | EstimateGasErrorType | ParseAccountErrorType\n>\n\n/**\n * Estimates the gas required to successfully execute a contract write function call.\n *\n * - Docs: https://viem.sh/docs/contract/estimateContractGas.html\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public.html) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateContractGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateContractGas } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gas = await estimateContractGas(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint() public']),\n *   functionName: 'mint',\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n * })\n */\nexport async function estimateContractGas<\n  const TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string,\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    abi,\n    address,\n    args,\n    functionName,\n    ...request\n  }: EstimateContractGasParameters<TAbi, TFunctionName, TChain, TAccount>,\n): Promise<EstimateContractGasReturnType> {\n  const data = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as unknown as EncodeFunctionDataParameters<TAbi, TFunctionName>)\n  try {\n    const gas = await getAction(\n      client,\n      estimateGas,\n      'estimateGas',\n    )({\n      data,\n      to: address,\n      ...request,\n    } as unknown as EstimateGasParameters<TChain>)\n    return gas\n  } catch (err) {\n    const account = request.account ? parseAccount(request.account) : undefined\n    throw getContractError(err as BaseError, {\n      abi: abi as Abi,\n      address,\n      args,\n      docsPath: '/docs/contract/estimateContractGas',\n      functionName,\n      sender: account?.address,\n    })\n  }\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  BaseFeeScalarError,\n  type BaseFeeScalarErrorType,\n  Eip1559FeesNotSupportedError,\n  type Eip1559FeesNotSupportedErrorType,\n} from '../../errors/fee.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Block } from '../../types/block.js'\nimport type {\n  Chain,\n  ChainEstimateFeesPerGasFnParameters,\n  ChainFeesFnParameters,\n} from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport type {\n  FeeValuesEIP1559,\n  FeeValuesLegacy,\n  FeeValuesType,\n} from '../../types/fee.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { PrepareTransactionRequestParameters } from '../wallet/prepareTransactionRequest.js'\nimport {\n  type EstimateMaxPriorityFeePerGasErrorType,\n  internal_estimateMaxPriorityFeePerGas,\n} from './estimateMaxPriorityFeePerGas.js'\nimport { getBlock } from './getBlock.js'\nimport { type GetGasPriceErrorType, getGasPrice } from './getGasPrice.js'\n\nexport type EstimateFeesPerGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  type extends FeeValuesType = FeeValuesType,\n> = {\n  /**\n   * The type of fee values to return.\n   *\n   * - `legacy`: Returns the legacy gas price.\n   * - `eip1559`: Returns the max fee per gas and max priority fee per gas.\n   *\n   * @default 'eip1559'\n   */\n  type?: type | FeeValuesType\n} & GetChain<chain, chainOverride>\n\nexport type EstimateFeesPerGasReturnType<\n  type extends FeeValuesType = FeeValuesType,\n> =\n  | (type extends 'legacy' ? FeeValuesLegacy : never)\n  | (type extends 'eip1559' ? FeeValuesEIP1559 : never)\n\nexport type EstimateFeesPerGasErrorType =\n  | BaseFeeScalarErrorType\n  | EstimateMaxPriorityFeePerGasErrorType\n  | GetGasPriceErrorType\n  | Eip1559FeesNotSupportedErrorType\n  | ErrorType\n\n/**\n * Returns an estimate for the fees per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.estimateFeesPerGas`](/docs/clients/chains.html#fees-estimatefeespergas) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas.html\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateFeesPerGasParameters}\n * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateFeesPerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateFeesPerGas(client)\n * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n */\nexport async function estimateFeesPerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n  type extends FeeValuesType = 'eip1559',\n>(\n  client: Client<Transport, chain>,\n  args?: EstimateFeesPerGasParameters<chain, chainOverride, type>,\n): Promise<EstimateFeesPerGasReturnType<type>> {\n  return internal_estimateFeesPerGas(client, args as any)\n}\n\nexport async function internal_estimateFeesPerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n  type extends FeeValuesType = 'eip1559',\n>(\n  client: Client<Transport, chain>,\n  args: EstimateFeesPerGasParameters<chain, chainOverride, type> & {\n    block?: Block\n    request?: PrepareTransactionRequestParameters\n  },\n): Promise<EstimateFeesPerGasReturnType<type>> {\n  const {\n    block: block_,\n    chain = client.chain,\n    request,\n    type = 'eip1559',\n  } = args || {}\n\n  const baseFeeMultiplier = await (async () => {\n    if (typeof chain?.fees?.baseFeeMultiplier === 'function')\n      return chain.fees.baseFeeMultiplier({\n        block: block_ as Block,\n        client,\n        request,\n      } as ChainFeesFnParameters)\n    return chain?.fees?.baseFeeMultiplier ?? 1.2\n  })()\n  if (baseFeeMultiplier < 1) throw new BaseFeeScalarError()\n\n  const decimals = baseFeeMultiplier.toString().split('.')[1]?.length ?? 0\n  const denominator = 10 ** decimals\n  const multiply = (base: bigint) =>\n    (base * BigInt(Math.ceil(baseFeeMultiplier * denominator))) /\n    BigInt(denominator)\n\n  const block = block_\n    ? block_\n    : await getAction(client, getBlock, 'getBlock')({})\n\n  if (typeof chain?.fees?.estimateFeesPerGas === 'function')\n    return chain.fees.estimateFeesPerGas({\n      block: block_ as Block,\n      client,\n      multiply,\n      request,\n      type,\n    } as ChainEstimateFeesPerGasFnParameters) as unknown as EstimateFeesPerGasReturnType<type>\n\n  if (type === 'eip1559') {\n    if (typeof block.baseFeePerGas !== 'bigint')\n      throw new Eip1559FeesNotSupportedError()\n\n    const maxPriorityFeePerGas = request?.maxPriorityFeePerGas\n      ? request.maxPriorityFeePerGas\n      : await internal_estimateMaxPriorityFeePerGas(\n          client as Client<Transport, Chain>,\n          {\n            block,\n            chain,\n            request,\n          },\n        )\n\n    const baseFeePerGas = multiply(block.baseFeePerGas)\n    const maxFeePerGas =\n      request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    } as EstimateFeesPerGasReturnType<type>\n  }\n\n  const gasPrice =\n    request?.gasPrice ??\n    multiply(await getAction(client, getGasPrice, 'getGasPrice')({}))\n  return {\n    gasPrice,\n  } as EstimateFeesPerGasReturnType<type>\n}\n","import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetEstimateGasErrorReturnType,\n  getEstimateGasError,\n} from '../../utils/errors/getEstimateGasError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  prepareTransactionRequest,\n} from '../wallet/prepareTransactionRequest.js'\n\nexport type FormattedEstimateGas<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<TChain>\n\nexport type EstimateGasParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n> = UnionOmit<FormattedEstimateGas<TChain>, 'from'> &\n  GetAccountParameter<TAccount> &\n  (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint\n        blockTag?: never\n      }\n    | {\n        blockNumber?: never\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag\n      }\n  )\n\nexport type EstimateGasReturnType = bigint\n\nexport type EstimateGasErrorType = GetEstimateGasErrorReturnType<\n  | ParseAccountErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | AssertRequestErrorType\n>\n\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas.html\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: EstimateGasParameters<TChain, TAccount>,\n): Promise<EstimateGasReturnType> {\n  const account_ = args.account ?? client.account\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/public/estimateGas',\n    })\n  const account = parseAccount(account_)\n\n  try {\n    const {\n      accessList,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      ...rest\n    } =\n      account.type === 'local'\n        ? ((await prepareTransactionRequest(\n            client,\n            args as PrepareTransactionRequestParameters,\n          )) as EstimateGasParameters)\n        : args\n\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    assertRequest(args as AssertRequestParameters)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account.address,\n      accessList,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n\n    const balance = await client.request({\n      method: 'eth_estimateGas',\n      params: block ? [request, block] : [request],\n    })\n    return BigInt(balance)\n  } catch (err) {\n    throw getEstimateGasError(err as BaseError, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  Eip1559FeesNotSupportedError,\n  type Eip1559FeesNotSupportedErrorType,\n} from '../../errors/fee.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type { Chain, ChainFeesFnParameters } from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToBigIntErrorType,\n  hexToBigInt,\n} from '../../utils/encoding/fromHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { PrepareTransactionRequestParameters } from '../wallet/prepareTransactionRequest.js'\nimport { type GetBlockErrorType, getBlock } from './getBlock.js'\nimport { type GetGasPriceErrorType, getGasPrice } from './getGasPrice.js'\n\nexport type EstimateMaxPriorityFeePerGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n> = GetChain<chain, chainOverride>\n\nexport type EstimateMaxPriorityFeePerGasReturnType = bigint\n\nexport type EstimateMaxPriorityFeePerGasErrorType =\n  | GetBlockErrorType\n  | HexToBigIntErrorType\n  | RequestErrorType\n  | GetBlockErrorType\n  | GetGasPriceErrorType\n  | Eip1559FeesNotSupportedErrorType\n  | ErrorType\n\n/**\n * Returns an estimate for the max priority fee per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.defaultPriorityFee`](/docs/clients/chains.html#fees-defaultpriorityfee) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas.html\n *\n * @param client - Client to use\n * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateMaxPriorityFeePerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateMaxPriorityFeePerGas(client)\n * // 10000000n\n */\nexport async function estimateMaxPriorityFeePerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  args?: EstimateMaxPriorityFeePerGasParameters<chain, chainOverride>,\n): Promise<EstimateMaxPriorityFeePerGasReturnType> {\n  return internal_estimateMaxPriorityFeePerGas(client, args as any)\n}\n\nexport async function internal_estimateMaxPriorityFeePerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  args: EstimateMaxPriorityFeePerGasParameters<chain, chainOverride> & {\n    block?: Block\n    request?: PrepareTransactionRequestParameters<\n      chain,\n      Account | undefined,\n      chainOverride\n    >\n  },\n): Promise<EstimateMaxPriorityFeePerGasReturnType> {\n  const { block: block_, chain = client.chain, request } = args || {}\n  if (typeof chain?.fees?.defaultPriorityFee === 'function') {\n    const block = block_ || (await getAction(client, getBlock, 'getBlock')({}))\n    return chain.fees.defaultPriorityFee({\n      block,\n      client,\n      request,\n    } as ChainFeesFnParameters)\n  }\n\n  if (typeof chain?.fees?.defaultPriorityFee !== 'undefined')\n    return chain?.fees?.defaultPriorityFee\n\n  try {\n    const maxPriorityFeePerGasHex = await client.request({\n      method: 'eth_maxPriorityFeePerGas',\n    })\n    return hexToBigInt(maxPriorityFeePerGasHex)\n  } catch {\n    // If the RPC Provider does not support `eth_maxPriorityFeePerGas`\n    // fall back to calculating it manually via `gasPrice - baseFeePerGas`.\n    // See: https://github.com/ethereum/pm/issues/328#:~:text=eth_maxPriorityFeePerGas%20after%20London%20will%20effectively%20return%20eth_gasPrice%20%2D%20baseFee\n    const [block, gasPrice] = await Promise.all([\n      block_\n        ? Promise.resolve(block_)\n        : getAction(client, getBlock, 'getBlock')({}),\n      getAction(client, getGasPrice, 'getGasPrice')({}),\n    ])\n\n    if (typeof block.baseFeePerGas !== 'bigint')\n      throw new Eip1559FeesNotSupportedError()\n\n    const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas\n\n    if (maxPriorityFeePerGas < 0n) return 0n\n    return maxPriorityFeePerGas\n  }\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetBalanceParameters = {\n  /** The address of the account. */\n  address: Address\n} & (\n  | {\n      /** The balance of the account at a block number. */\n      blockNumber?: bigint\n      blockTag?: never\n    }\n  | {\n      blockNumber?: never\n      /** The balance of the account at a block tag. */\n      blockTag?: BlockTag\n    }\n)\n\nexport type GetBalanceReturnType = bigint\n\nexport type GetBalanceErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the balance of an address in wei.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBalance.html\n * - JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\n *\n * You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther.html).\n *\n * ```ts\n * const balance = await getBalance(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   blockTag: 'safe'\n * })\n * const balanceAsEther = formatEther(balance)\n * // \"6.942\"\n * ```\n *\n * @param client - Client to use\n * @param parameters - {@link GetBalanceParameters}\n * @returns The balance of the address in wei. {@link GetBalanceReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBalance } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const balance = await getBalance(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n * // 10000000000000000000000n (wei)\n */\nexport async function getBalance<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, blockNumber, blockTag = 'latest' }: GetBalanceParameters,\n): Promise<GetBalanceReturnType> {\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n\n  const balance = await client.request({\n    method: 'eth_getBalance',\n    params: [address, blockNumberHex || blockTag],\n  })\n  return BigInt(balance)\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  BlockNotFoundError,\n  type BlockNotFoundErrorType,\n} from '../../errors/block.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcBlock } from '../../types/rpc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedBlock,\n  formatBlock,\n} from '../../utils/formatters/block.js'\n\nexport type GetBlockParameters<\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = {\n  /** Whether or not to include transaction data in the response. */\n  includeTransactions?: TIncludeTransactions\n} & (\n  | {\n      /** Hash of the block. */\n      blockHash?: Hash\n      blockNumber?: never\n      blockTag?: never\n    }\n  | {\n      blockHash?: never\n      /** The block number. */\n      blockNumber?: bigint\n      blockTag?: never\n    }\n  | {\n      blockHash?: never\n      blockNumber?: never\n      /**\n       * The block tag.\n       * @default 'latest'\n       */\n      blockTag?: TBlockTag | BlockTag\n    }\n)\n\nexport type GetBlockReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = FormattedBlock<TChain, TIncludeTransactions, TBlockTag>\n\nexport type GetBlockErrorType =\n  | BlockNotFoundErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns information about a block at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlock.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/fetching-blocks\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockParameters}\n * @returns Information about the block. {@link GetBlockReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlock } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getBlock(client)\n */\nexport async function getBlock<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag: blockTag_,\n    includeTransactions: includeTransactions_,\n  }: GetBlockParameters<TIncludeTransactions, TBlockTag> = {},\n): Promise<GetBlockReturnType<TChain, TIncludeTransactions, TBlockTag>> {\n  const blockTag = blockTag_ ?? 'latest'\n  const includeTransactions = includeTransactions_ ?? false\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let block: RpcBlock | null = null\n  if (blockHash) {\n    block = await client.request({\n      method: 'eth_getBlockByHash',\n      params: [blockHash, includeTransactions],\n    })\n  } else {\n    block = await client.request({\n      method: 'eth_getBlockByNumber',\n      params: [blockNumberHex || blockTag, includeTransactions],\n    })\n  }\n\n  if (!block) throw new BlockNotFoundError({ blockHash, blockNumber })\n\n  const format = client.chain?.formatters?.block?.format || formatBlock\n  return format(block)\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { getCache, withCache } from '../../utils/promise/withCache.js'\n\nexport type GetBlockNumberParameters = {\n  /** Time (in ms) that cached block number will remain in memory. */\n  cacheTime?: number\n  /** @deprecated use `cacheTime` instead. */\n  maxAge?: number\n}\n\nexport type GetBlockNumberReturnType = bigint\n\nexport type GetBlockNumberErrorType = RequestErrorType | ErrorType\n\nconst cacheKey = (id: string) => `blockNumber.${id}`\n\nexport function getBlockNumberCache(id: string) {\n  return getCache(cacheKey(id))\n}\n\n/**\n * Returns the number of the most recent block seen.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockNumber.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/fetching-blocks\n * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockNumberParameters}\n * @returns The number of the block. {@link GetBlockNumberReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockNumber } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const blockNumber = await getBlockNumber(client)\n * // 69420n\n */\nexport async function getBlockNumber<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { cacheTime = client.cacheTime, maxAge }: GetBlockNumberParameters = {},\n): Promise<GetBlockNumberReturnType> {\n  const blockNumberHex = await withCache(\n    () =>\n      client.request({\n        method: 'eth_blockNumber',\n      }),\n    { cacheKey: cacheKey(client.uid), cacheTime: maxAge ?? cacheTime },\n  )\n  return BigInt(blockNumberHex)\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Quantity } from '../../types/rpc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetBlockTransactionCountParameters =\n  | {\n      /** Hash of the block. */\n      blockHash?: Hash\n      blockNumber?: never\n      blockTag?: never\n    }\n  | {\n      blockHash?: never\n      /** The block number. */\n      blockNumber?: bigint\n      blockTag?: never\n    }\n  | {\n      blockHash?: never\n      blockNumber?: never\n      /** The block tag. Defaults to 'latest'. */\n      blockTag?: BlockTag\n    }\n\nexport type GetBlockTransactionCountReturnType = number\n\nexport type GetBlockTransactionCountErrorType =\n  | NumberToHexErrorType\n  | HexToNumberErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the number of Transactions at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount.html\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockTransactionCountParameters}\n * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const count = await getBlockTransactionCount(client)\n */\nexport async function getBlockTransactionCount<\n  TChain extends Chain | undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag = 'latest',\n  }: GetBlockTransactionCountParameters = {},\n): Promise<GetBlockTransactionCountReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let count: Quantity\n  if (blockHash) {\n    count = await client.request({\n      method: 'eth_getBlockTransactionCountByHash',\n      params: [blockHash],\n    })\n  } else {\n    count = await client.request({\n      method: 'eth_getBlockTransactionCountByNumber',\n      params: [blockNumberHex || blockTag],\n    })\n  }\n\n  return hexToNumber(count)\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetBytecodeParameters = {\n  address: Address\n} & (\n  | {\n      blockNumber?: never\n      blockTag?: BlockTag\n    }\n  | {\n      blockNumber?: bigint\n      blockTag?: never\n    }\n)\n\nexport type GetBytecodeReturnType = Hex | undefined\n\nexport type GetBytecodeErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Retrieves the bytecode at an address.\n *\n * - Docs: https://viem.sh/docs/contract/getBytecode.html\n * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\n *\n * @param client - Client to use\n * @param parameters - {@link GetBytecodeParameters}\n * @returns The contract's bytecode. {@link GetBytecodeReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBytecode } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const code = await getBytecode(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n * })\n */\nexport async function getBytecode<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, blockNumber, blockTag = 'latest' }: GetBytecodeParameters,\n): Promise<GetBytecodeReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n  const hex = await client.request({\n    method: 'eth_getCode',\n    params: [address, blockNumberHex || blockTag],\n  })\n  if (hex === '0x') return undefined\n  return hex\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\n\nexport type GetChainIdReturnType = number\n\nexport type GetChainIdErrorType =\n  | HexToNumberErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the chain ID associated with the current network.\n *\n * - Docs: https://viem.sh/docs/actions/public/getChainId.html\n * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n *\n * @param client - Client to use\n * @returns The current chain ID. {@link GetChainIdReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getChainId } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const chainId = await getChainId(client)\n * // 1\n */\nexport async function getChainId<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(client: Client<Transport, TChain, TAccount>): Promise<GetChainIdReturnType> {\n  const chainIdHex = await client.request({\n    method: 'eth_chainId',\n  })\n  return hexToNumber(chainIdHex)\n}\n","import type { Abi, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetEventArgs, InferEventName } from '../../types/contract.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash } from '../../types/misc.js'\nimport {\n  type GetAbiItemErrorType,\n  type GetAbiItemParameters,\n  getAbiItem,\n} from '../../utils/abi/getAbiItem.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type GetLogsErrorType,\n  type GetLogsParameters,\n  getLogs,\n} from './getLogs.js'\n\nexport type GetContractEventsParameters<\n  TAbi extends Abi | readonly unknown[] = readonly unknown[],\n  TEventName extends string | undefined = string | undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[]\n  /** Contract ABI. */\n  abi: TAbi\n  args?: TEventName extends string ? GetEventArgs<TAbi, TEventName> : undefined\n  /** Contract event. */\n  eventName?: InferEventName<TAbi, TEventName>\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n   * @default false\n   */\n  strict?: TStrict\n} & (\n  | {\n      /** Block number or tag after which to include logs */\n      fromBlock?: TFromBlock | BlockNumber | BlockTag\n      /** Block number or tag before which to include logs */\n      toBlock?: TToBlock | BlockNumber | BlockTag\n      blockHash?: never\n    }\n  | {\n      fromBlock?: never\n      toBlock?: never\n      /** Hash of block to include logs from */\n      blockHash?: Hash\n    }\n)\n\nexport type GetContractEventsReturnType<\n  TAbi extends Abi | readonly unknown[] = readonly unknown[],\n  TEventName extends string | undefined = string | undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _Pending extends boolean =\n    | (TFromBlock extends 'pending' ? true : false)\n    | (TToBlock extends 'pending' ? true : false),\n> = Log<bigint, number, _Pending, undefined, TStrict, TAbi, TEventName>[]\n\nexport type GetContractEventsErrorType =\n  | GetAbiItemErrorType\n  | GetLogsErrorType\n  | ErrorType\n\n/**\n * Returns a list of event logs emitted by a contract.\n *\n * - Docs: https://viem.sh/docs/actions/public/getContractEvents.html\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetContractEventsParameters}\n * @returns A list of event logs. {@link GetContractEventsReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getContractEvents } from 'viem/public'\n * import { wagmiAbi } from './abi'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getContractEvents(client, {\n *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *  abi: wagmiAbi,\n *  eventName: 'Transfer'\n * })\n */\nexport async function getContractEvents<\n  TChain extends Chain | undefined,\n  const TAbi extends Abi | readonly unknown[],\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    abi,\n    address,\n    args,\n    blockHash,\n    eventName,\n    fromBlock,\n    toBlock,\n    strict,\n  }: GetContractEventsParameters<\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >,\n): Promise<\n  GetContractEventsReturnType<TAbi, TEventName, TStrict, TFromBlock, TToBlock>\n> {\n  const event = eventName\n    ? getAbiItem({ abi, name: eventName } as GetAbiItemParameters)\n    : undefined\n  const events = !event\n    ? (abi as Abi).filter((x) => x.type === 'event')\n    : undefined\n  return getAction(\n    client,\n    getLogs,\n    'getLogs',\n  )({\n    address,\n    args,\n    blockHash,\n    event,\n    events,\n    fromBlock,\n    toBlock,\n    strict,\n  } as {} as GetLogsParameters) as unknown as GetContractEventsReturnType<\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { FeeHistory } from '../../types/fee.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatFeeHistoryErrorType,\n  formatFeeHistory,\n} from '../../utils/formatters/feeHistory.js'\n\nexport type GetFeeHistoryParameters = {\n  /**\n   * Number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\n   */\n  blockCount: number\n  /**\n   * A monotonically increasing list of percentile values to sample from each block's effective priority fees per gas in ascending order, weighted by gas used.\n   */\n  rewardPercentiles: number[]\n} & (\n  | {\n      blockNumber?: never\n      /**\n       * Highest number block of the requested range.\n       * @default 'latest'\n       */\n      blockTag?: BlockTag\n    }\n  | {\n      /** Highest number block of the requested range. */\n      blockNumber?: bigint\n      blockTag?: never\n    }\n)\nexport type GetFeeHistoryReturnType = FeeHistory\n\nexport type GetFeeHistoryErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | FormatFeeHistoryErrorType\n\n/**\n * Returns a collection of historical gas information.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFeeHistory.html\n * - JSON-RPC Methods: [`eth_feeHistory`](https://docs.alchemy.com/reference/eth-feehistory)\n *\n * @param client - Client to use\n * @param parameters - {@link GetFeeHistoryParameters}\n * @returns The gas estimate (in wei). {@link GetFeeHistoryReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getFeeHistory } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const feeHistory = await getFeeHistory(client, {\n *   blockCount: 4,\n *   rewardPercentiles: [25, 75],\n * })\n */\nexport async function getFeeHistory<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockCount,\n    blockNumber,\n    blockTag = 'latest',\n    rewardPercentiles,\n  }: GetFeeHistoryParameters,\n): Promise<GetFeeHistoryReturnType> {\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n  const feeHistory = await client.request({\n    method: 'eth_feeHistory',\n    params: [\n      numberToHex(blockCount),\n      blockNumberHex || blockTag,\n      rewardPercentiles,\n    ],\n  })\n  return formatFeeHistory(feeHistory)\n}\n","import type { Abi, AbiEvent, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter, FilterType } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash } from '../../types/misc.js'\nimport {\n  type DecodeEventLogErrorType,\n  decodeEventLog,\n} from '../../utils/abi/decodeEventLog.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type FormatLogErrorType,\n  formatLog,\n} from '../../utils/formatters/log.js'\n\nexport type GetFilterChangesParameters<\n  TFilterType extends FilterType = FilterType,\n  TAbi extends Abi | readonly unknown[] | undefined = undefined,\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  filter: Filter<\n    TFilterType,\n    TAbi,\n    TEventName,\n    any,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n\nexport type GetFilterChangesReturnType<\n  TFilterType extends FilterType = FilterType,\n  TAbi extends Abi | readonly unknown[] | undefined = undefined,\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _AbiEvent extends AbiEvent | undefined = TAbi extends Abi\n    ? TEventName extends string\n      ? ExtractAbiEvent<TAbi, TEventName>\n      : undefined\n    : undefined,\n  _Pending extends boolean =\n    | (TFromBlock extends 'pending' ? true : false)\n    | (TToBlock extends 'pending' ? true : false),\n> = TFilterType extends 'event'\n  ? Log<bigint, number, _Pending, _AbiEvent, TStrict, TAbi, TEventName>[]\n  : Hash[]\n\nexport type GetFilterChangesErrorType =\n  | RequestErrorType\n  | DecodeEventLogErrorType\n  | FormatLogErrorType\n  | ErrorType\n\n/**\n * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterChanges.html\n * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\n *\n * A Filter can be created from the following actions:\n *\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter.html)\n * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter.html)\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter.html)\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter.html)\n *\n * Depending on the type of filter, the return value will be different:\n *\n * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\n * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\n * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterChangesParameters}\n * @returns Logs or hashes. {@link GetFilterChangesReturnType}\n *\n * @example\n * // Blocks\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createBlockFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createBlockFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n *\n * @example\n * // Contract Events\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n *   eventName: 'Transfer',\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Raw Events\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Transactions\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createPendingTransactionFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n */\nexport async function getFilterChanges<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n  TFilterType extends FilterType,\n  const TAbi extends Abi | readonly unknown[] | undefined,\n  TEventName extends string | undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  _client: Client<TTransport, TChain>,\n  {\n    filter,\n  }: GetFilterChangesParameters<\n    TFilterType,\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >,\n): Promise<\n  GetFilterChangesReturnType<\n    TFilterType,\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n> {\n  const strict = 'strict' in filter && filter.strict\n\n  const logs = await filter.request({\n    method: 'eth_getFilterChanges',\n    params: [filter.id],\n  })\n  return logs\n    .map((log) => {\n      if (typeof log === 'string') return log\n      try {\n        const { eventName, args } =\n          'abi' in filter && filter.abi\n            ? decodeEventLog({\n                abi: filter.abi,\n                data: log.data,\n                topics: log.topics as any,\n                strict,\n              })\n            : { eventName: undefined, args: undefined }\n        return formatLog(log, { args, eventName })\n      } catch (err) {\n        let eventName\n        let isUnnamed\n        if (\n          err instanceof DecodeLogDataMismatch ||\n          err instanceof DecodeLogTopicsMismatch\n        ) {\n          // If strict mode is on, and log data/topics do not match event definition, skip.\n          if ('strict' in filter && filter.strict) return\n          eventName = err.abiItem.name\n          isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name))\n        }\n\n        // Set args undefined if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n        return formatLog(log, { args: isUnnamed ? [] : {}, eventName })\n      }\n    })\n    .filter(Boolean) as GetFilterChangesReturnType<\n    TFilterType,\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n","import type { Abi, AbiEvent, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport {\n  type DecodeEventLogErrorType,\n  decodeEventLog,\n} from '../../utils/abi/decodeEventLog.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type FormatLogErrorType,\n  formatLog,\n} from '../../utils/formatters/log.js'\n\nexport type GetFilterLogsParameters<\n  TAbi extends Abi | readonly unknown[] | undefined = undefined,\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  filter: Filter<'event', TAbi, TEventName, any, TStrict, TFromBlock, TToBlock>\n}\nexport type GetFilterLogsReturnType<\n  TAbi extends Abi | readonly unknown[] | undefined = undefined,\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _AbiEvent extends AbiEvent | undefined = TAbi extends Abi\n    ? TEventName extends string\n      ? ExtractAbiEvent<TAbi, TEventName>\n      : undefined\n    : undefined,\n  _Pending extends boolean =\n    | (TFromBlock extends 'pending' ? true : false)\n    | (TToBlock extends 'pending' ? true : false),\n> = Log<bigint, number, _Pending, _AbiEvent, TStrict, TAbi, TEventName>[]\n\nexport type GetFilterLogsErrorType =\n  | RequestErrorType\n  | DecodeEventLogErrorType\n  | FormatLogErrorType\n  | ErrorType\n\n/**\n * Returns a list of event logs since the filter was created.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterLogs.html\n * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\n *\n * `getFilterLogs` is only compatible with **event filters**.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterLogsParameters}\n * @returns A list of event logs. {@link GetFilterLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterLogs(client, { filter })\n */\nexport async function getFilterLogs<\n  TChain extends Chain | undefined,\n  const TAbi extends Abi | readonly unknown[] | undefined,\n  TEventName extends string | undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  _client: Client<Transport, TChain>,\n  {\n    filter,\n  }: GetFilterLogsParameters<TAbi, TEventName, TStrict, TFromBlock, TToBlock>,\n): Promise<\n  GetFilterLogsReturnType<TAbi, TEventName, TStrict, TFromBlock, TToBlock>\n> {\n  const strict = filter.strict ?? false\n\n  const logs = await filter.request({\n    method: 'eth_getFilterLogs',\n    params: [filter.id],\n  })\n  return logs\n    .map((log) => {\n      try {\n        const { eventName, args } =\n          'abi' in filter && filter.abi\n            ? decodeEventLog({\n                abi: filter.abi,\n                data: log.data,\n                topics: log.topics as any,\n                strict,\n              })\n            : { eventName: undefined, args: undefined }\n        return formatLog(log, { args, eventName })\n      } catch (err) {\n        let eventName\n        let isUnnamed\n        if (\n          err instanceof DecodeLogDataMismatch ||\n          err instanceof DecodeLogTopicsMismatch\n        ) {\n          // If strict mode is on, and log data/topics do not match event definition, skip.\n          if ('strict' in filter && filter.strict) return\n          eventName = err.abiItem.name\n          isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name))\n        }\n\n        // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n        return formatLog(log, { args: isUnnamed ? [] : {}, eventName })\n      }\n    })\n    .filter(Boolean) as unknown as GetFilterLogsReturnType<\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetGasPriceReturnType = bigint\n\nexport type GetGasPriceErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the current price of gas (in wei).\n *\n * - Docs: https://viem.sh/docs/actions/public/getGasPrice.html\n * - JSON-RPC Methods: [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice)\n *\n * @param client - Client to use\n * @returns The gas price (in wei). {@link GetGasPriceReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getGasPrice } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasPrice = await getGasPrice(client)\n */\nexport async function getGasPrice<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(client: Client<Transport, TChain, TAccount>): Promise<GetGasPriceReturnType> {\n  const gasPrice = await client.request({\n    method: 'eth_gasPrice',\n  })\n  return BigInt(gasPrice)\n}\n","import type { Abi, AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash, LogTopic } from '../../types/misc.js'\nimport type { RpcLog } from '../../types/rpc.js'\nimport {\n  type DecodeEventLogErrorType,\n  decodeEventLog,\n} from '../../utils/abi/decodeEventLog.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatLogErrorType,\n  formatLog,\n} from '../../utils/formatters/log.js'\n\nexport type GetLogsParameters<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = {\n  /** Address or list of addresses from which logs originated */\n  address?: Address | Address[]\n} & (\n  | {\n      event: TAbiEvent\n      events?: never\n      args?: MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n      /**\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n       * @default false\n       */\n      strict?: TStrict\n    }\n  | {\n      event?: never\n      events: TAbiEvents\n      args?: never\n      /**\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n       * @default false\n       */\n      strict?: TStrict\n    }\n  | {\n      event?: never\n      events?: never\n      args?: never\n      strict?: never\n    }\n) &\n  (\n    | {\n        /** Block number or tag after which to include logs */\n        fromBlock?: TFromBlock | BlockNumber | BlockTag\n        /** Block number or tag before which to include logs */\n        toBlock?: TToBlock | BlockNumber | BlockTag\n        blockHash?: never\n      }\n    | {\n        fromBlock?: never\n        toBlock?: never\n        /** Hash of block to include logs from */\n        blockHash?: Hash\n      }\n  )\n\nexport type GetLogsReturnType<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n  _Pending extends boolean =\n    | (TFromBlock extends 'pending' ? true : false)\n    | (TToBlock extends 'pending' ? true : false),\n> = Log<bigint, number, _Pending, TAbiEvent, TStrict, TAbiEvents, _EventName>[]\n\nexport type GetLogsErrorType =\n  | DecodeEventLogErrorType\n  | EncodeEventTopicsErrorType\n  | FormatLogErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns a list of event logs matching the provided parameters.\n *\n * - Docs: https://viem.sh/docs/actions/public/getLogs.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/filters-and-logs/event-logs\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetLogsParameters}\n * @returns A list of event logs. {@link GetLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getLogs(client)\n */\nexport async function getLogs<\n  TChain extends Chain | undefined,\n  const TAbiEvent extends AbiEvent | undefined = undefined,\n  const TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    blockHash,\n    fromBlock,\n    toBlock,\n    event,\n    events: events_,\n    args,\n    strict: strict_,\n  }: GetLogsParameters<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  > = {},\n): Promise<\n  GetLogsReturnType<TAbiEvent, TAbiEvents, TStrict, TFromBlock, TToBlock>\n> {\n  const strict = strict_ ?? false\n  const events = events_ ?? (event ? [event] : undefined)\n\n  let topics: LogTopic[] = []\n  if (events) {\n    topics = [\n      (events as AbiEvent[]).flatMap((event) =>\n        encodeEventTopics({\n          abi: [event],\n          eventName: (event as AbiEvent).name,\n          args,\n        } as EncodeEventTopicsParameters),\n      ),\n    ]\n    if (event) topics = topics[0] as LogTopic[]\n  }\n\n  let logs: RpcLog[]\n  if (blockHash) {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [{ address, topics, blockHash }],\n    })\n  } else {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [\n        {\n          address,\n          topics,\n          fromBlock:\n            typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n          toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        },\n      ],\n    })\n  }\n\n  return logs\n    .map((log) => {\n      try {\n        const { eventName, args } = events\n          ? decodeEventLog({\n              abi: events as Abi,\n              data: log.data,\n              topics: log.topics as any,\n              strict,\n            })\n          : { eventName: undefined, args: undefined }\n        return formatLog(log, { args, eventName: eventName as string })\n      } catch (err) {\n        let eventName\n        let isUnnamed\n        if (\n          err instanceof DecodeLogDataMismatch ||\n          err instanceof DecodeLogTopicsMismatch\n        ) {\n          // If strict mode is on, and log data/topics do not match event definition, skip.\n          if (strict) return\n          eventName = err.abiItem.name\n          isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name))\n        }\n\n        // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n        return formatLog(log, { args: isUnnamed ? [] : {}, eventName })\n      }\n    })\n    .filter(Boolean) as unknown as GetLogsReturnType<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n","import type { Address } from 'abitype'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Proof } from '../../types/proof.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatProofErrorType,\n  formatProof,\n} from '../../utils/formatters/proof.js'\n\nexport type GetProofParameters = {\n  /** Account address. */\n  address: Address\n  /** Array of storage-keys that should be proofed and included. */\n  storageKeys: Hash[]\n} & (\n  | {\n      /** The block number. */\n      blockNumber?: bigint\n      blockTag?: never\n    }\n  | {\n      blockNumber?: never\n      /**\n       * The block tag.\n       * @default 'latest'\n       */\n      blockTag?: BlockTag\n    }\n)\n\nexport type GetProofReturnType = Proof\n\nexport type GetProofErrorType =\n  | NumberToHexErrorType\n  | FormatProofErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the account and storage values of the specified account including the Merkle-proof.\n *\n * - Docs: https://viem.sh/docs/actions/public/getProof.html\n * - JSON-RPC Methods:\n *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\n *\n * @param client - Client to use\n * @param parameters - {@link GetProofParameters}\n * @returns Proof data. {@link GetProofReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getProof } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getProof(client, {\n *  address: '0x...',\n *  storageKeys: ['0x...'],\n * })\n */\nexport async function getProof<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    blockNumber,\n    blockTag: blockTag_,\n    storageKeys,\n  }: GetProofParameters,\n): Promise<GetProofReturnType> {\n  const blockTag = blockTag_ ?? 'latest'\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  const proof = await client.request({\n    method: 'eth_getProof',\n    params: [address, storageKeys, blockNumberHex || blockTag],\n  })\n\n  return formatProof(proof)\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetStorageAtParameters = {\n  address: Address\n  slot: Hex\n} & (\n  | {\n      blockNumber?: never\n      blockTag?: BlockTag\n    }\n  | {\n      blockNumber?: bigint\n      blockTag?: never\n    }\n)\n\nexport type GetStorageAtReturnType = Hex | undefined\n\nexport type GetStorageAtErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the value from a storage slot at a given address.\n *\n * - Docs: https://viem.sh/docs/contract/getStorageAt.html\n * - JSON-RPC Methods: [`eth_getStorageAt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat)\n *\n * @param client - Client to use\n * @param parameters - {@link GetStorageAtParameters}\n * @returns The value of the storage slot. {@link GetStorageAtReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getStorageAt } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const code = await getStorageAt(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   slot: toHex(0),\n * })\n */\nexport async function getStorageAt<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, blockNumber, blockTag = 'latest', slot }: GetStorageAtParameters,\n): Promise<GetStorageAtReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n  const data = await client.request({\n    method: 'eth_getStorageAt',\n    params: [address, slot, blockNumberHex || blockTag],\n  })\n  return data\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { TransactionNotFoundError } from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcTransaction } from '../../types/rpc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedTransaction,\n  formatTransaction,\n} from '../../utils/formatters/transaction.js'\n\nexport type GetTransactionParameters<TBlockTag extends BlockTag = 'latest'> =\n  | {\n      /** The block hash */\n      blockHash: Hash\n      blockNumber?: never\n      blockTag?: never\n      hash?: never\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: never\n      /** The block number */\n      blockNumber: bigint\n      blockTag?: never\n      hash?: never\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: never\n      blockNumber?: never\n      /** The block tag. */\n      blockTag: TBlockTag | BlockTag\n      hash?: never\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: never\n      blockNumber?: never\n      blockTag?: never\n      /** The hash of the transaction. */\n      hash: Hash\n      index?: number\n    }\n\nexport type GetTransactionReturnType<\n  TChain extends Chain | undefined = Chain,\n  TBlockTag extends BlockTag = 'latest',\n> = FormattedTransaction<TChain, TBlockTag>\n\nexport type GetTransactionErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) given a hash or block identifier.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransaction.html\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionParameters}\n * @returns The transaction information. {@link GetTransactionReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransaction } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transaction = await getTransaction(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransaction<\n  TChain extends Chain | undefined,\n  TBlockTag extends BlockTag = 'latest',\n>(\n  client: Client<Transport, TChain>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag: blockTag_,\n    hash,\n    index,\n  }: GetTransactionParameters<TBlockTag>,\n): Promise<GetTransactionReturnType<TChain, TBlockTag>> {\n  const blockTag = blockTag_ || 'latest'\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let transaction: RpcTransaction | null = null\n  if (hash) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByHash',\n      params: [hash],\n    })\n  } else if (blockHash) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByBlockHashAndIndex',\n      params: [blockHash, numberToHex(index)],\n    })\n  } else if (blockNumberHex || blockTag) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByBlockNumberAndIndex',\n      params: [blockNumberHex || blockTag, numberToHex(index)],\n    })\n  }\n\n  if (!transaction)\n    throw new TransactionNotFoundError({\n      blockHash,\n      blockNumber,\n      blockTag,\n      hash,\n      index,\n    })\n\n  const format =\n    client.chain?.formatters?.transaction?.format || formatTransaction\n  return format(transaction)\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { FormattedTransactionReceipt } from '../../utils/formatters/transactionReceipt.js'\nimport { getAction } from '../../utils/getAction.js'\n\nimport {\n  type GetBlockNumberErrorType,\n  getBlockNumber,\n} from './getBlockNumber.js'\nimport {\n  type GetTransactionErrorType,\n  getTransaction,\n} from './getTransaction.js'\n\nexport type GetTransactionConfirmationsParameters<\n  TChain extends Chain | undefined = Chain,\n> =\n  | {\n      /** The transaction hash. */\n      hash: Hash\n      transactionReceipt?: never\n    }\n  | {\n      hash?: never\n      /** The transaction receipt. */\n      transactionReceipt: FormattedTransactionReceipt<TChain>\n    }\n\nexport type GetTransactionConfirmationsReturnType = bigint\n\nexport type GetTransactionConfirmationsErrorType =\n  | GetBlockNumberErrorType\n  | GetTransactionErrorType\n  | ErrorType\n\n/**\n * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations.html\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionConfirmationsParameters}\n * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionConfirmations } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const confirmations = await getTransactionConfirmations(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionConfirmations<\n  TChain extends Chain | undefined,\n>(\n  client: Client<Transport, TChain>,\n  { hash, transactionReceipt }: GetTransactionConfirmationsParameters<TChain>,\n): Promise<GetTransactionConfirmationsReturnType> {\n  const [blockNumber, transaction] = await Promise.all([\n    getAction(client, getBlockNumber, 'getBlockNumber')({}),\n    hash\n      ? getAction(client, getTransaction, 'getBlockNumber')({ hash })\n      : undefined,\n  ])\n  const transactionBlockNumber =\n    transactionReceipt?.blockNumber || transaction?.blockNumber\n  if (!transactionBlockNumber) return 0n\n  return blockNumber - transactionBlockNumber! + 1n\n}\n","import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetTransactionCountParameters = {\n  /** The account address. */\n  address: Address\n} & (\n  | {\n      /** The block number. */\n      blockNumber?: bigint\n      blockTag?: never\n    }\n  | {\n      blockNumber?: never\n      /** The block tag. Defaults to 'latest'. */\n      blockTag?: BlockTag\n    }\n)\nexport type GetTransactionCountReturnType = number\n\nexport type GetTransactionCountErrorType =\n  | RequestErrorType\n  | NumberToHexErrorType\n  | HexToNumberErrorType\n  | ErrorType\n\n/**\n * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms.html#transaction) an Account has broadcast / sent.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionCount.html\n * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionCountParameters}\n * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionCount = await getTransactionCount(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function getTransactionCount<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  { address, blockTag = 'latest', blockNumber }: GetTransactionCountParameters,\n): Promise<GetTransactionCountReturnType> {\n  const count = await client.request({\n    method: 'eth_getTransactionCount',\n    params: [address, blockNumber ? numberToHex(blockNumber) : blockTag],\n  })\n  return hexToNumber(count)\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  TransactionReceiptNotFoundError,\n  type TransactionReceiptNotFoundErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type FormattedTransactionReceipt,\n  formatTransactionReceipt,\n} from '../../utils/formatters/transactionReceipt.js'\n\nexport type GetTransactionReceiptParameters = {\n  /** The hash of the transaction. */\n  hash: Hash\n}\n\nexport type GetTransactionReceiptReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionReceipt<TChain>\n\nexport type GetTransactionReceiptErrorType =\n  | RequestErrorType\n  | TransactionReceiptNotFoundErrorType\n  | ErrorType\n\n/**\n * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms.html#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt.html\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionReceiptParameters}\n * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionReceipt } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await getTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionReceipt<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { hash }: GetTransactionReceiptParameters,\n) {\n  const receipt = await client.request({\n    method: 'eth_getTransactionReceipt',\n    params: [hash],\n  })\n\n  if (!receipt) throw new TransactionReceiptNotFoundError({ hash })\n\n  const format =\n    client.chain?.formatters?.transactionReceipt?.format ||\n    formatTransactionReceipt\n  return format(receipt) as GetTransactionReceiptReturnType<TChain>\n}\n","import type { Address, Narrow } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { multicall3Abi } from '../../constants/abis.js'\nimport { AbiDecodingZeroDataError } from '../../errors/abi.js'\nimport { BaseError } from '../../errors/base.js'\nimport { RawContractError } from '../../errors/contract.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ContractFunctionConfig } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type {\n  MulticallContracts,\n  MulticallResults,\n} from '../../types/multicall.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { CallParameters } from './call.js'\nimport { type ReadContractErrorType, readContract } from './readContract.js'\n\nexport type MulticallParameters<\n  TContracts extends ContractFunctionConfig[] = ContractFunctionConfig[],\n  TAllowFailure extends boolean = true,\n> = Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n  allowFailure?: TAllowFailure\n  /** The maximum size (in bytes) for each calldata chunk. Set to `0` to disable the size limit. @default 1_024 */\n  batchSize?: number\n  contracts: Narrow<readonly [...MulticallContracts<TContracts>]>\n  multicallAddress?: Address\n}\n\nexport type MulticallReturnType<\n  TContracts extends ContractFunctionConfig[] = ContractFunctionConfig[],\n  TAllowFailure extends boolean = true,\n> = MulticallResults<TContracts, TAllowFailure>\n\nexport type MulticallErrorType =\n  | GetChainContractAddressErrorType\n  | ReadContractErrorType\n  | GetContractErrorReturnType<\n      EncodeFunctionDataErrorType | DecodeFunctionResultErrorType\n    >\n  | ErrorType\n\n/**\n * Similar to [`readContract`](https://viem.sh/docs/contract/readContract.html), but batches up multiple functions on a contract in a single RPC call via the [`multicall3` contract](https://github.com/mds1/multicall).\n *\n * - Docs: https://viem.sh/docs/contract/multicall.html\n *\n * @param client - Client to use\n * @param parameters - {@link MulticallParameters}\n * @returns An array of results with accompanying status. {@link MulticallReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { multicall } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const abi = parseAbi([\n *   'function balanceOf(address) view returns (uint256)',\n *   'function totalSupply() view returns (uint256)',\n * ])\n * const results = await multicall(client, {\n *   contracts: [\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'balanceOf',\n *       args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n *     },\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'totalSupply',\n *     },\n *   ],\n * })\n * // [{ result: 424122n, status: 'success' }, { result: 1000000n, status: 'success' }]\n */\nexport async function multicall<\n  TContracts extends ContractFunctionConfig[],\n  TChain extends Chain | undefined,\n  TAllowFailure extends boolean = true,\n>(\n  client: Client<Transport, TChain>,\n  args: MulticallParameters<TContracts, TAllowFailure>,\n): Promise<MulticallReturnType<TContracts, TAllowFailure>> {\n  const {\n    allowFailure = true,\n    batchSize: batchSize_,\n    blockNumber,\n    blockTag,\n    contracts,\n    multicallAddress: multicallAddress_,\n  } = args\n\n  const batchSize =\n    batchSize_ ??\n    ((typeof client.batch?.multicall === 'object' &&\n      client.batch.multicall.batchSize) ||\n      1_024)\n\n  let multicallAddress = multicallAddress_\n  if (!multicallAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. multicallAddress is required.',\n      )\n\n    multicallAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'multicall3',\n    })\n  }\n\n  type Aggregate3Calls = {\n    allowFailure: boolean\n    callData: Hex\n    target: Address\n  }[]\n\n  const chunkedCalls: Aggregate3Calls[] = [[]]\n  let currentChunk = 0\n  let currentChunkSize = 0\n  for (let i = 0; i < contracts.length; i++) {\n    const { abi, address, args, functionName } = contracts[\n      i\n    ] as ContractFunctionConfig\n    try {\n      const callData = encodeFunctionData({\n        abi,\n        args,\n        functionName,\n      } as unknown as EncodeFunctionDataParameters)\n\n      currentChunkSize += (callData.length - 2) / 2\n      // Check to see if we need to create a new chunk.\n      if (\n        // Check if batching is enabled.\n        batchSize > 0 &&\n        // Check if the current size of the batch exceeds the size limit.\n        currentChunkSize > batchSize &&\n        // Check if the current chunk is not already empty.\n        chunkedCalls[currentChunk].length > 0\n      ) {\n        currentChunk++\n        currentChunkSize = (callData.length - 2) / 2\n        chunkedCalls[currentChunk] = []\n      }\n\n      chunkedCalls[currentChunk] = [\n        ...chunkedCalls[currentChunk],\n        {\n          allowFailure: true,\n          callData,\n          target: address,\n        },\n      ]\n    } catch (err) {\n      const error = getContractError(err as BaseError, {\n        abi,\n        address,\n        args,\n        docsPath: '/docs/contract/multicall',\n        functionName,\n      })\n      if (!allowFailure) throw error\n      chunkedCalls[currentChunk] = [\n        ...chunkedCalls[currentChunk],\n        {\n          allowFailure: true,\n          callData: '0x' as Hex,\n          target: address,\n        },\n      ]\n    }\n  }\n\n  const aggregate3Results = await Promise.allSettled(\n    chunkedCalls.map((calls) =>\n      getAction(\n        client,\n        readContract,\n        'readContract',\n      )({\n        abi: multicall3Abi,\n        address: multicallAddress!,\n        args: [calls],\n        blockNumber,\n        blockTag,\n        functionName: 'aggregate3',\n      }),\n    ),\n  )\n\n  const results = []\n  for (let i = 0; i < aggregate3Results.length; i++) {\n    const result = aggregate3Results[i]\n\n    // If an error occurred in a `readContract` invocation (ie. network error),\n    // then append the failure reason to each contract result.\n    if (result.status === 'rejected') {\n      if (!allowFailure) throw result.reason\n      for (let j = 0; j < chunkedCalls[i].length; j++) {\n        results.push({\n          status: 'failure',\n          error: result.reason,\n          result: undefined,\n        })\n      }\n      continue\n    }\n\n    // If the `readContract` call was successful, then decode the results.\n    const aggregate3Result = result.value\n    for (let j = 0; j < aggregate3Result.length; j++) {\n      // Extract the response from `readContract`\n      const { returnData, success } = aggregate3Result[j]\n\n      // Extract the request call data from the original call.\n      const { callData } = chunkedCalls[i][j]\n\n      // Extract the contract config for this call from the `contracts` argument\n      // for decoding.\n      const { abi, address, functionName, args } = contracts[\n        results.length\n      ] as ContractFunctionConfig\n\n      try {\n        if (callData === '0x') throw new AbiDecodingZeroDataError()\n        if (!success) throw new RawContractError({ data: returnData })\n        const result = decodeFunctionResult({\n          abi,\n          args,\n          data: returnData,\n          functionName,\n        })\n        results.push(allowFailure ? { result, status: 'success' } : result)\n      } catch (err) {\n        const error = getContractError(err as BaseError, {\n          abi,\n          address,\n          args,\n          docsPath: '/docs/contract/multicall',\n          functionName,\n        })\n        if (!allowFailure) throw error\n        results.push({ error, result: undefined, status: 'failure' })\n      }\n    }\n  }\n\n  if (results.length !== contracts.length)\n    throw new BaseError('multicall results mismatch')\n  return results as MulticallResults<TContracts, TAllowFailure>\n}\n","import type { Abi } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractFunctionConfig,\n  ContractFunctionResult,\n} from '../../types/contract.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  type DecodeFunctionResultParameters,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport { getAction } from '../../utils/getAction.js'\n\nimport { type CallErrorType, type CallParameters, call } from './call.js'\n\nexport type ReadContractParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string = string,\n> = Pick<CallParameters, 'account' | 'blockNumber' | 'blockTag'> &\n  ContractFunctionConfig<TAbi, TFunctionName, 'view' | 'pure'>\n\nexport type ReadContractReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string = string,\n> = ContractFunctionResult<TAbi, TFunctionName>\n\nexport type ReadContractErrorType = GetContractErrorReturnType<\n  CallErrorType | EncodeFunctionDataErrorType | DecodeFunctionResultErrorType\n>\n\n/**\n * Calls a read-only function on a contract, and returns the response.\n *\n * - Docs: https://viem.sh/docs/contract/readContract.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/reading-contracts\n *\n * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public.html) to call the [`call` action](https://viem.sh/docs/actions/public/call.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n *\n * @param client - Client to use\n * @param parameters - {@link ReadContractParameters}\n * @returns The response from the contract. Type is inferred. {@link ReadContractReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { readContract } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const result = await readContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\n *   functionName: 'balanceOf',\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n * })\n * // 424122n\n */\nexport async function readContract<\n  TChain extends Chain | undefined,\n  const TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string,\n>(\n  client: Client<Transport, TChain>,\n  {\n    abi,\n    address,\n    args,\n    functionName,\n    ...callRequest\n  }: ReadContractParameters<TAbi, TFunctionName>,\n): Promise<ReadContractReturnType<TAbi, TFunctionName>> {\n  const calldata = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as unknown as EncodeFunctionDataParameters<TAbi, TFunctionName>)\n  try {\n    const { data } = await getAction(\n      client,\n      call,\n      'call',\n    )({\n      data: calldata,\n      to: address,\n      ...callRequest,\n    } as unknown as CallParameters)\n    return decodeFunctionResult({\n      abi,\n      args,\n      functionName,\n      data: data || '0x',\n    } as DecodeFunctionResultParameters<\n      TAbi,\n      TFunctionName\n    >) as ReadContractReturnType<TAbi, TFunctionName>\n  } catch (err) {\n    throw getContractError(err as BaseError, {\n      abi: abi as Abi,\n      address,\n      args,\n      docsPath: '/docs/contract/readContract',\n      functionName,\n    })\n  }\n}\n","import type { Abi } from 'abitype'\n\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractFunctionConfig,\n  ContractFunctionResult,\n  GetValue,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  type DecodeFunctionResultParameters,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport type { WriteContractParameters } from '../wallet/writeContract.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type CallErrorType, type CallParameters, call } from './call.js'\n\nexport type SimulateContractParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string = any,\n  TChain extends Chain | undefined = Chain | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = {\n  chain?: TChainOverride\n  /** Data to append to the end of the calldata. Useful for adding a [\"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f). */\n  dataSuffix?: Hex\n} & ContractFunctionConfig<TAbi, TFunctionName, 'payable' | 'nonpayable'> &\n  UnionOmit<\n    CallParameters<TChainOverride extends Chain ? TChainOverride : TChain>,\n    'batch' | 'to' | 'data' | 'value'\n  > &\n  GetValue<\n    TAbi,\n    TFunctionName,\n    CallParameters<TChain> extends CallParameters\n      ? CallParameters<TChain>['value']\n      : CallParameters['value']\n  >\n\nexport type SimulateContractReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string = string,\n  TChain extends Chain | undefined = Chain | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = {\n  result: ContractFunctionResult<TAbi, TFunctionName>\n  request: UnionOmit<\n    WriteContractParameters<\n      TAbi,\n      TFunctionName,\n      TChain,\n      undefined,\n      TChainOverride\n    >,\n    'chain' | 'functionName'\n  > & {\n    chain: TChainOverride\n    functionName: TFunctionName\n  } & ContractFunctionConfig<TAbi, TFunctionName, 'payable' | 'nonpayable'>\n}\n\nexport type SimulateContractErrorType =\n  | ParseAccountErrorType\n  | EncodeFunctionDataErrorType\n  | GetContractErrorReturnType<CallErrorType | DecodeFunctionResultErrorType>\n  | ErrorType\n\n/**\n * Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\n *\n * - Docs: https://viem.sh/docs/contract/simulateContract.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/writing-to-contracts\n *\n * This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract.html), but also supports contract write functions.\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public.html) to call the [`call` action](https://viem.sh/docs/actions/public/call.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n *\n * @param client - Client to use\n * @param parameters - {@link SimulateContractParameters}\n * @returns The simulation result and write request. {@link SimulateContractReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateContract } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const result = await simulateContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32) view returns (uint32)']),\n *   functionName: 'mint',\n *   args: ['69420'],\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function simulateContract<\n  TChain extends Chain | undefined,\n  const TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string,\n  TChainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    abi,\n    address,\n    args,\n    dataSuffix,\n    functionName,\n    ...callRequest\n  }: SimulateContractParameters<TAbi, TFunctionName, TChain, TChainOverride>,\n): Promise<\n  SimulateContractReturnType<TAbi, TFunctionName, TChain, TChainOverride>\n> {\n  const account = callRequest.account\n    ? parseAccount(callRequest.account)\n    : undefined\n  const calldata = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as unknown as EncodeFunctionDataParameters<TAbi, TFunctionName>)\n  try {\n    const { data } = await getAction(\n      client,\n      call,\n      'call',\n    )({\n      batch: false,\n      data: `${calldata}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n      to: address,\n      ...callRequest,\n    } as unknown as CallParameters<TChain>)\n    const result = decodeFunctionResult({\n      abi,\n      args,\n      functionName,\n      data: data || '0x',\n    } as DecodeFunctionResultParameters)\n    return {\n      result,\n      request: {\n        abi,\n        address,\n        args,\n        dataSuffix,\n        functionName,\n        ...callRequest,\n      },\n    } as unknown as SimulateContractReturnType<\n      TAbi,\n      TFunctionName,\n      TChain,\n      TChainOverride\n    >\n  } catch (err) {\n    throw getContractError(err as BaseError, {\n      abi: abi as Abi,\n      address,\n      args,\n      docsPath: '/docs/contract/simulateContract',\n      functionName,\n      sender: account?.address,\n    })\n  }\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type UninstallFilterParameters = {\n  filter: Filter<any>\n}\nexport type UninstallFilterReturnType = boolean\n\nexport type UninstallFilterErrorType = RequestErrorType | ErrorType\n\n/**\n * Destroys a [`Filter`](https://viem.sh/docs/glossary/types.html#filter).\n *\n * - Docs: https://viem.sh/docs/actions/public/uninstallFilter.html\n * - JSON-RPC Methods: [`eth_uninstallFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_uninstallFilter)\n *\n * Destroys a Filter that was created from one of the following Actions:\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter.html)\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter.html)\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter.html)\n *\n * @param client - Client to use\n * @param parameters - {@link UninstallFilterParameters}\n * @returns A boolean indicating if the Filter was successfully uninstalled. {@link UninstallFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter, uninstallFilter } from 'viem/public'\n *\n * const filter = await createPendingTransactionFilter(client)\n * const uninstalled = await uninstallFilter(client, { filter })\n * // true\n */\nexport async function uninstallFilter<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n>(\n  _client: Client<TTransport, TChain>,\n  { filter }: UninstallFilterParameters,\n): Promise<UninstallFilterReturnType> {\n  return filter.request({\n    method: 'eth_uninstallFilter',\n    params: [filter.id],\n  })\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { universalSignatureValidatorAbi } from '../../constants/abis.js'\nimport { universalSignatureValidatorByteCode } from '../../constants/contracts.js'\nimport { CallExecutionError } from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { EncodeDeployDataErrorType } from '../../utils/abi/encodeDeployData.js'\nimport {\n  type IsBytesEqualErrorType,\n  isBytesEqual,\n} from '../../utils/data/isBytesEqual.js'\nimport type { IsHexErrorType } from '../../utils/data/isHex.js'\nimport type { ToHexErrorType } from '../../utils/encoding/toHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { encodeDeployData, isHex, toHex } from '../../utils/index.js'\nimport { type CallErrorType, type CallParameters, call } from './call.js'\n\nexport type VerifyHashParameters = Pick<\n  CallParameters,\n  'blockNumber' | 'blockTag'\n> & {\n  /** The address that signed the original message. */\n  address: Address\n  /** The hash to be verified. */\n  hash: Hex\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray\n}\n\nexport type VerifyHashReturnType = boolean\n\nexport type VerifyHashErrorType =\n  | CallErrorType\n  | IsHexErrorType\n  | ToHexErrorType\n  | IsBytesEqualErrorType\n  | EncodeDeployDataErrorType\n  | ErrorType\n\n/**\n * Verifies a message hash on chain using ERC-6492.\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, hash, signature, ...callRequest }: VerifyHashParameters,\n): Promise<VerifyHashReturnType> {\n  const signatureHex = isHex(signature) ? signature : toHex(signature)\n\n  try {\n    const { data } = await getAction(\n      client,\n      call,\n      'call',\n    )({\n      data: encodeDeployData({\n        abi: universalSignatureValidatorAbi,\n        args: [address, hash, signatureHex],\n        bytecode: universalSignatureValidatorByteCode,\n      }),\n      ...callRequest,\n    } as unknown as CallParameters)\n\n    return isBytesEqual(data ?? '0x0', '0x1')\n  } catch (error) {\n    if (error instanceof CallExecutionError) {\n      // if the execution fails, the signature was not valid and an internal method inside of the validator reverted\n      // this can happen for many reasons, for example if signer can not be recovered from the signature\n      // or if the signature has no valid format\n      return false\n    }\n\n    throw error\n  }\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { hashMessage } from '../../utils/index.js'\nimport type { HashMessageErrorType } from '../../utils/signature/hashMessage.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from './verifyHash.js'\n\nexport type VerifyMessageParameters = Omit<VerifyHashParameters, 'hash'> & {\n  /** The address that signed the original message. */\n  address: Address\n  /** The message to be verified. */\n  message: SignableMessage\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray\n}\n\nexport type VerifyMessageReturnType = boolean\n\nexport type VerifyMessageErrorType =\n  | HashMessageErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage.html}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, message, signature, ...callRequest }: VerifyMessageParameters,\n): Promise<VerifyMessageReturnType> {\n  const hash = hashMessage(message)\n  return verifyHash(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n","import type { Address, TypedData } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type HashTypedDataErrorType,\n  hashTypedData,\n} from '../../utils/signature/hashTypedData.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from './verifyHash.js'\n\nexport type VerifyTypedDataParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n> = Omit<VerifyHashParameters, 'hash'> &\n  TypedDataDefinition<TTypedData, TPrimaryType> & {\n    /** The address to verify the typed data for. */\n    address: Address\n    /** The signature to verify */\n    signature: Hex | ByteArray\n  }\n\nexport type VerifyTypedDataReturnType = boolean\n\nexport type VerifyTypedDataErrorType =\n  | HashTypedDataErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verify that typed data was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData.html}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    signature,\n    message,\n    primaryType,\n    types,\n    domain,\n    ...callRequest\n  }: VerifyTypedDataParameters,\n): Promise<VerifyTypedDataReturnType> {\n  const hash = hashTypedData({ message, primaryType, types, domain })\n  return verifyHash(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { BlockNotFoundError } from '../../errors/block.js'\nimport {\n  TransactionNotFoundError,\n  TransactionReceiptNotFoundError,\n  WaitForTransactionReceiptTimeoutError,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Transaction } from '../../types/transaction.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { withRetry } from '../../utils/promise/withRetry.js'\nimport { stringify } from '../../utils/stringify.js'\n\nimport { type GetBlockErrorType, getBlock } from './getBlock.js'\nimport {\n  type GetTransactionErrorType,\n  type GetTransactionReturnType,\n  getTransaction,\n} from './getTransaction.js'\nimport {\n  type GetTransactionReceiptErrorType,\n  type GetTransactionReceiptReturnType,\n  getTransactionReceipt,\n} from './getTransactionReceipt.js'\nimport {\n  type WatchBlockNumberErrorType,\n  watchBlockNumber,\n} from './watchBlockNumber.js'\n\nexport type ReplacementReason = 'cancelled' | 'replaced' | 'repriced'\nexport type ReplacementReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n> = {\n  reason: ReplacementReason\n  replacedTransaction: Transaction\n  transaction: Transaction\n  transactionReceipt: GetTransactionReceiptReturnType<TChain>\n}\n\nexport type WaitForTransactionReceiptReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n> = GetTransactionReceiptReturnType<TChain>\n\nexport type WaitForTransactionReceiptParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n> = {\n  /**\n   * The number of confirmations (blocks that have passed) to wait before resolving.\n   * @default 1\n   */\n  confirmations?: number\n  /** The hash of the transaction. */\n  hash: Hash\n  /** Optional callback to emit if the transaction has been replaced. */\n  onReplaced?: (response: ReplacementReturnType<TChain>) => void\n  /**\n   * Polling frequency (in ms). Defaults to the client's pollingInterval config.\n   * @default client.pollingInterval\n   */\n  pollingInterval?: number\n  /** Optional timeout (in milliseconds) to wait before stopping polling. */\n  timeout?: number\n}\n\nexport type WaitForTransactionReceiptErrorType =\n  | ObserveErrorType\n  | GetBlockErrorType\n  | GetTransactionErrorType\n  | GetTransactionReceiptErrorType\n  | WatchBlockNumberErrorType\n  | ErrorType\n\n/**\n * Waits for the [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) to be included on a [Block](https://viem.sh/docs/glossary/terms.html#block) (one confirmation), and then returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms.html#transaction-receipt). If the Transaction reverts, then the action will throw an error.\n *\n * - Docs: https://viem.sh/docs/actions/public/waitForTransactionReceipt.html\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n * - JSON-RPC Methods:\n *   - Polls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt) on each block until it has been processed.\n *   - If a Transaction has been replaced:\n *     - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) and extracts the transactions\n *     - Checks if one of the Transactions is a replacement\n *     - If so, calls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt).\n *\n * The `waitForTransactionReceipt` action additionally supports Replacement detection (e.g. sped up Transactions).\n *\n * Transactions can be replaced when a user modifies their transaction in their wallet (to speed up or cancel). Transactions are replaced when they are sent from the same nonce.\n *\n * There are 3 types of Transaction Replacement reasons:\n *\n * - `repriced`: The gas price has been modified (e.g. different `maxFeePerGas`)\n * - `cancelled`: The Transaction has been cancelled (e.g. `value === 0n`)\n * - `replaced`: The Transaction has been replaced (e.g. different `value` or `data`)\n *\n * @param client - Client to use\n * @param parameters - {@link WaitForTransactionReceiptParameters}\n * @returns The transaction receipt. {@link WaitForTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, waitForTransactionReceipt, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await waitForTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function waitForTransactionReceipt<\n  TChain extends Chain | undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    confirmations = 1,\n    hash,\n    onReplaced,\n    pollingInterval = client.pollingInterval,\n    timeout,\n  }: WaitForTransactionReceiptParameters<TChain>,\n): Promise<WaitForTransactionReceiptReturnType<TChain>> {\n  const observerId = stringify(['waitForTransactionReceipt', client.uid, hash])\n\n  let transaction: GetTransactionReturnType<TChain> | undefined\n  let replacedTransaction: GetTransactionReturnType<TChain> | undefined\n  let receipt: GetTransactionReceiptReturnType<TChain>\n  let retrying = false\n\n  return new Promise((resolve, reject) => {\n    if (timeout)\n      setTimeout(\n        () => reject(new WaitForTransactionReceiptTimeoutError({ hash })),\n        timeout,\n      )\n\n    const _unobserve = observe(\n      observerId,\n      { onReplaced, resolve, reject },\n      (emit) => {\n        const _unwatch = getAction(\n          client,\n          watchBlockNumber,\n          'watchBlockNumber',\n        )({\n          emitMissed: true,\n          emitOnBegin: true,\n          poll: true,\n          pollingInterval,\n          async onBlockNumber(blockNumber_) {\n            if (retrying) return\n\n            let blockNumber = blockNumber_\n\n            const done = (fn: () => void) => {\n              _unwatch()\n              fn()\n              _unobserve()\n            }\n\n            try {\n              // If we already have a valid receipt, let's check if we have enough\n              // confirmations. If we do, then we can resolve.\n              if (receipt) {\n                if (\n                  confirmations > 1 &&\n                  (!receipt.blockNumber ||\n                    blockNumber - receipt.blockNumber + 1n < confirmations)\n                )\n                  return\n\n                done(() => emit.resolve(receipt))\n                return\n              }\n\n              // Get the transaction to check if it's been replaced.\n              // We need to retry as some RPC Providers may be slow to sync\n              // up mined transactions.\n              if (!transaction) {\n                retrying = true\n                await withRetry(\n                  async () => {\n                    transaction = (await getAction(\n                      client,\n                      getTransaction,\n                      'getTransaction',\n                    )({ hash })) as GetTransactionReturnType<TChain>\n                    if (transaction.blockNumber)\n                      blockNumber = transaction.blockNumber\n                  },\n                  {\n                    // exponential backoff\n                    delay: ({ count }) => ~~(1 << count) * 200,\n                    retryCount: 6,\n                  },\n                )\n                retrying = false\n              }\n\n              // Get the receipt to check if it's been processed.\n              receipt = await getAction(\n                client,\n                getTransactionReceipt,\n                'getTransactionReceipt',\n              )({ hash })\n\n              // Check if we have enough confirmations. If not, continue polling.\n              if (\n                confirmations > 1 &&\n                (!receipt.blockNumber ||\n                  blockNumber - receipt.blockNumber + 1n < confirmations)\n              )\n                return\n\n              done(() => emit.resolve(receipt))\n            } catch (err) {\n              // If the receipt is not found, the transaction will be pending.\n              // We need to check if it has potentially been replaced.\n              if (\n                transaction &&\n                (err instanceof TransactionNotFoundError ||\n                  err instanceof TransactionReceiptNotFoundError)\n              ) {\n                try {\n                  replacedTransaction = transaction\n\n                  // Let's retrieve the transactions from the current block.\n                  // We need to retry as some RPC Providers may be slow to sync\n                  // up mined blocks.\n                  retrying = true\n                  const block = await withRetry(\n                    () =>\n                      getAction(\n                        client,\n                        getBlock,\n                        'getBlock',\n                      )({\n                        blockNumber,\n                        includeTransactions: true,\n                      }),\n                    {\n                      // exponential backoff\n                      delay: ({ count }) => ~~(1 << count) * 200,\n                      retryCount: 6,\n                      shouldRetry: ({ error }) =>\n                        error instanceof BlockNotFoundError,\n                    },\n                  )\n                  retrying = false\n\n                  const replacementTransaction = (\n                    block.transactions as {} as Transaction[]\n                  ).find(\n                    ({ from, nonce }) =>\n                      from === replacedTransaction!.from &&\n                      nonce === replacedTransaction!.nonce,\n                  )\n\n                  // If we couldn't find a replacement transaction, continue polling.\n                  if (!replacementTransaction) return\n\n                  // If we found a replacement transaction, return it's receipt.\n                  receipt = await getAction(\n                    client,\n                    getTransactionReceipt,\n                    'getTransactionReceipt',\n                  )({\n                    hash: replacementTransaction.hash,\n                  })\n\n                  // Check if we have enough confirmations. If not, continue polling.\n                  if (\n                    confirmations > 1 &&\n                    (!receipt.blockNumber ||\n                      blockNumber - receipt.blockNumber + 1n < confirmations)\n                  )\n                    return\n\n                  let reason: ReplacementReason = 'replaced'\n                  if (\n                    replacementTransaction.to === replacedTransaction.to &&\n                    replacementTransaction.value === replacedTransaction.value\n                  ) {\n                    reason = 'repriced'\n                  } else if (\n                    replacementTransaction.from === replacementTransaction.to &&\n                    replacementTransaction.value === 0n\n                  ) {\n                    reason = 'cancelled'\n                  }\n\n                  done(() => {\n                    emit.onReplaced?.({\n                      reason,\n                      replacedTransaction: replacedTransaction!,\n                      transaction: replacementTransaction,\n                      transactionReceipt: receipt,\n                    })\n                    emit.resolve(receipt)\n                  })\n                } catch (err_) {\n                  done(() => emit.reject(err_))\n                }\n              } else {\n                done(() => emit.reject(err))\n              }\n            }\n          },\n        })\n      },\n    )\n  })\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetTransportConfig } from '../../types/transport.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { observe } from '../../utils/observe.js'\nimport { type PollErrorType, poll } from '../../utils/poll.js'\nimport { stringify } from '../../utils/stringify.js'\n\nimport {\n  type GetBlockNumberReturnType,\n  getBlockNumber,\n} from './getBlockNumber.js'\n\nexport type OnBlockNumberParameter = GetBlockNumberReturnType\nexport type OnBlockNumberFn = (\n  blockNumber: OnBlockNumberParameter,\n  prevBlockNumber: OnBlockNumberParameter | undefined,\n) => void\n\nexport type PollOptions = {\n  /** Whether or not to emit the missed block numbers to the callback. */\n  emitMissed?: boolean\n  /** Whether or not to emit the latest block number to the callback when the subscription opens. */\n  emitOnBegin?: boolean\n  /** Polling frequency (in ms). Defaults to Client's pollingInterval config. */\n  pollingInterval?: number\n}\n\nexport type WatchBlockNumberParameters<\n  TTransport extends Transport = Transport,\n> = {\n  /** The callback to call when a new block number is received. */\n  onBlockNumber: OnBlockNumberFn\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: (error: Error) => void\n} & (GetTransportConfig<TTransport>['type'] extends 'webSocket'\n  ?\n      | {\n          emitMissed?: never\n          emitOnBegin?: never\n          /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */\n          poll?: false\n          pollingInterval?: never\n        }\n      | (PollOptions & { poll: true })\n  : PollOptions & { poll?: true })\n\nexport type WatchBlockNumberReturnType = () => void\n\nexport type WatchBlockNumberErrorType = PollErrorType | ErrorType\n\n/**\n * Watches and returns incoming block numbers.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlockNumber.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlockNumberParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\n *\n * @example\n * import { createPublicClient, watchBlockNumber, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlockNumber(client, {\n *   onBlockNumber: (blockNumber) => console.log(blockNumber),\n * })\n */\nexport function watchBlockNumber<\n  TChain extends Chain | undefined,\n  TTransport extends Transport,\n>(\n  client: Client<TTransport, TChain>,\n  {\n    emitOnBegin = false,\n    emitMissed = false,\n    onBlockNumber,\n    onError,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchBlockNumberParameters<TTransport>,\n): WatchBlockNumberReturnType {\n  const enablePolling =\n    typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket'\n\n  let prevBlockNumber: GetBlockNumberReturnType | undefined\n\n  const pollBlockNumber = () => {\n    const observerId = stringify([\n      'watchBlockNumber',\n      client.uid,\n      emitOnBegin,\n      emitMissed,\n      pollingInterval,\n    ])\n\n    return observe(observerId, { onBlockNumber, onError }, (emit) =>\n      poll(\n        async () => {\n          try {\n            const blockNumber = await getAction(\n              client,\n              getBlockNumber,\n              'getBlockNumber',\n            )({ cacheTime: 0 })\n\n            if (prevBlockNumber) {\n              // If the current block number is the same as the previous,\n              // we can skip.\n              if (blockNumber === prevBlockNumber) return\n\n              // If we have missed out on some previous blocks, and the\n              // `emitMissed` flag is truthy, let's emit those blocks.\n              if (blockNumber - prevBlockNumber > 1 && emitMissed) {\n                for (let i = prevBlockNumber + 1n; i < blockNumber; i++) {\n                  emit.onBlockNumber(i, prevBlockNumber)\n                  prevBlockNumber = i\n                }\n              }\n            }\n\n            // If the next block number is greater than the previous,\n            // it is not in the past, and we can emit the new block number.\n            if (!prevBlockNumber || blockNumber > prevBlockNumber) {\n              emit.onBlockNumber(blockNumber, prevBlockNumber)\n              prevBlockNumber = blockNumber\n            }\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin,\n          interval: pollingInterval,\n        },\n      ),\n    )\n  }\n\n  const subscribeBlockNumber = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['newHeads'],\n          onData(data: any) {\n            if (!active) return\n            const blockNumber = hexToBigInt(data.result?.number)\n            onBlockNumber(blockNumber, prevBlockNumber)\n            prevBlockNumber = blockNumber\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return unsubscribe\n  }\n\n  return enablePolling ? pollBlockNumber() : subscribeBlockNumber()\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetTransportConfig } from '../../types/transport.js'\nimport { formatBlock } from '../../utils/formatters/block.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { observe } from '../../utils/observe.js'\nimport { type PollErrorType, poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport { type GetBlockReturnType, getBlock } from './getBlock.js'\n\nexport type OnBlockParameter<\n  TChain extends Chain | undefined = Chain,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = GetBlockReturnType<TChain, TIncludeTransactions, TBlockTag>\n\nexport type OnBlock<\n  TChain extends Chain | undefined = Chain,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = (\n  block: OnBlockParameter<TChain, TIncludeTransactions, TBlockTag>,\n  prevBlock:\n    | OnBlockParameter<TChain, TIncludeTransactions, TBlockTag>\n    | undefined,\n) => void\n\ntype PollOptions<\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = {\n  /** The block tag. Defaults to \"latest\". */\n  blockTag?: TBlockTag | BlockTag\n  /** Whether or not to emit the missed blocks to the callback. */\n  emitMissed?: boolean\n  /** Whether or not to emit the block to the callback when the subscription opens. */\n  emitOnBegin?: boolean\n  /** Whether or not to include transaction data in the response. */\n  includeTransactions?: TIncludeTransactions\n  /** Polling frequency (in ms). Defaults to the client's pollingInterval config. */\n  pollingInterval?: number\n}\n\nexport type WatchBlocksParameters<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = {\n  /** The callback to call when a new block is received. */\n  onBlock: OnBlock<TChain, TIncludeTransactions, TBlockTag>\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: (error: Error) => void\n} & (GetTransportConfig<TTransport>['type'] extends 'webSocket'\n  ?\n      | {\n          blockTag?: never\n          emitMissed?: never\n          emitOnBegin?: never\n          includeTransactions?: never\n          /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */\n          poll?: false\n          pollingInterval?: never\n        }\n      | (PollOptions<TIncludeTransactions, TBlockTag> & { poll?: true })\n  : PollOptions<TIncludeTransactions, TBlockTag> & { poll?: true })\n\nexport type WatchBlocksReturnType = () => void\n\nexport type WatchBlocksErrorType =\n  | StringifyErrorType\n  | PollErrorType\n  | ErrorType\n\n/**\n * Watches and returns information for incoming blocks.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlocks.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlocksParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\n *\n * @example\n * import { createPublicClient, watchBlocks, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlocks(client, {\n *   onBlock: (block) => console.log(block),\n * })\n */\nexport function watchBlocks<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n>(\n  client: Client<TTransport, TChain>,\n  {\n    blockTag = 'latest',\n    emitMissed = false,\n    emitOnBegin = false,\n    onBlock,\n    onError,\n    includeTransactions: includeTransactions_,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchBlocksParameters<TTransport, TChain, TIncludeTransactions, TBlockTag>,\n): WatchBlocksReturnType {\n  const enablePolling =\n    typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket'\n  const includeTransactions = includeTransactions_ ?? false\n\n  let prevBlock:\n    | GetBlockReturnType<TChain, false | TIncludeTransactions, 'latest'>\n    | undefined\n\n  const pollBlocks = () => {\n    const observerId = stringify([\n      'watchBlocks',\n      client.uid,\n      emitMissed,\n      emitOnBegin,\n      includeTransactions,\n      pollingInterval,\n    ])\n\n    return observe(observerId, { onBlock, onError }, (emit) =>\n      poll(\n        async () => {\n          try {\n            const block = await getAction(\n              client,\n              getBlock,\n              'getBlock',\n            )({\n              blockTag,\n              includeTransactions,\n            })\n            if (block.number && prevBlock?.number) {\n              // If the current block number is the same as the previous,\n              // we can skip.\n              if (block.number === prevBlock.number) return\n\n              // If we have missed out on some previous blocks, and the\n              // `emitMissed` flag is truthy, let's emit those blocks.\n              if (block.number - prevBlock.number > 1 && emitMissed) {\n                for (let i = prevBlock?.number + 1n; i < block.number; i++) {\n                  const block = (await getAction(\n                    client,\n                    getBlock,\n                    'getBlock',\n                  )({\n                    blockNumber: i,\n                    includeTransactions,\n                  })) as GetBlockReturnType<TChain>\n                  emit.onBlock(block as any, prevBlock as any)\n                  prevBlock = block\n                }\n              }\n            }\n\n            if (\n              // If no previous block exists, emit.\n              !prevBlock?.number ||\n              // If the block tag is \"pending\" with no block number, emit.\n              (blockTag === 'pending' && !block?.number) ||\n              // If the next block number is greater than the previous block number, emit.\n              // We don't want to emit blocks in the past.\n              (block.number && block.number > prevBlock.number)\n            ) {\n              emit.onBlock(block as any, prevBlock as any)\n              prevBlock = block as any\n            }\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin,\n          interval: pollingInterval,\n        },\n      ),\n    )\n  }\n\n  const subscribeBlocks = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['newHeads'],\n          onData(data: any) {\n            if (!active) return\n            const format =\n              client.chain?.formatters?.block?.format || formatBlock\n            const block = format(data.result)\n            onBlock(block, prevBlock as any)\n            prevBlock = block\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return unsubscribe\n  }\n\n  return enablePolling ? pollBlocks() : subscribeBlocks()\n}\n","import type { Abi, Address, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetEventArgs, InferEventName } from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { GetTransportConfig } from '../../types/transport.js'\n\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { LogTopic } from '../../types/misc.js'\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\nimport {\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport { formatLog } from '../../utils/formatters/log.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type CreateContractEventFilterParameters,\n  createContractEventFilter,\n} from './createContractEventFilter.js'\nimport { getBlockNumber } from './getBlockNumber.js'\nimport {\n  type GetContractEventsParameters,\n  getContractEvents,\n} from './getContractEvents.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\ntype PollOptions = {\n  /**\n   * Whether or not the transaction hashes should be batched on each invocation.\n   * @default true\n   */\n  batch?: boolean\n  /**\n   * Polling frequency (in ms). Defaults to Client's pollingInterval config.\n   * @default client.pollingInterval\n   */\n  pollingInterval?: number\n}\n\nexport type WatchContractEventOnLogsParameter<\n  TAbi extends Abi | readonly unknown[] = readonly unknown[],\n  TEventName extends string = string,\n  TStrict extends boolean | undefined = undefined,\n> = TAbi extends Abi\n  ? Log<bigint, number, false, ExtractAbiEvent<TAbi, TEventName>, TStrict>[]\n  : Log[]\nexport type WatchContractEventOnLogsFn<\n  TAbi extends Abi | readonly unknown[] = readonly unknown[],\n  TEventName extends string = string,\n  TStrict extends boolean | undefined = undefined,\n> = (logs: WatchContractEventOnLogsParameter<TAbi, TEventName, TStrict>) => void\n\nexport type WatchContractEventParameters<\n  TAbi extends Abi | readonly unknown[] = readonly unknown[],\n  TEventName extends string = string,\n  TStrict extends boolean | undefined = undefined,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[]\n  /** Contract ABI. */\n  abi: TAbi\n  args?: GetEventArgs<TAbi, TEventName>\n  /** Contract event. */\n  eventName?: InferEventName<TAbi, TEventName>\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: (error: Error) => void\n  /** The callback to call when new event logs are received. */\n  onLogs: WatchContractEventOnLogsFn<TAbi, TEventName, TStrict>\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n   * @default false\n   */\n  strict?: TStrict\n} & (GetTransportConfig<Transport>['type'] extends 'webSocket'\n  ?\n      | {\n          batch?: never\n          /**\n           * Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`.\n           * @default false\n           */\n          poll?: false\n          pollingInterval?: never\n        }\n      | (PollOptions & {\n          /**\n           * Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`.\n           * @default true\n           */\n          poll?: true\n        })\n  : PollOptions & {\n      poll?: true\n    })\n\nexport type WatchContractEventReturnType = () => void\n\nexport type WatchContractEventErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns emitted contract event logs.\n *\n * - Docs: https://viem.sh/docs/contract/watchContractEvent.html\n *\n * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent.html#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent.html#onLogs).\n *\n * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter.html) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchContractEventParameters}\n * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchContractEvent } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchContractEvent(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n *   eventName: 'Transfer',\n *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchContractEvent<\n  TChain extends Chain | undefined,\n  const TAbi extends Abi | readonly unknown[],\n  TEventName extends string,\n  TStrict extends boolean | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    abi,\n    address,\n    args,\n    batch = true,\n    eventName,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_,\n  }: WatchContractEventParameters<TAbi, TEventName, TStrict>,\n): WatchContractEventReturnType {\n  const enablePolling =\n    typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket'\n\n  const pollContractEvent = () => {\n    const observerId = stringify([\n      'watchContractEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      eventName,\n      pollingInterval,\n    ])\n    const strict = strict_ ?? false\n\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      let previousBlockNumber: bigint\n      let filter: Filter<'event', TAbi, TEventName> | undefined\n      let initialized = false\n\n      const unwatch = poll(\n        async () => {\n          if (!initialized) {\n            try {\n              filter = (await getAction(\n                client,\n                createContractEventFilter,\n                'createContractEventFilter',\n              )({\n                abi,\n                address,\n                args,\n                eventName,\n                strict,\n              } as unknown as CreateContractEventFilterParameters)) as Filter<\n                'event',\n                TAbi,\n                TEventName\n              >\n            } catch {}\n            initialized = true\n            return\n          }\n\n          try {\n            let logs: Log[]\n            if (filter) {\n              logs = await getAction(\n                client,\n                getFilterChanges,\n                'getFilterChanges',\n              )({ filter })\n            } else {\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\n              // The fall back exists because some RPC Providers do not support filters.\n\n              // Fetch the block number to use for `getLogs`.\n              const blockNumber = await getAction(\n                client,\n                getBlockNumber,\n                'getBlockNumber',\n              )({})\n\n              // If the block number has changed, we will need to fetch the logs.\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\n              // so do not emit any logs.\n              if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n                logs = await getAction(\n                  client,\n                  getContractEvents,\n                  'getContractEvents',\n                )({\n                  abi,\n                  address,\n                  args,\n                  eventName,\n                  fromBlock: previousBlockNumber + 1n,\n                  toBlock: blockNumber,\n                  strict,\n                } as {} as GetContractEventsParameters)\n              } else {\n                logs = []\n              }\n              previousBlockNumber = blockNumber\n            }\n\n            if (logs.length === 0) return\n            if (batch) emit.onLogs(logs as any)\n            else for (const log of logs) emit.onLogs([log] as any)\n          } catch (err) {\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n            // Reinitalize the filter when this occurs\n            if (filter && err instanceof InvalidInputRpcError)\n              initialized = false\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribeContractEvent = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const topics: LogTopic[] = eventName\n          ? encodeEventTopics({\n              abi: abi,\n              eventName: eventName,\n              args,\n            } as EncodeEventTopicsParameters)\n          : []\n\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['logs', { address, topics }],\n          onData(data: any) {\n            if (!active) return\n            const log = data.result\n            try {\n              const { eventName, args } = decodeEventLog({\n                abi: abi,\n                data: log.data,\n                topics: log.topics as any,\n                strict: strict_,\n              })\n              const formatted = formatLog(log, {\n                args,\n                eventName: eventName as string,\n              })\n              onLogs([formatted] as any)\n            } catch (err) {\n              let eventName\n              let isUnnamed\n              if (\n                err instanceof DecodeLogDataMismatch ||\n                err instanceof DecodeLogTopicsMismatch\n              ) {\n                // If strict mode is on, and log data/topics do not match event definition, skip.\n                if (strict_) return\n                eventName = err.abiItem.name\n                isUnnamed = err.abiItem.inputs?.some(\n                  (x) => !('name' in x && x.name),\n                )\n              }\n\n              // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n              const formatted = formatLog(log, {\n                args: isUnnamed ? [] : {},\n                eventName,\n              })\n              onLogs([formatted] as any)\n            }\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return unsubscribe\n  }\n\n  return enablePolling ? pollContractEvent() : subscribeContractEvent()\n}\n","import type { Abi, AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { LogTopic } from '../../types/misc.js'\nimport type { GetTransportConfig } from '../../types/transport.js'\nimport type { EncodeEventTopicsParameters } from '../../utils/index.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  decodeEventLog,\n  encodeEventTopics,\n  formatLog,\n} from '../../utils/index.js'\nimport {\n  type CreateEventFilterParameters,\n  createEventFilter,\n} from './createEventFilter.js'\nimport { getBlockNumber } from './getBlockNumber.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { type GetLogsParameters, getLogs } from './getLogs.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\ntype PollOptions = {\n  /**\n   * Whether or not the transaction hashes should be batched on each invocation.\n   * @default true\n   */\n  batch?: boolean\n  /**\n   * Polling frequency (in ms). Defaults to Client's pollingInterval config.\n   * @default client.pollingInterval\n   */\n  pollingInterval?: number\n}\n\nexport type WatchEventOnLogsParameter<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TEventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = Log<bigint, number, false, TAbiEvent, TStrict, TAbiEvents, TEventName>[]\nexport type WatchEventOnLogsFn<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = (\n  logs: WatchEventOnLogsParameter<TAbiEvent, TAbiEvents, TStrict, _EventName>,\n) => void\n\nexport type WatchEventParameters<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[]\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: (error: Error) => void\n  /** The callback to call when new event logs are received. */\n  onLogs: WatchEventOnLogsFn<TAbiEvent, TAbiEvents, TStrict, _EventName>\n} & (GetTransportConfig<Transport>['type'] extends 'webSocket'\n  ?\n      | {\n          batch?: never\n          /**\n           * Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`.\n           * @default false\n           */\n          poll?: false\n          pollingInterval?: never\n        }\n      | (PollOptions & {\n          /**\n           * Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`.\n           * @default true\n           */\n          poll?: true\n        })\n  : PollOptions & {\n      poll?: true\n    }) &\n  (\n    | {\n        event: TAbiEvent\n        events?: never\n        args?: MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n        /**\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n         * @default false\n         */\n        strict?: TStrict\n      }\n    | {\n        event?: never\n        events?: TAbiEvents\n        args?: never\n        /**\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n         * @default false\n         */\n        strict?: TStrict\n      }\n    | {\n        event?: never\n        events?: never\n        args?: never\n        strict?: never\n      }\n  )\n\nexport type WatchEventReturnType = () => void\n\nexport type WatchEventErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms.html#event-log).\n *\n * - Docs: https://viem.sh/docs/actions/public/watchEvent.html\n * - JSON-RPC Methods:\n *   - **RPC Provider supports `eth_newFilter`:**\n *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n *   - **RPC Provider does not support `eth_newFilter`:**\n *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n *\n * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent.html#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent.html#onLogs).\n *\n * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter.html) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs.html) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchEventParameters}\n * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchEvent } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchEvent(client, {\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchEvent<\n  TChain extends Chain | undefined,\n  const TAbiEvent extends AbiEvent | undefined = undefined,\n  const TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  _EventName extends string | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    args,\n    batch = true,\n    event,\n    events,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_,\n  }: WatchEventParameters<TAbiEvent, TAbiEvents, TStrict>,\n): WatchEventReturnType {\n  const enablePolling =\n    typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket'\n  const strict = strict_ ?? false\n\n  const pollEvent = () => {\n    const observerId = stringify([\n      'watchEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      event,\n      pollingInterval,\n    ])\n\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      let previousBlockNumber: bigint\n      let filter: Filter<'event', TAbiEvents, _EventName, any>\n      let initialized = false\n\n      const unwatch = poll(\n        async () => {\n          if (!initialized) {\n            try {\n              filter = (await getAction(\n                client,\n                createEventFilter as any,\n                'createEventFilter',\n              )({\n                address,\n                args,\n                event: event!,\n                events,\n                strict,\n              } as unknown as CreateEventFilterParameters)) as unknown as Filter<\n                'event',\n                TAbiEvents,\n                _EventName\n              >\n            } catch {}\n            initialized = true\n            return\n          }\n\n          try {\n            let logs: Log[]\n            if (filter) {\n              logs = await getAction(\n                client,\n                getFilterChanges,\n                'getFilterChanges',\n              )({ filter })\n            } else {\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\n              // The fall back exists because some RPC Providers do not support filters.\n\n              // Fetch the block number to use for `getLogs`.\n              const blockNumber = await getAction(\n                client,\n                getBlockNumber,\n                'getBlockNumber',\n              )({})\n\n              // If the block number has changed, we will need to fetch the logs.\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\n              // so do not emit any logs.\n              if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n                logs = await getAction(\n                  client,\n                  getLogs,\n                  'getLogs',\n                )({\n                  address,\n                  args,\n                  event: event!,\n                  events,\n                  fromBlock: previousBlockNumber + 1n,\n                  toBlock: blockNumber,\n                } as unknown as GetLogsParameters)\n              } else {\n                logs = []\n              }\n              previousBlockNumber = blockNumber\n            }\n\n            if (logs.length === 0) return\n            if (batch) emit.onLogs(logs as any)\n            else for (const log of logs) emit.onLogs([log] as any)\n          } catch (err) {\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n            // Reinitalize the filter when this occurs\n            if (filter && err instanceof InvalidInputRpcError)\n              initialized = false\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribeEvent = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const events_ = events ?? (event ? [event] : undefined)\n        let topics: LogTopic[] = []\n        if (events_) {\n          topics = [\n            (events_ as AbiEvent[]).flatMap((event) =>\n              encodeEventTopics({\n                abi: [event],\n                eventName: (event as AbiEvent).name,\n                args,\n              } as EncodeEventTopicsParameters),\n            ),\n          ]\n          if (event) topics = topics[0] as LogTopic[]\n        }\n\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['logs', { address, topics }],\n          onData(data: any) {\n            if (!active) return\n            const log = data.result\n            try {\n              const { eventName, args } = decodeEventLog({\n                abi: events_ as Abi,\n                data: log.data,\n                topics: log.topics as any,\n                strict,\n              })\n              const formatted = formatLog(log, {\n                args,\n                eventName: eventName as string,\n              })\n              onLogs([formatted] as any)\n            } catch (err) {\n              let eventName\n              let isUnnamed\n              if (\n                err instanceof DecodeLogDataMismatch ||\n                err instanceof DecodeLogTopicsMismatch\n              ) {\n                // If strict mode is on, and log data/topics do not match event definition, skip.\n                if (strict_) return\n                eventName = err.abiItem.name\n                isUnnamed = err.abiItem.inputs?.some(\n                  (x) => !('name' in x && x.name),\n                )\n              }\n\n              // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n              const formatted = formatLog(log, {\n                args: isUnnamed ? [] : {},\n                eventName,\n              })\n              onLogs([formatted] as any)\n            }\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return unsubscribe\n  }\n\n  return enablePolling ? pollEvent() : subscribeEvent()\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { GetTransportConfig } from '../../types/transport.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport { createPendingTransactionFilter } from './createPendingTransactionFilter.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\nexport type OnTransactionsParameter = Hash[]\nexport type OnTransactionsFn = (transactions: OnTransactionsParameter) => void\n\ntype PollOptions = {\n  /**\n   * Whether or not the transaction hashes should be batched on each invocation.\n   * @default true\n   */\n  batch?: boolean\n  /**\n   * Polling frequency (in ms). Defaults to Client's pollingInterval config.\n   * @default client.pollingInterval\n   */\n  pollingInterval?: number\n}\n\nexport type WatchPendingTransactionsParameters<\n  TTransport extends Transport = Transport,\n> = {\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: (error: Error) => void\n  /** The callback to call when new transactions are received. */\n  onTransactions: OnTransactionsFn\n} & (GetTransportConfig<TTransport>['type'] extends 'webSocket'\n  ?\n      | {\n          batch?: never\n          /**\n           * Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`.\n           * @default false\n           */\n          poll?: false\n          pollingInterval?: never\n        }\n      | (PollOptions & {\n          /**\n           * Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`.\n           * @default true\n           */\n          poll?: true\n        })\n  : PollOptions & {\n      poll?: true\n    })\n\nexport type WatchPendingTransactionsReturnType = () => void\n\nexport type WatchPendingTransactionsErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns pending transaction hashes.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchPendingTransactions.html\n * - JSON-RPC Methods:\n *   - When `poll: true`\n *     - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\n *     - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newPendingTransactions\"` event.\n *\n * This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions.html#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions.html#ontransactions).\n *\n * @param client - Client to use\n * @param parameters - {@link WatchPendingTransactionsParameters}\n * @returns A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchPendingTransactions } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = await watchPendingTransactions(client, {\n *   onTransactions: (hashes) => console.log(hashes),\n * })\n */\nexport function watchPendingTransactions<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n>(\n  client: Client<TTransport, TChain>,\n  {\n    batch = true,\n    onError,\n    onTransactions,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchPendingTransactionsParameters<TTransport>,\n) {\n  const enablePolling =\n    typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket'\n\n  const pollPendingTransactions = () => {\n    const observerId = stringify([\n      'watchPendingTransactions',\n      client.uid,\n      batch,\n      pollingInterval,\n    ])\n    return observe(observerId, { onTransactions, onError }, (emit) => {\n      let filter: Filter<'transaction'>\n\n      const unwatch = poll(\n        async () => {\n          try {\n            if (!filter) {\n              try {\n                filter = await getAction(\n                  client,\n                  createPendingTransactionFilter,\n                  'createPendingTransactionFilter',\n                )({})\n                return\n              } catch (err) {\n                unwatch()\n                throw err\n              }\n            }\n\n            const hashes = await getAction(\n              client,\n              getFilterChanges,\n              'getFilterChanges',\n            )({ filter })\n            if (hashes.length === 0) return\n            if (batch) emit.onTransactions(hashes)\n            else for (const hash of hashes) emit.onTransactions([hash])\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribePendingTransactions = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['newPendingTransactions'],\n          onData(data: any) {\n            if (!active) return\n            const transaction = data.result\n            onTransactions([transaction])\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return unsubscribe\n  }\n\n  return enablePolling\n    ? pollPendingTransactions()\n    : subscribePendingTransactions()\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type DropTransactionParameters = {\n  /** The hash of the transaction to drop. */\n  hash: Hash\n}\n\nexport type DropTransactionErrorType = RequestErrorType | ErrorType\n\n/**\n * Removes a transaction from the mempool.\n *\n * - Docs: https://viem.sh/docs/actions/test/dropTransaction.html\n *\n * @param client - Client to use\n * @param parameters - {@link DropTransactionParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { dropTransaction } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await dropTransaction(client, {\n *   hash: '0xe58dceb6b20b03965bb678e27d141e151d7d4efc2334c2d6a49b9fac523f7364'\n * })\n */\nexport async function dropTransaction<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { hash }: DropTransactionParameters,\n) {\n  await client.request({\n    method: `${client.mode}_dropTransaction`,\n    params: [hash],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type DumpStateReturnType = Hex\nexport type DumpStateErrorType = RequestErrorType | ErrorType\n\n/**\n * Serializes the current state (including contracts code, contract's storage,\n * accounts properties, etc.) into a savable data blob.\n *\n * - Docs: https://viem.sh/docs/actions/test/dumpState.html\n *\n * @param client - Client to use\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { dumpState } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await dumpState(client)\n */\nexport async function dumpState<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n): Promise<DumpStateReturnType> {\n  return client.request({\n    method: `${client.mode}_dumpState`,\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetAutomineReturnType = boolean\n\nexport type GetAutomineErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the automatic mining status of the node.\n *\n * - Docs: https://viem.sh/docs/actions/test/getAutomine.html\n *\n * @param client - Client to use\n * @returns Whether or not the node is auto mining. {@link GetAutomineReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { getAutomine } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const isAutomining = await getAutomine(client)\n */\nexport async function getAutomine<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n): Promise<GetAutomineReturnType> {\n  if (client.mode === 'ganache')\n    return await client.request({\n      method: 'eth_mining',\n    })\n  return await client.request({\n    method: `${client.mode}_getAutomine`,\n  })\n}\n","import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RpcTransaction } from '../../types/rpc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetTxpoolContentReturnType = {\n  /** Pending transactions in the pool */\n  pending: Record<Address, Record<string, RpcTransaction>>\n  /** Queued transactions in the pool */\n  queued: Record<Address, Record<string, RpcTransaction>>\n}\n\nexport type GetTxpoolContentErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n *\n * - Docs: https://viem.sh/docs/actions/test/getTxpoolContent.html\n *\n * @param client - Client to use\n * @returns Transaction pool content. {@link GetTxpoolContentReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { getTxpoolContent } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const content = await getTxpoolContent(client)\n */\nexport async function getTxpoolContent<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n): Promise<GetTxpoolContentReturnType> {\n  return await client.request({\n    method: 'txpool_content',\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { hexToNumber } from '../../utils/encoding/fromHex.js'\n\nexport type GetTxpoolStatusReturnType = {\n  pending: number\n  queued: number\n}\n\nexport type GetTxpoolStatusErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n *\n * - Docs: https://viem.sh/docs/actions/test/getTxpoolStatus.html\n *\n * @param client - Client to use\n * @returns Transaction pool status. {@link GetTxpoolStatusReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { getTxpoolStatus } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const status = await getTxpoolStatus(client)\n */\nexport async function getTxpoolStatus<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n): Promise<GetTxpoolStatusReturnType> {\n  const { pending, queued } = await client.request({\n    method: 'txpool_status',\n  })\n  return {\n    pending: hexToNumber(pending),\n    queued: hexToNumber(queued),\n  }\n}\n","import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type ImpersonateAccountParameters = {\n  /** The account to impersonate. */\n  address: Address\n}\n\nexport type ImpersonateAccountErrorType = RequestErrorType | ErrorType\n\n/**\n * Impersonate an account or contract address. This lets you send transactions from that account even if you don't have access to its private key.\n *\n * - Docs: https://viem.sh/docs/actions/test/impersonateAccount.html\n *\n * @param client - Client to use\n * @param parameters - {@link ImpersonateAccountParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { impersonateAccount } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const content = await impersonateAccount(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function impersonateAccount<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { address }: ImpersonateAccountParameters,\n) {\n  await client.request({\n    method: `${client.mode}_impersonateAccount`,\n    params: [address],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type IncreaseTimeParameters = {\n  /** The amount of seconds to jump forward in time. */\n  seconds: number\n}\n\nexport type IncreaseTimeErrorType = RequestErrorType | ErrorType\n\n/**\n * Jump forward in time by the given amount of time, in seconds.\n *\n * - Docs: https://viem.sh/docs/actions/test/increaseTime.html\n *\n * @param client - Client to use\n * @param parameters – {@link IncreaseTimeParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { increaseTime } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await increaseTime(client, {\n *   seconds: 420,\n * })\n */\nexport async function increaseTime<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { seconds }: IncreaseTimeParameters,\n) {\n  return await client.request({\n    method: 'evm_increaseTime',\n    params: [numberToHex(seconds)],\n  })\n}\n","import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type InspectTxpoolReturnType = {\n  pending: Record<Address, Record<string, string>>\n  queued: Record<Address, Record<string, string>>\n}\n\nexport type InspectTxpoolErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n *\n * - Docs: https://viem.sh/docs/actions/test/inspectTxpool.html\n *\n * @param client - Client to use\n * @returns Transaction pool inspection data. {@link InspectTxpoolReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { inspectTxpool } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const data = await inspectTxpool(client)\n */\nexport async function inspectTxpool<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n): Promise<InspectTxpoolReturnType> {\n  return await client.request({\n    method: 'txpool_inspect',\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type LoadStateParameters = { state: Hex }\nexport type LoadStateReturnType = void\nexport type LoadStateErrorType = RequestErrorType | ErrorType\n\n/**\n * Adds state previously dumped with `dumpState` to the current chain.\n *\n * - Docs: https://viem.sh/docs/actions/test/loadState.html\n *\n * @param client - Client to use\n * @param parameters - {@link LoadStateParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { loadState } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await loadState(client, { state: '0x...' })\n */\nexport async function loadState<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { state }: LoadStateParameters,\n): Promise<LoadStateReturnType> {\n  await client.request({\n    method: `${client.mode}_loadState`,\n    params: [state],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type MineParameters = {\n  /** Number of blocks to mine. */\n  blocks: number\n  /** Interval between each block in seconds. */\n  interval?: number\n}\n\nexport type MineErrorType = RequestErrorType | ErrorType\n\n/**\n * Mine a specified number of blocks.\n *\n * - Docs: https://viem.sh/docs/actions/test/mine.html\n *\n * @param client - Client to use\n * @param parameters – {@link MineParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { mine } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await mine(client, { blocks: 1 })\n */\nexport async function mine<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { blocks, interval }: MineParameters,\n) {\n  if (client.mode === 'ganache')\n    await client.request({\n      method: 'evm_mine',\n      params: [{ blocks: numberToHex(blocks) }],\n    })\n  else\n    await client.request({\n      method: `${client.mode}_mine`,\n      params: [numberToHex(blocks), numberToHex(interval || 0)],\n    })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type RemoveBlockTimestampIntervalErrorType = RequestErrorType | ErrorType\n\n/**\n * Removes [`setBlockTimestampInterval`](https://viem.sh/docs/actions/test/setBlockTimestampInterval.html) if it exists.\n *\n * - Docs: https://viem.sh/docs/actions/test/removeBlockTimestampInterval.html\n *\n * @param client - Client to use\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { removeBlockTimestampInterval } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await removeBlockTimestampInterval(client)\n */\nexport async function removeBlockTimestampInterval<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(client: TestClient<TestClientMode, Transport, TChain, TAccount, false>) {\n  await client.request({\n    method: `${client.mode}_removeBlockTimestampInterval`,\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type ResetParameters = {\n  /** The block number to reset from. */\n  blockNumber?: bigint\n  /** The JSON RPC URL. */\n  jsonRpcUrl?: string\n}\n\nexport type ResetErrorType = RequestErrorType | ErrorType\n\n/**\n * Resets fork back to its original state.\n *\n * - Docs: https://viem.sh/docs/actions/test/reset.html\n *\n * @param client - Client to use\n * @param parameters – {@link ResetParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { reset } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await reset(client, { blockNumber: 69420n })\n */\nexport async function reset<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { blockNumber, jsonRpcUrl }: ResetParameters = {},\n) {\n  await client.request({\n    method: `${client.mode}_reset`,\n    params: [{ forking: { blockNumber: Number(blockNumber), jsonRpcUrl } }],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Quantity } from '../../types/rpc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type RevertParameters = {\n  /** The snapshot ID to revert to. */\n  id: Quantity\n}\n\nexport type RevertErrorType = RequestErrorType | ErrorType\n\n/**\n * Revert the state of the blockchain at the current block.\n *\n * - Docs: https://viem.sh/docs/actions/test/revert.html\n *\n * @param client - Client to use\n * @param parameters – {@link RevertParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { revert } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await revert(client, { id: '0x…' })\n */\nexport async function revert<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { id }: RevertParameters,\n) {\n  await client.request({\n    method: 'evm_revert',\n    params: [id],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\n\nexport type SendUnsignedTransactionParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<TChain>\n\nexport type SendUnsignedTransactionReturnType = Hash\n\nexport type SendUnsignedTransactionErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n *\n * - Docs: https://viem.sh/docs/actions/test/getTxpoolContent.html\n *\n * @param client - Client to use\n * @param parameters – {@link SendUnsignedTransactionParameters}\n * @returns The transaction hash. {@link SendUnsignedTransactionReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { sendUnsignedTransaction } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const hash = await sendUnsignedTransaction(client, {\n *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendUnsignedTransaction<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  args: SendUnsignedTransactionParameters<TChain>,\n): Promise<SendUnsignedTransactionReturnType> {\n  const {\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args\n\n  const chainFormat = client.chain?.formatters?.transactionRequest?.format\n  const format = chainFormat || formatTransactionRequest\n\n  const request = format({\n    // Pick out extra data that might exist on the chain's transaction request type.\n    ...extract(rest, { format: chainFormat }),\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n  } as TransactionRequest)\n  const hash = await client.request({\n    method: 'eth_sendUnsignedTransaction',\n    params: [request],\n  })\n  return hash\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type SetAutomineErrorType = RequestErrorType | ErrorType\n\n/**\n * Enables or disables the automatic mining of new blocks with each new transaction submitted to the network.\n *\n * - Docs: https://viem.sh/docs/actions/test/setAutomine.html\n *\n * @param client - Client to use\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setAutomine } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setAutomine(client)\n */\nexport async function setAutomine<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  enabled: boolean,\n) {\n  if (client.mode === 'ganache') {\n    if (enabled) await client.request({ method: 'miner_start' })\n    else await client.request({ method: 'miner_stop' })\n  } else\n    await client.request({\n      method: 'evm_setAutomine',\n      params: [enabled],\n    })\n}\n","import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetBalanceParameters = {\n  /** The account address. */\n  address: Address\n  /** Amount (in wei) to set */\n  value: bigint\n}\n\nexport type SetBalanceErrorType = RequestErrorType | ErrorType\n\n/**\n * Modifies the balance of an account.\n *\n * - Docs: https://viem.sh/docs/actions/test/setBalance.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetBalanceParameters}\n *\n * @example\n * import { createTestClient, http, parseEther } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setBalance } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setBalance(client, {\n *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n *   value: parseEther('1'),\n * })\n */\nexport async function setBalance<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { address, value }: SetBalanceParameters,\n) {\n  if (client.mode === 'ganache')\n    await client.request({\n      method: 'evm_setAccountBalance',\n      params: [address, numberToHex(value)],\n    })\n  else\n    await client.request({\n      method: `${client.mode}_setBalance`,\n      params: [address, numberToHex(value)],\n    })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetBlockGasLimitParameters = {\n  /** Gas limit (in wei). */\n  gasLimit: bigint\n}\n\nexport type SetBlockGasLimitErrorType = RequestErrorType | ErrorType\n\n/**\n * Sets the block's gas limit.\n *\n * - Docs: https://viem.sh/docs/actions/test/setBlockGasLimit.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetBlockGasLimitParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setBlockGasLimit } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setBlockGasLimit(client, { gasLimit: 420_000n })\n */\nexport async function setBlockGasLimit<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { gasLimit }: SetBlockGasLimitParameters,\n) {\n  await client.request({\n    method: 'evm_setBlockGasLimit',\n    params: [numberToHex(gasLimit)],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type SetBlockTimestampIntervalParameters = {\n  /** The interval (in seconds). */\n  interval: number\n}\n\nexport type SetBlockTimestampIntervalErrorType = RequestErrorType | ErrorType\n\n/**\n * Similar to [`increaseTime`](https://viem.sh/docs/actions/test/increaseTime.html), but sets a block timestamp `interval`. The timestamp of future blocks will be computed as `lastBlock_timestamp` + `interval`.\n *\n * - Docs: https://viem.sh/docs/actions/test/setBlockTimestampInterval.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetBlockTimestampIntervalParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setBlockTimestampInterval } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setBlockTimestampInterval(client, { interval: 5 })\n */\nexport async function setBlockTimestampInterval<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { interval }: SetBlockTimestampIntervalParameters,\n) {\n  const interval_ = (() => {\n    if (client.mode === 'hardhat') return interval * 1000\n    return interval\n  })()\n\n  await client.request({\n    method: `${client.mode}_setBlockTimestampInterval`,\n    params: [interval_],\n  })\n}\n","import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type SetCodeParameters = {\n  /** The account address. */\n  address: Address\n  /** The bytecode to set */\n  bytecode: Hex\n}\n\nexport type SetCodeErrorType = RequestErrorType | ErrorType\n\n/**\n * Modifies the bytecode stored at an account's address.\n *\n * - Docs: https://viem.sh/docs/actions/test/setCode.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetCodeParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setCode } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setCode(client, {\n *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n *   bytecode: '0x60806040526000600355600019600955600c80546001600160a01b031916737a250d5630b4cf539739df…',\n * })\n */\nexport async function setCode<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { address, bytecode }: SetCodeParameters,\n) {\n  await client.request({\n    method: `${client.mode}_setCode`,\n    params: [address, bytecode],\n  })\n}\n","import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type SetCoinbaseParameters = {\n  /** The coinbase address. */\n  address: Address\n}\n\nexport type SetCoinbaseErrorType = RequestErrorType | ErrorType\n\n/**\n * Sets the coinbase address to be used in new blocks.\n *\n * - Docs: https://viem.sh/docs/actions/test/setCoinbase.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetCoinbaseParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setCoinbase } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setCoinbase(client, {\n *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n * })\n */\nexport async function setCoinbase<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { address }: SetCoinbaseParameters,\n) {\n  await client.request({\n    method: `${client.mode}_setCoinbase`,\n    params: [address],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type SetIntervalMiningParameters = {\n  /** The mining interval. */\n  interval: number\n}\n\nexport type SetIntervalMiningErrorType = RequestErrorType | ErrorType\n\n/**\n * Sets the automatic mining interval (in seconds) of blocks. Setting the interval to 0 will disable automatic mining.\n *\n * - Docs: https://viem.sh/docs/actions/test/setIntervalMining.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetIntervalMiningParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setIntervalMining } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setIntervalMining(client, { interval: 5 })\n */\nexport async function setIntervalMining<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { interval }: SetIntervalMiningParameters,\n) {\n  const interval_ = (() => {\n    if (client.mode === 'hardhat') return interval * 1000\n    return interval\n  })()\n\n  await client.request({\n    method: 'evm_setIntervalMining',\n    params: [interval_],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type SetLoggingEnabledErrorType = RequestErrorType | ErrorType\n\n/**\n * Enable or disable logging on the test node network.\n *\n * - Docs: https://viem.sh/docs/actions/test/setLoggingEnabled.html\n *\n * @param client - Client to use\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setLoggingEnabled } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setLoggingEnabled(client)\n */\nexport async function setLoggingEnabled<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  enabled: boolean,\n) {\n  await client.request({\n    method: `${client.mode}_setLoggingEnabled`,\n    params: [enabled],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetMinGasPriceParameters = {\n  /** The gas price. */\n  gasPrice: bigint\n}\n\nexport type SetMinGasPriceErrorType = RequestErrorType | ErrorType\n\n/**\n * Change the minimum gas price accepted by the network (in wei).\n *\n * - Docs: https://viem.sh/docs/actions/test/setMinGasPrice.html\n *\n * Note: `setMinGasPrice` can only be used on clients that do not have EIP-1559 enabled.\n *\n * @param client - Client to use\n * @param parameters – {@link SetBlockGasLimitParameters}\n *\n * @example\n * import { createTestClient, http, parseGwei } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setMinGasPrice } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setMinGasPrice(client, {\n *   gasPrice: parseGwei('20'),\n * })\n */\nexport async function setMinGasPrice<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { gasPrice }: SetMinGasPriceParameters,\n) {\n  await client.request({\n    method: `${client.mode}_setMinGasPrice`,\n    params: [numberToHex(gasPrice)],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetNextBlockBaseFeePerGasParameters = {\n  /** Base fee per gas (in wei). */\n  baseFeePerGas: bigint\n}\n\nexport type SetNextBlockBaseFeePerGasErrorType = RequestErrorType | ErrorType\n\n/**\n * Sets the next block's base fee per gas.\n *\n * - Docs: https://viem.sh/docs/actions/test/setNextBlockBaseFeePerGas.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetNextBlockBaseFeePerGasParameters}\n *\n * @example\n * import { createTestClient, http, parseGwei } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setNextBlockBaseFeePerGas } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setNextBlockBaseFeePerGas(client, {\n *   baseFeePerGas: parseGwei('20'),\n * })\n */\nexport async function setNextBlockBaseFeePerGas<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { baseFeePerGas }: SetNextBlockBaseFeePerGasParameters,\n) {\n  await client.request({\n    method: `${client.mode}_setNextBlockBaseFeePerGas`,\n    params: [numberToHex(baseFeePerGas)],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetNextBlockTimestampParameters = {\n  /** The timestamp (in seconds). */\n  timestamp: bigint\n}\n\nexport type SetNextBlockTimestampErrorType = RequestErrorType | ErrorType\n\n/**\n * Sets the next block's timestamp.\n *\n * - Docs: https://viem.sh/docs/actions/test/setNextBlockTimestamp.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetNextBlockTimestampParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setNextBlockTimestamp } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setNextBlockTimestamp(client, { timestamp: 1671744314n })\n */\nexport async function setNextBlockTimestamp<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { timestamp }: SetNextBlockTimestampParameters,\n) {\n  await client.request({\n    method: 'evm_setNextBlockTimestamp',\n    params: [numberToHex(timestamp)],\n  })\n}\n","import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetNonceParameters = {\n  /** The account address. */\n  address: Address\n  /** The nonce to set. */\n  nonce: number\n}\n\nexport type SetNonceErrorType = RequestErrorType | ErrorType\n\n/**\n * Modifies (overrides) the nonce of an account.\n *\n * - Docs: https://viem.sh/docs/actions/test/setNonce.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetNonceParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setNonce } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setNonce(client, {\n *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n *   nonce: 420,\n * })\n */\nexport async function setNonce<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { address, nonce }: SetNonceParameters,\n) {\n  await client.request({\n    method: `${client.mode}_setNonce`,\n    params: [address, numberToHex(nonce)],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type SetRpcUrlErrorType = RequestErrorType | ErrorType\n\n/**\n * Sets the backend RPC URL.\n *\n * - Docs: https://viem.sh/docs/actions/test/setRpcUrl.html\n *\n * @param client - Client to use\n * @param jsonRpcUrl – RPC URL\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setRpcUrl } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setRpcUrl(client, 'https://eth-mainnet.g.alchemy.com/v2')\n */\nexport async function setRpcUrl<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  jsonRpcUrl: string,\n) {\n  await client.request({\n    method: `${client.mode}_setRpcUrl`,\n    params: [jsonRpcUrl],\n  })\n}\n","import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash, Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetStorageAtParameters = {\n  /** The account address. */\n  address: Address\n  /** The storage slot (index). Can either be a number or hash value. */\n  index: number | Hash\n  /** The value to store as a 32 byte hex string. */\n  value: Hex\n}\n\nexport type SetStorageAtErrorType = RequestErrorType | ErrorType\n\n/**\n * Writes to a slot of an account's storage.\n *\n * - Docs: https://viem.sh/docs/actions/test/setStorageAt.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetStorageAtParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setStorageAt } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setStorageAt(client, {\n *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n *   index: 2,\n *   value: '0x0000000000000000000000000000000000000000000000000000000000000069',\n * })\n */\nexport async function setStorageAt<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { address, index, value }: SetStorageAtParameters,\n) {\n  await client.request({\n    method: `${client.mode}_setStorageAt`,\n    params: [\n      address,\n      typeof index === 'number' ? numberToHex(index) : index,\n      value,\n    ],\n  })\n}\n","import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type SnapshotErrorType = RequestErrorType | ErrorType\n\n/**\n * Snapshot the state of the blockchain at the current block.\n *\n * - Docs: https://viem.sh/docs/actions/test/snapshot.html\n *\n * @param client - Client to use\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { snapshot } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await snapshot(client)\n */\nexport async function snapshot<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(client: TestClient<TestClientMode, Transport, TChain, TAccount, false>) {\n  return await client.request({\n    method: 'evm_snapshot',\n  })\n}\n","import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type StopImpersonatingAccountParameters = {\n  /** The account to impersonate. */\n  address: Address\n}\n\nexport type StopImpersonatingAccountErrorType = RequestErrorType | ErrorType\n\n/**\n * Stop impersonating an account after having previously used [`impersonateAccount`](https://viem.sh/docs/actions/test/impersonateAccount.html).\n *\n * - Docs: https://viem.sh/docs/actions/test/stopImpersonatingAccount.html\n *\n * @param client - Client to use\n * @param parameters – {@link StopImpersonatingAccountParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { stopImpersonatingAccount } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await stopImpersonatingAccount(client, {\n *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n * })\n */\nexport async function stopImpersonatingAccount<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { address }: StopImpersonatingAccountParameters,\n) {\n  await client.request({\n    method: `${client.mode}_stopImpersonatingAccount`,\n    params: [address],\n  })\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type AddChainParameters = {\n  /** The chain to add to the wallet. */\n  chain: Chain\n}\n\nexport type AddChainErrorType =\n  | RequestErrorType\n  | NumberToHexErrorType\n  | ErrorType\n\n/**\n * Adds an EVM chain to the wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/addChain.html\n * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\n *\n * @param client - Client to use\n * @param parameters - {@link AddChainParameters}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { optimism } from 'viem/chains'\n * import { addChain } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   transport: custom(window.ethereum),\n * })\n * await addChain(client, { chain: optimism })\n */\nexport async function addChain<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(client: Client<Transport, TChain, TAccount>, { chain }: AddChainParameters) {\n  const { id, name, nativeCurrency, rpcUrls, blockExplorers } = chain\n  await client.request({\n    method: 'wallet_addEthereumChain',\n    params: [\n      {\n        chainId: numberToHex(id),\n        chainName: name,\n        nativeCurrency,\n        rpcUrls: rpcUrls.default.http,\n        blockExplorerUrls: blockExplorers\n          ? Object.values(blockExplorers).map(({ url }) => url)\n          : undefined,\n      },\n    ],\n  })\n}\n","import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport type { GetConstructorArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport { encodeDeployData } from '../../utils/abi/encodeDeployData.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type SendTransactionErrorType,\n  type SendTransactionParameters,\n  type SendTransactionReturnType,\n  sendTransaction,\n} from './sendTransaction.js'\n\nexport type DeployContractParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  SendTransactionParameters<TChain, TAccount, TChainOverride>,\n  'accessList' | 'chain' | 'to' | 'data'\n> & {\n  abi: TAbi\n  bytecode: Hex\n} & GetChain<TChain, TChainOverride> &\n  GetConstructorArgs<TAbi>\n\nexport type DeployContractReturnType = SendTransactionReturnType\n\nexport type DeployContractErrorType = SendTransactionErrorType | ErrorType\n\n/**\n * Deploys a contract to the network, given bytecode and constructor arguments.\n *\n * - Docs: https://viem.sh/docs/contract/deployContract.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/deploying-contracts\n *\n * @param client - Client to use\n * @param parameters - {@link DeployContractParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash. {@link DeployContractReturnType}\n *\n * @example\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { deployContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await deployContract(client, {\n *   abi: [],\n *   account: '0x…,\n *   bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n * })\n */\nexport function deployContract<\n  const TAbi extends Abi | readonly unknown[],\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TChainOverride extends Chain | undefined = undefined,\n>(\n  walletClient: Client<Transport, TChain, TAccount>,\n  {\n    abi,\n    args,\n    bytecode,\n    ...request\n  }: DeployContractParameters<TAbi, TChain, TAccount, TChainOverride>,\n): Promise<DeployContractReturnType> {\n  const calldata = encodeDeployData({\n    abi,\n    args,\n    bytecode,\n  } as unknown as DeployContractParameters<\n    TAbi,\n    TChain,\n    TAccount,\n    TChainOverride\n  >)\n  return sendTransaction(walletClient, {\n    ...request,\n    data: calldata,\n  } as unknown as SendTransactionParameters<TChain, TAccount, TChainOverride>)\n}\n","import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport {\n  type ChecksumAddressErrorType,\n  checksumAddress,\n} from '../../utils/address/getAddress.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetAddressesReturnType = Address[]\n\nexport type GetAddressesErrorType =\n  | RequestErrorType\n  | ChecksumAddressErrorType\n  | ErrorType\n\n/**\n * Returns a list of account addresses owned by the wallet or client.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getAddresses.html\n * - JSON-RPC Methods: [`eth_accounts`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_accounts)\n *\n * @param client - Client to use\n * @returns List of account addresses owned by the wallet or client. {@link GetAddressesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getAddresses } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const accounts = await getAddresses(client)\n */\nexport async function getAddresses<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n): Promise<GetAddressesReturnType> {\n  if (client.account?.type === 'local') return [client.account.address]\n  const addresses = await client.request({ method: 'eth_accounts' })\n  return addresses.map((address) => checksumAddress(address))\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { WalletPermission } from '../../types/eip1193.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetPermissionsReturnType = WalletPermission[]\n\nexport type GetPermissionsErrorType = RequestErrorType | ErrorType\n\n/**\n * Gets the wallets current permissions.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getPermissions.html\n * - JSON-RPC Methods: [`wallet_getPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n *\n * @param client - Client to use\n * @returns The wallet permissions. {@link GetPermissionsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getPermissions } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const permissions = await getPermissions(client)\n */\nexport async function getPermissions<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(client: Client<Transport, TChain, TAccount>) {\n  const permissions = await client.request({ method: 'wallet_getPermissions' })\n  return permissions\n}\n","import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport {\n  type EstimateFeesPerGasErrorType,\n  internal_estimateFeesPerGas,\n} from '../../actions/public/estimateFeesPerGas.js'\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport {\n  type GetBlockErrorType,\n  getBlock,\n} from '../../actions/public/getBlock.js'\nimport {\n  type GetTransactionCountErrorType,\n  getTransactionCount,\n} from '../../actions/public/getTransactionCount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n} from '../../errors/account.js'\nimport {\n  Eip1559FeesNotSupportedError,\n  MaxFeePerGasTooLowError,\n} from '../../errors/fee.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport type { TransactionSerializable } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type {\n  AssertRequestErrorType,\n  AssertRequestParameters,\n} from '../../utils/transaction/assertRequest.js'\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\nimport { getTransactionType } from '../../utils/transaction/getTransactionType.js'\n\nexport type PrepareTransactionRequestParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<\n    TChainOverride extends Chain ? TChainOverride : TChain\n  >,\n  'from'\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type PrepareTransactionRequestReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<\n  TChainOverride extends Chain ? TChainOverride : TChain\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type PrepareTransactionRequestErrorType =\n  | AccountNotFoundErrorType\n  | AssertRequestErrorType\n  | ParseAccountErrorType\n  | GetBlockErrorType\n  | GetTransactionCountErrorType\n  | EstimateGasErrorType\n  | EstimateFeesPerGasErrorType\n\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest.html\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TChainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: PrepareTransactionRequestParameters<TChain, TAccount, TChainOverride>,\n): Promise<\n  PrepareTransactionRequestReturnType<TChain, TAccount, TChainOverride>\n> {\n  const { account: account_ = client.account, chain, gas, nonce, type } = args\n  if (!account_) throw new AccountNotFoundError()\n  const account = parseAccount(account_)\n\n  const block = await getAction(\n    client,\n    getBlock,\n    'getBlock',\n  )({ blockTag: 'latest' })\n\n  const request = { ...args, from: account.address }\n\n  if (typeof nonce === 'undefined')\n    request.nonce = await getAction(\n      client,\n      getTransactionCount,\n      'getTransactionCount',\n    )({\n      address: account.address,\n      blockTag: 'pending',\n    })\n\n  if (typeof type === 'undefined') {\n    try {\n      request.type = getTransactionType(\n        request as TransactionSerializable,\n      ) as any\n    } catch {\n      // infer type from block\n      request.type =\n        typeof block.baseFeePerGas === 'bigint' ? 'eip1559' : 'legacy'\n    }\n  }\n\n  if (request.type === 'eip1559') {\n    // EIP-1559 fees\n    const { maxFeePerGas, maxPriorityFeePerGas } =\n      await internal_estimateFeesPerGas(client, {\n        block,\n        chain,\n        request: request as PrepareTransactionRequestParameters,\n      })\n\n    if (\n      typeof args.maxPriorityFeePerGas === 'undefined' &&\n      args.maxFeePerGas &&\n      args.maxFeePerGas < maxPriorityFeePerGas\n    )\n      throw new MaxFeePerGasTooLowError({\n        maxPriorityFeePerGas,\n      })\n\n    request.maxPriorityFeePerGas = maxPriorityFeePerGas\n    request.maxFeePerGas = maxFeePerGas\n  } else {\n    // Legacy fees\n    if (\n      typeof args.maxFeePerGas !== 'undefined' ||\n      typeof args.maxPriorityFeePerGas !== 'undefined'\n    )\n      throw new Eip1559FeesNotSupportedError()\n\n    const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(client, {\n      block,\n      chain,\n      request: request as PrepareTransactionRequestParameters,\n      type: 'legacy',\n    })\n    request.gasPrice = gasPrice_\n  }\n\n  if (typeof gas === 'undefined')\n    request.gas = await getAction(\n      client,\n      estimateGas,\n      'estimateGas',\n    )({\n      ...request,\n      account: { address: account.address, type: 'json-rpc' },\n    } as EstimateGasParameters)\n\n  assertRequest(request as AssertRequestParameters)\n\n  return request as unknown as PrepareTransactionRequestReturnType<\n    TChain,\n    TAccount,\n    TChainOverride\n  >\n}\n","import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport { getAddress } from '../../utils/address/getAddress.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type RequestAddressesReturnType = Address[]\n\nexport type RequestAddressesErrorType = RequestErrorType | ErrorType\n\n/**\n * Requests a list of accounts managed by a wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/requestAddresses.html\n * - JSON-RPC Methods: [`eth_requestAccounts`](https://eips.ethereum.org/EIPS/eip-1102)\n *\n * Sends a request to the wallet, asking for permission to access the user's accounts. After the user accepts the request, it will return a list of accounts (addresses).\n *\n * This API can be useful for dapps that need to access the user's accounts in order to execute transactions or interact with smart contracts.\n *\n * @param client - Client to use\n * @returns List of accounts managed by a wallet {@link RequestAddressesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { requestAddresses } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const accounts = await requestAddresses(client)\n */\nexport async function requestAddresses<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n): Promise<RequestAddressesReturnType> {\n  const addresses = await client.request({ method: 'eth_requestAccounts' })\n  return addresses.map((address) => getAddress(address))\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { WalletPermission } from '../../types/eip1193.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type RequestPermissionsParameters = Prettify<\n  {\n    eth_accounts: Record<string, any>\n  } & {\n    [key: string]: Record<string, any>\n  }\n>\nexport type RequestPermissionsReturnType = WalletPermission[]\n\nexport type RequestPermissionsErrorType = RequestErrorType | ErrorType\n\n/**\n * Requests permissions for a wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/requestPermissions.html\n * - JSON-RPC Methods: [`wallet_requestPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n *\n * @param client - Client to use\n * @param parameters - {@link RequestPermissionsParameters}\n * @returns The wallet permissions. {@link RequestPermissionsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { requestPermissions } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const permissions = await requestPermissions(client, {\n *   eth_accounts: {}\n * })\n */\nexport async function requestPermissions<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  permissions: RequestPermissionsParameters,\n) {\n  return client.request({\n    method: 'wallet_requestPermissions',\n    params: [permissions],\n  })\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { TransactionSerialized } from '../../types/transaction.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type SendRawTransactionParameters = {\n  /**\n   * The signed serialized tranasction.\n   */\n  serializedTransaction: TransactionSerialized\n}\n\nexport type SendRawTransactionReturnType = Hash\n\nexport type SendRawTransactionErrorType = RequestErrorType | ErrorType\n\n/**\n * Sends a **signed** transaction to the network\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction.html\n * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *\n * @param client - Client to use\n * @param parameters - {@link SendRawTransactionParameters}\n * @returns The transaction hash. {@link SendRawTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendRawTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const hash = await sendRawTransaction(client, {\n *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n * })\n */\nexport async function sendRawTransaction<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { serializedTransaction }: SendRawTransactionParameters,\n): Promise<SendRawTransactionReturnType> {\n  return client.request({\n    method: 'eth_sendRawTransaction',\n    params: [serializedTransaction],\n  })\n}\n","import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTransactionErrorType } from '../../accounts/utils/signTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type {\n  TransactionRequest,\n  TransactionSerializable,\n} from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type AssertCurrentChainErrorType,\n  assertCurrentChain,\n} from '../../utils/chain/assertCurrentChain.js'\nimport {\n  type GetTransactionErrorReturnType,\n  getTransactionError,\n} from '../../utils/errors/getTransactionError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\nimport {\n  type PrepareTransactionRequestErrorType,\n  prepareTransactionRequest,\n} from './prepareTransactionRequest.js'\nimport {\n  type SendRawTransactionReturnType,\n  sendRawTransaction,\n} from './sendRawTransaction.js'\n\nexport type SendTransactionParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<\n    TChainOverride extends Chain ? TChainOverride : TChain\n  >,\n  'from'\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type SendTransactionReturnType = Hash\n\nexport type SendTransactionErrorType =\n  | ParseAccountErrorType\n  | GetTransactionErrorReturnType<\n      | AssertCurrentChainErrorType\n      | AssertRequestErrorType\n      | GetChainIdErrorType\n      | PrepareTransactionRequestErrorType\n      | SendRawTransactionReturnType\n      | SignTransactionErrorType\n      | RequestErrorType\n    >\n  | ErrorType\n\n/**\n * Creates, signs, and sends a new transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await sendTransaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransaction<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TChainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: SendTransactionParameters<TChain, TAccount, TChainOverride>,\n): Promise<SendTransactionReturnType> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    accessList,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/sendTransaction',\n    })\n  const account = parseAccount(account_)\n\n  try {\n    assertRequest(args as AssertRequestParameters)\n\n    let chainId\n    if (chain !== null) {\n      chainId = await getAction(client, getChainId, 'getChainId')({})\n      assertCurrentChain({\n        currentChainId: chainId,\n        chain,\n      })\n    }\n\n    if (account.type === 'local') {\n      // Prepare the request for signing (assign appropriate fees, etc.)\n      const request = await getAction(\n        client,\n        prepareTransactionRequest,\n        'prepareTransactionRequest',\n      )({\n        account,\n        accessList,\n        chain,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value,\n        ...rest,\n      } as any)\n\n      if (!chainId)\n        chainId = await getAction(client, getChainId, 'getChainId')({})\n\n      const serializer = chain?.serializers?.transaction\n      const serializedTransaction = (await account.signTransaction(\n        {\n          ...request,\n          chainId,\n        } as TransactionSerializable,\n        { serializer },\n      )) as Hash\n      return await getAction(\n        client,\n        sendRawTransaction,\n        'sendRawTransaction',\n      )({\n        serializedTransaction,\n      })\n    }\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      accessList,\n      data,\n      from: account.address,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n    return await client.request({\n      method: 'eth_sendTransaction',\n      params: [request],\n    })\n  } catch (err) {\n    throw getTransactionError(err as BaseError, {\n      ...args,\n      account,\n      chain: args.chain || undefined,\n    })\n  }\n}\n","import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignMessageErrorType as SignMessageErrorType_account } from '../../accounts/utils/signMessage.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex, SignableMessage } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type ToHexErrorType,\n  stringToHex,\n  toHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type SignMessageParameters<\n  TAccount extends Account | undefined = Account | undefined,\n> = GetAccountParameter<TAccount> & {\n  message: SignableMessage\n}\n\nexport type SignMessageReturnType = Hex\n\nexport type SignMessageErrorType =\n  | ParseAccountErrorType\n  | RequestErrorType\n  | SignMessageErrorType_account\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signMessage.html\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data.html#personal-sign)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * With the calculated signature, you can:\n * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage.html) to verify the signature,\n * - use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress.html) to recover the signing address from a signature.\n *\n * @param client - Client to use\n * @param parameters - {@link SignMessageParameters}\n * @returns The signed message. {@link SignMessageReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   message: 'hello world',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   message: 'hello world',\n * })\n */\nexport async function signMessage<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    account: account_ = client.account,\n    message,\n  }: SignMessageParameters<TAccount>,\n): Promise<SignMessageReturnType> {\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signMessage',\n    })\n  const account = parseAccount(account_)\n  if (account.type === 'local') return account.signMessage({ message })\n\n  const message_ = (() => {\n    if (typeof message === 'string') return stringToHex(message)\n    if (message.raw instanceof Uint8Array) return toHex(message.raw)\n    return message.raw\n  })()\n\n  return client.request({\n    method: 'personal_sign',\n    params: [message_, account.address],\n  })\n}\n","import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTransactionErrorType as SignTransactionErrorType_account } from '../../accounts/utils/signTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain, GetChain } from '../../types/chain.js'\nimport { type RpcTransactionRequest } from '../../types/rpc.js'\nimport type {\n  TransactionRequest,\n  TransactionSerializable,\n  TransactionSerialized,\n} from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type AssertCurrentChainErrorType,\n  assertCurrentChain,\n} from '../../utils/chain/assertCurrentChain.js'\nimport type { NumberToHexErrorType } from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { numberToHex } from '../../utils/index.js'\nimport {\n  type AssertRequestErrorType,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\n\nexport type SignTransactionParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<\n    TChainOverride extends Chain ? TChainOverride : TChain\n  >,\n  'from'\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type SignTransactionReturnType = TransactionSerialized\n\nexport type SignTransactionErrorType =\n  | ParseAccountErrorType\n  | AssertRequestErrorType\n  | GetChainIdErrorType\n  | AssertCurrentChainErrorType\n  | SignTransactionErrorType_account\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Signs a transaction.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTransaction.html\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param args - {@link SignTransactionParameters}\n * @returns The signed serialized tranasction. {@link SignTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function signTransaction<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TChainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: SignTransactionParameters<TChain, TAccount, TChainOverride>,\n): Promise<SignTransactionReturnType> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    ...transaction\n  } = args\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signTransaction',\n    })\n  const account = parseAccount(account_)\n\n  assertRequest({\n    account,\n    ...args,\n  })\n\n  const chainId = await getAction(client, getChainId, 'getChainId')({})\n  if (chain !== null)\n    assertCurrentChain({\n      currentChainId: chainId,\n      chain,\n    })\n\n  const formatters = chain?.formatters || client.chain?.formatters\n  const format =\n    formatters?.transactionRequest?.format || formatTransactionRequest\n\n  if (account.type === 'local')\n    return account.signTransaction(\n      {\n        ...transaction,\n        chainId,\n      } as unknown as TransactionSerializable,\n      { serializer: client.chain?.serializers?.transaction },\n    ) as Promise<SignTransactionReturnType>\n\n  return await client.request({\n    method: 'eth_signTransaction',\n    params: [\n      {\n        ...format(transaction as unknown as TransactionRequest),\n        chainId: numberToHex(chainId),\n        from: account.address,\n      } as unknown as RpcTransactionRequest,\n    ],\n  })\n}\n","import type { TypedData } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTypedDataErrorType as SignTypedDataErrorType_account } from '../../accounts/utils/signTypedData.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n} from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\nimport {\n  type GetTypesForEIP712DomainErrorType,\n  type ValidateTypedDataErrorType,\n  getTypesForEIP712Domain,\n  validateTypedData,\n} from '../../utils/typedData.js'\n\nexport type SignTypedDataParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n  TAccount extends Account | undefined = undefined,\n> = GetAccountParameter<TAccount> &\n  TypedDataDefinition<TTypedData, TPrimaryType>\n\nexport type SignTypedDataReturnType = Hex\n\nexport type SignTypedDataErrorType =\n  | AccountNotFoundErrorType\n  | ParseAccountErrorType\n  | GetTypesForEIP712DomainErrorType\n  | ValidateTypedDataErrorType\n  | StringifyErrorType\n  | SignTypedDataErrorType_account\n  | IsHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Signs typed data and calculates an Ethereum-specific signature in [https://eips.ethereum.org/EIPS/eip-712](https://eips.ethereum.org/EIPS/eip-712): `sign(keccak256(\"\\x19\\x01\" ‖ domainSeparator ‖ hashStruct(message)))`\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTypedData.html\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTypedData_v4`](https://docs.metamask.io/guide/signing-data.html#signtypeddata-v4)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param client - Client to use\n * @param parameters - {@link SignTypedDataParameters}\n * @returns The signed data. {@link SignTypedDataReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTypedData(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const signature = await signTypedData(client, {\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n */\nexport async function signTypedData<\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string,\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    account: account_ = client.account,\n    domain,\n    message,\n    primaryType,\n    types: types_,\n  }: SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>,\n): Promise<SignTypedDataReturnType> {\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signTypedData',\n    })\n  const account = parseAccount(account_)\n\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\n    ...(types_ as TTypedData),\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types,\n  } as TypedDataDefinition)\n\n  if (account.type === 'local')\n    return account.signTypedData({\n      domain,\n      primaryType,\n      types,\n      message,\n    } as TypedDataDefinition)\n\n  const typedData = stringify(\n    { domain: domain ?? {}, primaryType, types, message },\n    (_, value) => (isHex(value) ? value.toLowerCase() : value),\n  )\n  return client.request({\n    method: 'eth_signTypedData_v4',\n    params: [account.address, typedData],\n  })\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type SwitchChainParameters = {\n  /** ID of Chain to switch to */\n  id: Chain['id']\n}\n\nexport type SwitchChainErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Switch the target chain in a wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/switchChain.html\n * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-3326)\n *\n * @param client - Client to use\n * @param parameters - {@link SwitchChainParameters}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet, optimism } from 'viem/chains'\n * import { switchChain } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * await switchChain(client, { id: optimism.id })\n */\nexport async function switchChain<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(client: Client<Transport, TChain, TAccount>, { id }: SwitchChainParameters) {\n  await client.request({\n    method: 'wallet_switchEthereumChain',\n    params: [\n      {\n        chainId: numberToHex(id),\n      },\n    ],\n  })\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { WatchAssetParams } from '../../types/eip1193.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type WatchAssetParameters = WatchAssetParams\nexport type WatchAssetReturnType = boolean\nexport type WatchAssetErrorType = RequestErrorType | ErrorType\n\n/**\n * Adds an EVM chain to the wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/watchAsset.html\n * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-747)\n *\n * @param client - Client to use\n * @param parameters - {@link WatchAssetParameters}\n * @returns Boolean indicating if the token was successfully added. {@link WatchAssetReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchAsset } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const success = await watchAsset(client, {\n *   type: 'ERC20',\n *   options: {\n *     address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *     decimals: 18,\n *     symbol: 'WETH',\n *   },\n * })\n */\nexport async function watchAsset<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  params: WatchAssetParameters,\n): Promise<WatchAssetReturnType> {\n  const added = await client.request({\n    method: 'wallet_watchAsset',\n    params,\n  })\n  return added\n}\n","import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport type { ContractFunctionConfig, GetValue } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type SendTransactionErrorType,\n  type SendTransactionParameters,\n  type SendTransactionReturnType,\n  sendTransaction,\n} from './sendTransaction.js'\n\nexport type WriteContractParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string = string,\n  TChain extends Chain | undefined = Chain,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = ContractFunctionConfig<TAbi, TFunctionName, 'payable' | 'nonpayable'> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride> &\n  UnionOmit<\n    FormattedTransactionRequest<\n      TChainOverride extends Chain ? TChainOverride : TChain\n    >,\n    'from' | 'to' | 'data' | 'value'\n  > &\n  GetValue<\n    TAbi,\n    TFunctionName,\n    FormattedTransactionRequest<\n      TChainOverride extends Chain ? TChainOverride : TChain\n    >['value']\n  > & {\n    /** Data to append to the end of the calldata. Useful for adding a [\"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f). */\n    dataSuffix?: Hex\n  }\n\nexport type WriteContractReturnType = SendTransactionReturnType\n\nexport type WriteContractErrorType =\n  | EncodeFunctionDataErrorType\n  | SendTransactionErrorType\n  | ErrorType\n\n/**\n * Executes a write function on a contract.\n *\n * - Docs: https://viem.sh/docs/contract/writeContract.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/writing-to-contracts\n *\n * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms.html) is needed to be broadcast in order to change the state.\n *\n * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet.html) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n *\n * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract.html#usage) before you execute it.__\n *\n * @param client - Client to use\n * @param parameters - {@link WriteContractParameters}\n * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms.html#hash). {@link WriteContractReturnType}\n *\n * @example\n * import { createWalletClient, custom, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await writeContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * })\n *\n * @example\n * // With Validation\n * import { createWalletClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateContract, writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const { request } = await simulateContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * }\n * const hash = await writeContract(client, request)\n */\nexport async function writeContract<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  const TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string,\n  TChainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    abi,\n    address,\n    args,\n    dataSuffix,\n    functionName,\n    ...request\n  }: WriteContractParameters<\n    TAbi,\n    TFunctionName,\n    TChain,\n    TAccount,\n    TChainOverride\n  >,\n): Promise<WriteContractReturnType> {\n  const data = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as unknown as EncodeFunctionDataParameters<TAbi, TFunctionName>)\n  const hash = await getAction(\n    client,\n    sendTransaction,\n    'sendTransaction',\n  )({\n    data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n    to: address,\n    ...request,\n  } as unknown as SendTransactionParameters<TChain, TAccount, TChainOverride>)\n  return hash\n}\n","import type { Address } from 'abitype'\n\nimport type { JsonRpcAccount } from '../accounts/types.js'\nimport type { ParseAccountErrorType } from '../accounts/utils/parseAccount.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Account } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type {\n  EIP1193RequestFn,\n  EIP1474Methods,\n  RpcSchema,\n} from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport { parseAccount } from '../utils/accounts.js'\nimport { uid } from '../utils/uid.js'\nimport type { PublicActions } from './decorators/public.js'\nimport type { WalletActions } from './decorators/wallet.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type ClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n> = {\n  /** The Account to use for the Client. This will be used for Actions that require an account as an argument. */\n  account?: accountOrAddress | Account | Address | undefined\n  /** Flags for batch settings. */\n  batch?:\n    | {\n        /** Toggle to enable `eth_call` multicall aggregation. */\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined\n      }\n    | undefined\n  /**\n   * Time (in ms) that cached data will remain in memory.\n   * @default 4_000\n   */\n  cacheTime?: number | undefined\n  /** Chain for the client. */\n  chain?: Chain | undefined | chain\n  /** A key for the client. */\n  key?: string | undefined\n  /** A name for the client. */\n  name?: string | undefined\n  /**\n   * Frequency (in ms) for polling enabled actions & events.\n   * @default 4_000\n   */\n  pollingInterval?: number | undefined\n  /** The RPC transport */\n  transport: transport\n  /** The type of client. */\n  type?: string | undefined\n}\n\n// Actions that are used internally by other Actions (ie. `call` is used by `readContract`).\n// They are allowed to be extended, but must conform to their parameter & return type interfaces.\n// Example: an extended `call` action must accept `CallParameters` as parameters,\n// and conform to the `CallReturnType` return type.\ntype ExtendableProtectedActions = Pick<\n  PublicActions,\n  | 'call'\n  | 'createContractEventFilter'\n  | 'createEventFilter'\n  | 'estimateContractGas'\n  | 'estimateGas'\n  | 'getBlock'\n  | 'getBlockNumber'\n  | 'getChainId'\n  | 'getContractEvents'\n  | 'getEnsText'\n  | 'getFilterChanges'\n  | 'getGasPrice'\n  | 'getLogs'\n  | 'getTransaction'\n  | 'getTransactionCount'\n  | 'getTransactionReceipt'\n  | 'prepareTransactionRequest'\n  | 'readContract'\n  | 'sendRawTransaction'\n  | 'simulateContract'\n  | 'uninstallFilter'\n  | 'watchBlockNumber'\n  | 'watchContractEvent'\n> &\n  Pick<WalletActions, 'sendTransaction' | 'writeContract'>\n\n// TODO: Move `transport` to slot index 2 since `chain` and `account` used more frequently.\n// Otherwise, we end up with a lot of `Client<Transport, chain, account>` in actions.\nexport type Client<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n  extended extends Extended | undefined = Extended | undefined,\n> = Client_Base<transport, chain, account, rpcSchema> &\n  (extended extends Extended ? extended : unknown) & {\n    extend: <\n      const client extends Extended & Partial<ExtendableProtectedActions>,\n    >(\n      fn: (\n        client: Client<transport, chain, account, rpcSchema, extended>,\n      ) => client,\n    ) => Client<\n      transport,\n      chain,\n      account,\n      rpcSchema,\n      Prettify<client> & (extended extends Extended ? extended : unknown)\n    >\n  }\n\ntype Client_Base<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = {\n  /** The Account of the Client. */\n  account: account\n  /** Flags for batch settings. */\n  batch?: ClientConfig['batch']\n  /** Time (in ms) that cached data will remain in memory. */\n  cacheTime: number\n  /** Chain for the client. */\n  chain: chain\n  /** A key for the client. */\n  key: string\n  /** A name for the client. */\n  name: string\n  /** Frequency (in ms) for polling enabled actions & events. Defaults to 4_000 milliseconds. */\n  pollingInterval: number\n  /** Request function wrapped with friendly error handling */\n  request: EIP1193RequestFn<\n    rpcSchema extends undefined ? EIP1474Methods : rpcSchema\n  >\n  /** The RPC transport */\n  transport: ReturnType<transport>['config'] & ReturnType<transport>['value']\n  /** The type of client. */\n  type: string\n  /** A unique ID for the client. */\n  uid: string\n}\n\ntype Extended = Prettify<\n  // disallow redefining base properties\n  { [_ in keyof Client_Base]?: undefined } & {\n    [key: string]: unknown\n  }\n>\n\nexport type MulticallBatchOptions = {\n  /** The maximum size (in bytes) for each calldata chunk. @default 1_024 */\n  batchSize?: number | undefined\n  /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\n  wait?: number | undefined\n}\n\nexport type CreateClientErrorType = ParseAccountErrorType | ErrorType\n\n/**\n * Creates a base client with the given transport.\n */\nexport function createClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n>(\n  parameters: ClientConfig<transport, chain, accountOrAddress>,\n): Prettify<\n  Client<\n    transport,\n    chain,\n    accountOrAddress extends Address\n      ? Prettify<JsonRpcAccount<accountOrAddress>>\n      : accountOrAddress\n  >\n>\n\nexport function createClient(parameters: ClientConfig): Client {\n  const {\n    batch,\n    cacheTime = parameters.pollingInterval ?? 4_000,\n    key = 'base',\n    name = 'Base Client',\n    pollingInterval = 4_000,\n    type = 'base',\n  } = parameters\n\n  const chain = parameters.chain\n  const account = parameters.account\n    ? parseAccount(parameters.account)\n    : undefined\n  const { config, request, value } = parameters.transport({\n    chain,\n    pollingInterval,\n  })\n  const transport = { ...config, ...value }\n\n  const client = {\n    account,\n    batch,\n    cacheTime,\n    chain,\n    key,\n    name,\n    pollingInterval,\n    request,\n    transport,\n    type,\n    uid: uid(),\n  }\n\n  function extend(base: typeof client) {\n    type ExtendFn = (base: typeof client) => unknown\n    return (extendFn: ExtendFn) => {\n      const extended = extendFn(base) as Extended\n      for (const key in client) delete extended[key]\n      const combined = { ...base, ...extended }\n      return Object.assign(combined, { extend: extend(combined) })\n    }\n  }\n\n  return Object.assign(client, { extend: extend(client) as any })\n}\n","import type { ErrorType } from '../errors/utils.js'\nimport type { Chain } from '../types/chain.js'\nimport type { PublicRpcSchema } from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  createClient,\n} from './createClient.js'\nimport { type PublicActions, publicActions } from './decorators/public.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type PublicClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n> = Prettify<\n  Pick<\n    ClientConfig<transport, chain>,\n    | 'batch'\n    | 'cacheTime'\n    | 'chain'\n    | 'key'\n    | 'name'\n    | 'pollingInterval'\n    | 'transport'\n  >\n>\n\nexport type PublicClient<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n> = Prettify<\n  Client<\n    transport,\n    chain,\n    undefined,\n    PublicRpcSchema,\n    PublicActions<transport, chain>\n  >\n>\n\nexport type CreatePublicClientErrorType = CreateClientErrorType | ErrorType\n\n/**\n * Creates a Public Client with a given [Transport](https://viem.sh/docs/clients/intro.html) configured for a [Chain](https://viem.sh/docs/clients/chains.html).\n *\n * - Docs: https://viem.sh/docs/clients/public.html\n *\n * A Public Client is an interface to \"public\" [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](/docs/actions/public/introduction).\n *\n * @param config - {@link PublicClientConfig}\n * @returns A Public Client. {@link PublicClient}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n */\nexport function createPublicClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n>(\n  parameters: PublicClientConfig<transport, chain>,\n): PublicClient<transport, chain>\n\nexport function createPublicClient(\n  parameters: PublicClientConfig,\n): PublicClient {\n  const { key = 'public', name = 'Public Client' } = parameters\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    type: 'publicClient',\n  })\n  return client.extend(publicActions)\n}\n","import type { Address } from 'abitype'\n\nimport type { Account } from '../accounts/types.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ParseAccount } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { TestRpcSchema } from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  createClient,\n} from './createClient.js'\nimport { type TestActions, testActions } from './decorators/test.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type TestClientMode = 'anvil' | 'hardhat' | 'ganache'\n\nexport type TestClientConfig<\n  mode extends TestClientMode = TestClientMode,\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n> = Prettify<\n  Pick<\n    ClientConfig<transport, chain, accountOrAddress>,\n    | 'account'\n    | 'cacheTime'\n    | 'chain'\n    | 'key'\n    | 'name'\n    | 'pollingInterval'\n    | 'transport'\n  > & {\n    /** Mode of the test client. */\n    mode: mode | ('anvil' | 'hardhat' | 'ganache') // TODO: Type utility that expands `TestClientMode`\n  }\n>\n\nexport type TestClient<\n  TMode extends TestClientMode = TestClientMode,\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TIncludeActions extends boolean = true,\n> = Prettify<\n  { mode: TMode } & Client<\n    transport,\n    chain,\n    TAccount,\n    TestRpcSchema<TMode>,\n    TIncludeActions extends true ? TestActions : Record<string, unknown>\n  >\n>\n\nexport type CreateTestClientErrorType = CreateClientErrorType | ErrorType\n\n/**\n * @description Creates a test client with a given transport.\n */\n/**\n * Creates a Test Client with a given [Transport](https://viem.sh/docs/clients/intro.html) configured for a [Chain](https://viem.sh/docs/clients/chains.html).\n *\n * - Docs: https://viem.sh/docs/clients/test.html\n *\n * A Test Client is an interface to \"test\" JSON-RPC API methods accessible through a local Ethereum test node such as [Anvil](https://book.getfoundry.sh/anvil/) or [Hardhat](https://hardhat.org/) such as mining blocks, impersonating accounts, setting fees, etc through [Test Actions](https://viem.sh/docs/actions/test/introduction.html).\n *\n * @param config - {@link TestClientConfig}\n * @returns A Test Client. {@link TestClient}\n *\n * @example\n * import { createTestClient, custom } from 'viem'\n * import { foundry } from 'viem/chains'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: foundry,\n *   transport: http(),\n * })\n */\nexport function createTestClient<\n  mode extends 'anvil' | 'hardhat' | 'ganache', // TODO: Type utility that expands `TestClientMode`\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n>(\n  parameters: TestClientConfig<mode, transport, chain, accountOrAddress>,\n): TestClient<mode, transport, chain, ParseAccount<accountOrAddress>>\n\nexport function createTestClient(parameters: TestClientConfig): TestClient {\n  const { key = 'test', name = 'Test Client', mode } = parameters\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    type: 'testClient',\n  })\n  return client.extend((config) => ({\n    mode,\n    ...testActions({ mode })(config),\n  }))\n}\n","import type { Address } from 'abitype'\n\nimport type { Account } from '../accounts/types.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ParseAccount } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { WalletRpcSchema } from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  createClient,\n} from './createClient.js'\nimport { type WalletActions, walletActions } from './decorators/wallet.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type WalletClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n> = Prettify<\n  Pick<\n    ClientConfig<transport, chain, accountOrAddress>,\n    | 'account'\n    | 'cacheTime'\n    | 'chain'\n    | 'key'\n    | 'name'\n    | 'pollingInterval'\n    | 'transport'\n  >\n>\n\nexport type WalletClient<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = Prettify<\n  Client<\n    transport,\n    chain,\n    account,\n    WalletRpcSchema,\n    WalletActions<chain, account>\n  >\n>\n\nexport type CreateWalletClientErrorType = CreateClientErrorType | ErrorType\n\n/**\n * Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro.html) configured for a [Chain](https://viem.sh/docs/clients/chains.html).\n *\n * - Docs: https://viem.sh/docs/clients/wallet.html\n *\n * A Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction.html).\n *\n * The Wallet Client supports signing over:\n * - [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet.html#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\n * - [Local Accounts](https://viem.sh/docs/clients/wallet.html#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\n *\n * @param config - {@link WalletClientConfig}\n * @returns A Wallet Client. {@link WalletClient}\n *\n * @example\n * // JSON-RPC Account\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * @example\n * // Local Account\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…')\n *   chain: mainnet,\n *   transport: http(),\n * })\n */\nexport function createWalletClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n>(\n  parameters: WalletClientConfig<transport, chain, accountOrAddress>,\n): WalletClient<transport, chain, ParseAccount<accountOrAddress>>\n\nexport function createWalletClient(\n  parameters: WalletClientConfig,\n): WalletClient {\n  const { key = 'wallet', name = 'Wallet Client', transport } = parameters\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    transport: (opts) => transport({ ...opts, retryCount: 0 }),\n    type: 'walletClient',\n  })\n  return client.extend(walletActions)\n}\n","import type { Abi, AbiEvent } from 'abitype'\n\nimport {\n  type GetEnsAddressParameters,\n  type GetEnsAddressReturnType,\n  getEnsAddress,\n} from '../../actions/ens/getEnsAddress.js'\nimport {\n  type GetEnsAvatarParameters,\n  type GetEnsAvatarReturnType,\n  getEnsAvatar,\n} from '../../actions/ens/getEnsAvatar.js'\nimport {\n  type GetEnsNameParameters,\n  type GetEnsNameReturnType,\n  getEnsName,\n} from '../../actions/ens/getEnsName.js'\nimport {\n  type GetEnsResolverParameters,\n  type GetEnsResolverReturnType,\n  getEnsResolver,\n} from '../../actions/ens/getEnsResolver.js'\nimport {\n  type GetEnsTextParameters,\n  type GetEnsTextReturnType,\n  getEnsText,\n} from '../../actions/ens/getEnsText.js'\nimport {\n  type CallParameters,\n  type CallReturnType,\n  call,\n} from '../../actions/public/call.js'\nimport {\n  type CreateBlockFilterReturnType,\n  createBlockFilter,\n} from '../../actions/public/createBlockFilter.js'\nimport {\n  type CreateContractEventFilterParameters,\n  type CreateContractEventFilterReturnType,\n  createContractEventFilter,\n} from '../../actions/public/createContractEventFilter.js'\nimport {\n  type CreateEventFilterParameters,\n  type CreateEventFilterReturnType,\n  createEventFilter,\n} from '../../actions/public/createEventFilter.js'\nimport {\n  type CreatePendingTransactionFilterReturnType,\n  createPendingTransactionFilter,\n} from '../../actions/public/createPendingTransactionFilter.js'\nimport {\n  type EstimateContractGasParameters,\n  type EstimateContractGasReturnType,\n  estimateContractGas,\n} from '../../actions/public/estimateContractGas.js'\nimport {\n  type EstimateFeesPerGasParameters,\n  type EstimateFeesPerGasReturnType,\n  estimateFeesPerGas,\n} from '../../actions/public/estimateFeesPerGas.js'\nimport {\n  type EstimateGasParameters,\n  type EstimateGasReturnType,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport {\n  type EstimateMaxPriorityFeePerGasParameters,\n  type EstimateMaxPriorityFeePerGasReturnType,\n  estimateMaxPriorityFeePerGas,\n} from '../../actions/public/estimateMaxPriorityFeePerGas.js'\nimport {\n  type GetBalanceParameters,\n  type GetBalanceReturnType,\n  getBalance,\n} from '../../actions/public/getBalance.js'\nimport {\n  type GetBlockParameters,\n  type GetBlockReturnType,\n  getBlock,\n} from '../../actions/public/getBlock.js'\nimport {\n  type GetBlockNumberParameters,\n  type GetBlockNumberReturnType,\n  getBlockNumber,\n} from '../../actions/public/getBlockNumber.js'\nimport {\n  type GetBlockTransactionCountParameters,\n  type GetBlockTransactionCountReturnType,\n  getBlockTransactionCount,\n} from '../../actions/public/getBlockTransactionCount.js'\nimport {\n  type GetBytecodeParameters,\n  type GetBytecodeReturnType,\n  getBytecode,\n} from '../../actions/public/getBytecode.js'\nimport {\n  type GetChainIdReturnType,\n  getChainId,\n} from '../../actions/public/getChainId.js'\nimport {\n  type GetContractEventsParameters,\n  type GetContractEventsReturnType,\n  getContractEvents,\n} from '../../actions/public/getContractEvents.js'\nimport {\n  type GetFeeHistoryParameters,\n  type GetFeeHistoryReturnType,\n  getFeeHistory,\n} from '../../actions/public/getFeeHistory.js'\nimport {\n  type GetFilterChangesParameters,\n  type GetFilterChangesReturnType,\n  getFilterChanges,\n} from '../../actions/public/getFilterChanges.js'\nimport {\n  type GetFilterLogsParameters,\n  type GetFilterLogsReturnType,\n  getFilterLogs,\n} from '../../actions/public/getFilterLogs.js'\nimport {\n  type GetGasPriceReturnType,\n  getGasPrice,\n} from '../../actions/public/getGasPrice.js'\nimport {\n  type GetLogsParameters,\n  type GetLogsReturnType,\n  getLogs,\n} from '../../actions/public/getLogs.js'\nimport {\n  type GetProofParameters,\n  type GetProofReturnType,\n  getProof,\n} from '../../actions/public/getProof.js'\nimport {\n  type GetStorageAtParameters,\n  type GetStorageAtReturnType,\n  getStorageAt,\n} from '../../actions/public/getStorageAt.js'\nimport {\n  type GetTransactionParameters,\n  type GetTransactionReturnType,\n  getTransaction,\n} from '../../actions/public/getTransaction.js'\nimport {\n  type GetTransactionConfirmationsParameters,\n  type GetTransactionConfirmationsReturnType,\n  getTransactionConfirmations,\n} from '../../actions/public/getTransactionConfirmations.js'\nimport {\n  type GetTransactionCountParameters,\n  type GetTransactionCountReturnType,\n  getTransactionCount,\n} from '../../actions/public/getTransactionCount.js'\nimport {\n  type GetTransactionReceiptParameters,\n  type GetTransactionReceiptReturnType,\n  getTransactionReceipt,\n} from '../../actions/public/getTransactionReceipt.js'\nimport {\n  type MulticallParameters,\n  type MulticallReturnType,\n  multicall,\n} from '../../actions/public/multicall.js'\nimport {\n  type ReadContractParameters,\n  type ReadContractReturnType,\n  readContract,\n} from '../../actions/public/readContract.js'\nimport {\n  type SimulateContractParameters,\n  type SimulateContractReturnType,\n  simulateContract,\n} from '../../actions/public/simulateContract.js'\nimport {\n  type UninstallFilterParameters,\n  type UninstallFilterReturnType,\n  uninstallFilter,\n} from '../../actions/public/uninstallFilter.js'\nimport {\n  type VerifyMessageParameters,\n  type VerifyMessageReturnType,\n  verifyMessage,\n} from '../../actions/public/verifyMessage.js'\nimport {\n  type VerifyTypedDataParameters,\n  type VerifyTypedDataReturnType,\n  verifyTypedData,\n} from '../../actions/public/verifyTypedData.js'\nimport {\n  type WaitForTransactionReceiptParameters,\n  type WaitForTransactionReceiptReturnType,\n  waitForTransactionReceipt,\n} from '../../actions/public/waitForTransactionReceipt.js'\nimport {\n  type WatchBlockNumberParameters,\n  type WatchBlockNumberReturnType,\n  watchBlockNumber,\n} from '../../actions/public/watchBlockNumber.js'\nimport {\n  type WatchBlocksParameters,\n  type WatchBlocksReturnType,\n  watchBlocks,\n} from '../../actions/public/watchBlocks.js'\nimport {\n  type WatchContractEventParameters,\n  type WatchContractEventReturnType,\n  watchContractEvent,\n} from '../../actions/public/watchContractEvent.js'\nimport {\n  type WatchEventParameters,\n  type WatchEventReturnType,\n  watchEvent,\n} from '../../actions/public/watchEvent.js'\nimport {\n  type WatchPendingTransactionsParameters,\n  type WatchPendingTransactionsReturnType,\n  watchPendingTransactions,\n} from '../../actions/public/watchPendingTransactions.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  type PrepareTransactionRequestReturnType,\n  prepareTransactionRequest,\n} from '../../actions/wallet/prepareTransactionRequest.js'\nimport {\n  type SendRawTransactionParameters,\n  type SendRawTransactionReturnType,\n  sendRawTransaction,\n} from '../../actions/wallet/sendRawTransaction.js'\nimport type { Account } from '../../types/account.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractFunctionConfig,\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { FeeValuesType } from '../../types/fee.js'\nimport type { FilterType } from '../../types/filter.js'\nimport type { Client } from '../createClient.js'\nimport type { Transport } from '../transports/createTransport.js'\n\nexport type PublicActions<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n> = {\n  /**\n   * Executes a new message call immediately without submitting a transaction to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/call.html\n   * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\n   *\n   * @param args - {@link CallParameters}\n   * @returns The call data. {@link CallReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const data = await client.call({\n   *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n   *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   * })\n   */\n  call: (parameters: CallParameters<TChain>) => Promise<CallReturnType>\n  /**\n   * Creates a Filter to listen for new block hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createBlockFilter.html\n   * - JSON-RPC Methods: [`eth_newBlockFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newBlockFilter)\n   *\n   * @returns Filter. {@link CreateBlockFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, createBlockFilter, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await createBlockFilter(client)\n   * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\n   */\n  createBlockFilter: () => Promise<CreateBlockFilterReturnType>\n  /**\n   * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs.html).\n   *\n   * - Docs: https://viem.sh/docs/contract/createContractEventFilter.html\n   *\n   * @param args - {@link CreateContractEventFilterParameters}\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types.html#filter). {@link CreateContractEventFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createContractEventFilter({\n   *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n   * })\n   */\n  createContractEventFilter: <\n    const TAbi extends Abi | readonly unknown[],\n    TEventName extends string | undefined,\n    TArgs extends MaybeExtractEventArgsFromAbi<TAbi, TEventName> | undefined,\n    TStrict extends boolean | undefined = undefined,\n    TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: CreateContractEventFilterParameters<\n      TAbi,\n      TEventName,\n      TArgs,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >,\n  ) => Promise<\n    CreateContractEventFilterReturnType<\n      TAbi,\n      TEventName,\n      TArgs,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >\n  >\n  /**\n   * Creates a [`Filter`](https://viem.sh/docs/glossary/types.html#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createEventFilter.html\n   * - JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\n   *\n   * @param args - {@link CreateEventFilterParameters}\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types.html#filter). {@link CreateEventFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n   * })\n   */\n  createEventFilter: <\n    const TAbiEvent extends AbiEvent | undefined = undefined,\n    const TAbiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n    TStrict extends boolean | undefined = undefined,\n    TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n    _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n    _Args extends\n      | MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n      | undefined = undefined,\n  >(\n    args?: CreateEventFilterParameters<\n      TAbiEvent,\n      TAbiEvents,\n      TStrict,\n      TFromBlock,\n      TToBlock,\n      _EventName,\n      _Args\n    >,\n  ) => Promise<\n    CreateEventFilterReturnType<\n      TAbiEvent,\n      TAbiEvents,\n      TStrict,\n      TFromBlock,\n      TToBlock,\n      _EventName,\n      _Args\n    >\n  >\n  /**\n   * Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter.html\n   * - JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\n   *\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types.html#filter). {@link CreateBlockFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createPendingTransactionFilter()\n   * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'transaction' }\n   */\n  createPendingTransactionFilter: () => Promise<CreatePendingTransactionFilterReturnType>\n  /**\n   * Estimates the gas required to successfully execute a contract write function call.\n   *\n   * - Docs: https://viem.sh/docs/contract/estimateContractGas.html\n   *\n   * @remarks\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public.html) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n   *\n   * @param args - {@link EstimateContractGasParameters}\n   * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gas = await client.estimateContractGas({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint() public']),\n   *   functionName: 'mint',\n   *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n   * })\n   */\n  estimateContractGas: <\n    TChain extends Chain | undefined,\n    const TAbi extends Abi | readonly unknown[],\n    TFunctionName extends string,\n  >(\n    args: EstimateContractGasParameters<TAbi, TFunctionName, TChain, TAccount>,\n  ) => Promise<EstimateContractGasReturnType>\n  /**\n   * Estimates the gas necessary to complete a transaction without submitting it to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateGas.html\n   * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n   *\n   * @param args - {@link EstimateGasParameters}\n   * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseEther } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gasEstimate = await client.estimateGas({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: parseEther('1'),\n   * })\n   */\n  estimateGas: (\n    args: EstimateGasParameters<TChain, TAccount>,\n  ) => Promise<EstimateGasReturnType>\n  /**\n   * Returns the balance of an address in wei.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBalance.html\n   * - JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\n   *\n   * @remarks\n   * You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther.html).\n   *\n   * ```ts\n   * const balance = await getBalance(client, {\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   blockTag: 'safe'\n   * })\n   * const balanceAsEther = formatEther(balance)\n   * // \"6.942\"\n   * ```\n   *\n   * @param args - {@link GetBalanceParameters}\n   * @returns The balance of the address in wei. {@link GetBalanceReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const balance = await client.getBalance({\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   * // 10000000000000000000000n (wei)\n   */\n  getBalance: (args: GetBalanceParameters) => Promise<GetBalanceReturnType>\n  /**\n   * Returns information about a block at a block number, hash, or tag.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlock.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/fetching-blocks\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) for `blockNumber` & `blockTag`.\n   *   - Calls [`eth_getBlockByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash) for `blockHash`.\n   *\n   * @param args - {@link GetBlockParameters}\n   * @returns Information about the block. {@link GetBlockReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const block = await client.getBlock()\n   */\n  getBlock: <\n    TIncludeTransactions extends boolean = false,\n    TBlockTag extends BlockTag = 'latest',\n  >(\n    args?: GetBlockParameters<TIncludeTransactions, TBlockTag>,\n  ) => Promise<GetBlockReturnType<TChain, TIncludeTransactions, TBlockTag>>\n  /**\n   * Returns the number of the most recent block seen.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlockNumber.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/fetching-blocks\n   * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\n   *\n   * @param args - {@link GetBlockNumberParameters}\n   * @returns The number of the block. {@link GetBlockNumberReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const blockNumber = await client.getBlockNumber()\n   * // 69420n\n   */\n  getBlockNumber: (\n    args?: GetBlockNumberParameters,\n  ) => Promise<GetBlockNumberReturnType>\n  /**\n   * Returns the number of Transactions at a block number, hash, or tag.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount.html\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n   *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n   *\n   * @param args - {@link GetBlockTransactionCountParameters}\n   * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const count = await client.getBlockTransactionCount()\n   */\n  getBlockTransactionCount: (\n    args?: GetBlockTransactionCountParameters,\n  ) => Promise<GetBlockTransactionCountReturnType>\n  /**\n   * Retrieves the bytecode at an address.\n   *\n   * - Docs: https://viem.sh/docs/contract/getBytecode.html\n   * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\n   *\n   * @param args - {@link GetBytecodeParameters}\n   * @returns The contract's bytecode. {@link GetBytecodeReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const code = await client.getBytecode({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   * })\n   */\n  getBytecode: (args: GetBytecodeParameters) => Promise<GetBytecodeReturnType>\n  /**\n   * Returns the chain ID associated with the current network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getChainId.html\n   * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n   *\n   * @returns The current chain ID. {@link GetChainIdReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const chainId = await client.getChainId()\n   * // 1\n   */\n  getChainId: () => Promise<GetChainIdReturnType>\n  /**\n   * Returns a list of event logs emitted by a contract.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getContractEvents.html\n   * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link GetContractEventsParameters}\n   * @returns A list of event logs. {@link GetContractEventsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { wagmiAbi } from './abi'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const logs = await client.getContractEvents(client, {\n   *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *  abi: wagmiAbi,\n   *  eventName: 'Transfer'\n   * })\n   */\n  getContractEvents: <\n    const TAbi extends Abi | readonly unknown[],\n    TEventName extends string | undefined = undefined,\n    TStrict extends boolean | undefined = undefined,\n    TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetContractEventsParameters<\n      TAbi,\n      TEventName,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >,\n  ) => Promise<\n    GetContractEventsReturnType<TAbi, TEventName, TStrict, TFromBlock, TToBlock>\n  >\n  /**\n   * Gets address for ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n   *\n   * @param args - {@link GetEnsAddressParameters}\n   * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensAddress = await client.getEnsAddress({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n   */\n  getEnsAddress: (\n    args: GetEnsAddressParameters,\n  ) => Promise<GetEnsAddressReturnType>\n  /**\n   * Gets the avatar of an ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsAvatar.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls [`getEnsText`](https://viem.sh/docs/ens/actions/getEnsText.html) with `key` set to `'avatar'`.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n   *\n   * @param args - {@link GetEnsAvatarParameters}\n   * @returns Avatar URI or `null` if not found. {@link GetEnsAvatarReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensAvatar = await client.getEnsAvatar({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\n   */\n  getEnsAvatar: (\n    args: GetEnsAvatarParameters,\n  ) => Promise<GetEnsAvatarReturnType>\n  /**\n   * Gets primary name for specified address.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsName.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n   *\n   * @param args - {@link GetEnsNameParameters}\n   * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensName = await client.getEnsName({\n   *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n   * })\n   * // 'wevm.eth'\n   */\n  getEnsName: (args: GetEnsNameParameters) => Promise<GetEnsNameReturnType>\n  /**\n   * Gets resolver for ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n   *\n   * @param args - {@link GetEnsResolverParameters}\n   * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const resolverAddress = await client.getEnsResolver({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\n   */\n  getEnsResolver: (\n    args: GetEnsResolverParameters,\n  ) => Promise<GetEnsResolverReturnType>\n  /**\n   * Gets a text record for specified ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n   *\n   * @param args - {@link GetEnsTextParameters}\n   * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const twitterRecord = await client.getEnsText({\n   *   name: normalize('wevm.eth'),\n   *   key: 'com.twitter',\n   * })\n   * // 'wagmi_sh'\n   */\n  getEnsText: (args: GetEnsTextParameters) => Promise<GetEnsTextReturnType>\n  /**\n   * Returns a collection of historical gas information.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFeeHistory.html\n   * - JSON-RPC Methods: [`eth_feeHistory`](https://docs.alchemy.com/reference/eth-feehistory)\n   *\n   * @param args - {@link GetFeeHistoryParameters}\n   * @returns The gas estimate (in wei). {@link GetFeeHistoryReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const feeHistory = await client.getFeeHistory({\n   *   blockCount: 4,\n   *   rewardPercentiles: [25, 75],\n   * })\n   */\n  getFeeHistory: (\n    args: GetFeeHistoryParameters,\n  ) => Promise<GetFeeHistoryReturnType>\n  /**\n   * Returns an estimate for the fees per gas for a transaction to be included\n   * in the next block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas.html\n   *\n   * @param client - Client to use\n   * @param parameters - {@link EstimateFeesPerGasParameters}\n   * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const maxPriorityFeePerGas = await client.estimateFeesPerGas()\n   * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n   */\n  estimateFeesPerGas: <\n    TChainOverride extends Chain | undefined = undefined,\n    TType extends FeeValuesType = 'eip1559',\n  >(\n    args?: EstimateFeesPerGasParameters<TChain, TChainOverride, TType>,\n  ) => Promise<EstimateFeesPerGasReturnType>\n  /**\n   * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFilterChanges.html\n   * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\n   *\n   * @remarks\n   * A Filter can be created from the following actions:\n   *\n   * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter.html)\n   * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter.html)\n   * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter.html)\n   * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter.html)\n   *\n   * Depending on the type of filter, the return value will be different:\n   *\n   * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\n   * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\n   * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\n   *\n   * @param args - {@link GetFilterChangesParameters}\n   * @returns Logs or hashes. {@link GetFilterChangesReturnType}\n   *\n   * @example\n   * // Blocks\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createBlockFilter()\n   * const hashes = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Contract Events\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createContractEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n   *   eventName: 'Transfer',\n   * })\n   * const logs = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Raw Events\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n   * })\n   * const logs = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Transactions\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createPendingTransactionFilter()\n   * const hashes = await client.getFilterChanges({ filter })\n   */\n  getFilterChanges: <\n    TFilterType extends FilterType,\n    const TAbi extends Abi | readonly unknown[] | undefined,\n    TEventName extends string | undefined,\n    TStrict extends boolean | undefined = undefined,\n    TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetFilterChangesParameters<\n      TFilterType,\n      TAbi,\n      TEventName,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >,\n  ) => Promise<\n    GetFilterChangesReturnType<\n      TFilterType,\n      TAbi,\n      TEventName,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >\n  >\n  /**\n   * Returns a list of event logs since the filter was created.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFilterLogs.html\n   * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\n   *\n   * @remarks\n   * `getFilterLogs` is only compatible with **event filters**.\n   *\n   * @param args - {@link GetFilterLogsParameters}\n   * @returns A list of event logs. {@link GetFilterLogsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n   * })\n   * const logs = await client.getFilterLogs({ filter })\n   */\n  getFilterLogs: <\n    const TAbi extends Abi | readonly unknown[] | undefined,\n    TEventName extends string | undefined,\n    TStrict extends boolean | undefined = undefined,\n    TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetFilterLogsParameters<\n      TAbi,\n      TEventName,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >,\n  ) => Promise<\n    GetFilterLogsReturnType<TAbi, TEventName, TStrict, TFromBlock, TToBlock>\n  >\n  /**\n   * Returns the current price of gas (in wei).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getGasPrice.html\n   * - JSON-RPC Methods: [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice)\n   *\n   * @returns The gas price (in wei). {@link GetGasPriceReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gasPrice = await client.getGasPrice()\n   */\n  getGasPrice: () => Promise<GetGasPriceReturnType>\n  /**\n   * Returns a list of event logs matching the provided parameters.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getLogs.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/filters-and-logs/event-logs\n   * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n   *\n   * @param args - {@link GetLogsParameters}\n   * @returns A list of event logs. {@link GetLogsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const logs = await client.getLogs()\n   */\n  getLogs: <\n    const TAbiEvent extends AbiEvent | undefined = undefined,\n    const TAbiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n    TStrict extends boolean | undefined = undefined,\n    TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args?: GetLogsParameters<\n      TAbiEvent,\n      TAbiEvents,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >,\n  ) => Promise<\n    GetLogsReturnType<TAbiEvent, TAbiEvents, TStrict, TFromBlock, TToBlock>\n  >\n  /**\n   * Returns the account and storage values of the specified account including the Merkle-proof.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getProof.html\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link GetProofParameters}\n   * @returns Proof data. {@link GetProofReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const block = await client.getProof({\n   *  address: '0x...',\n   *  storageKeys: ['0x...'],\n   * })\n   */\n  getProof: (args: GetProofParameters) => Promise<GetProofReturnType>\n  /**\n   * Returns an estimate for the max priority fee per gas (in wei) for a transaction\n   * to be included in the next block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas.html\n   *\n   * @param client - Client to use\n   * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const maxPriorityFeePerGas = await client.estimateMaxPriorityFeePerGas()\n   * // 10000000n\n   */\n  estimateMaxPriorityFeePerGas: <\n    TChainOverride extends Chain | undefined = undefined,\n  >(\n    args?: EstimateMaxPriorityFeePerGasParameters<TChain, TChainOverride>,\n  ) => Promise<EstimateMaxPriorityFeePerGasReturnType>\n  /**\n   * Returns the value from a storage slot at a given address.\n   *\n   * - Docs: https://viem.sh/docs/contract/getStorageAt.html\n   * - JSON-RPC Methods: [`eth_getStorageAt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat)\n   *\n   * @param args - {@link GetStorageAtParameters}\n   * @returns The value of the storage slot. {@link GetStorageAtReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { getStorageAt } from 'viem/contract'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const code = await client.getStorageAt({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   slot: toHex(0),\n   * })\n   */\n  getStorageAt: (\n    args: GetStorageAtParameters,\n  ) => Promise<GetStorageAtReturnType>\n  /**\n   * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) given a hash or block identifier.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransaction.html\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\n   *\n   * @param args - {@link GetTransactionParameters}\n   * @returns The transaction information. {@link GetTransactionReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transaction = await client.getTransaction({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransaction: <TBlockTag extends BlockTag = 'latest'>(\n    args: GetTransactionParameters<TBlockTag>,\n  ) => Promise<GetTransactionReturnType<TChain, TBlockTag>>\n  /**\n   * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations.html\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\n   *\n   * @param args - {@link GetTransactionConfirmationsParameters}\n   * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const confirmations = await client.getTransactionConfirmations({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransactionConfirmations: (\n    args: GetTransactionConfirmationsParameters<TChain>,\n  ) => Promise<GetTransactionConfirmationsReturnType>\n  /**\n   * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms.html#transaction) an Account has broadcast / sent.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionCount.html\n   * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n   *\n   * @param args - {@link GetTransactionCountParameters}\n   * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionCount = await client.getTransactionCount({\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  getTransactionCount: (\n    args: GetTransactionCountParameters,\n  ) => Promise<GetTransactionCountReturnType>\n  /**\n   * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms.html#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt.html\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt)\n   *\n   * @param args - {@link GetTransactionReceiptParameters}\n   * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionReceipt = await client.getTransactionReceipt({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransactionReceipt: (\n    args: GetTransactionReceiptParameters,\n  ) => Promise<GetTransactionReceiptReturnType<TChain>>\n  /**\n   * Similar to [`readContract`](https://viem.sh/docs/contract/readContract.html), but batches up multiple functions on a contract in a single RPC call via the [`multicall3` contract](https://github.com/mds1/multicall).\n   *\n   * - Docs: https://viem.sh/docs/contract/multicall.html\n   *\n   * @param args - {@link MulticallParameters}\n   * @returns An array of results with accompanying status. {@link MulticallReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const abi = parseAbi([\n   *   'function balanceOf(address) view returns (uint256)',\n   *   'function totalSupply() view returns (uint256)',\n   * ])\n   * const result = await client.multicall({\n   *   contracts: [\n   *     {\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *       abi,\n   *       functionName: 'balanceOf',\n   *       args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n   *     },\n   *     {\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *       abi,\n   *       functionName: 'totalSupply',\n   *     },\n   *   ],\n   * })\n   * // [{ result: 424122n, status: 'success' }, { result: 1000000n, status: 'success' }]\n   */\n  multicall: <\n    TContracts extends ContractFunctionConfig[],\n    TAllowFailure extends boolean = true,\n  >(\n    args: MulticallParameters<TContracts, TAllowFailure>,\n  ) => Promise<MulticallReturnType<TContracts, TAllowFailure>>\n  /**\n   * Prepares a transaction request for signing.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest.html\n   *\n   * @param args - {@link PrepareTransactionRequestParameters}\n   * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   */\n  prepareTransactionRequest: <\n    TChainOverride extends Chain | undefined = undefined,\n  >(\n    args: PrepareTransactionRequestParameters<TChain, TAccount, TChainOverride>,\n  ) => Promise<PrepareTransactionRequestReturnType>\n  /**\n   * Calls a read-only function on a contract, and returns the response.\n   *\n   * - Docs: https://viem.sh/docs/contract/readContract.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/reading-contracts\n   *\n   * @remarks\n   * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n   *\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public.html) to call the [`call` action](https://viem.sh/docs/actions/public/call.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n   *\n   * @param args - {@link ReadContractParameters}\n   * @returns The response from the contract. Type is inferred. {@link ReadContractReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { readContract } from 'viem/contract'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const result = await client.readContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\n   *   functionName: 'balanceOf',\n   *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n   * })\n   * // 424122n\n   */\n  readContract: <\n    const TAbi extends Abi | readonly unknown[],\n    TFunctionName extends string,\n  >(\n    args: ReadContractParameters<TAbi, TFunctionName>,\n  ) => Promise<ReadContractReturnType<TAbi, TFunctionName>>\n  /**\n   * Sends a **signed** transaction to the network\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction.html\n   * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SendRawTransactionParameters}\n   * @returns The transaction hash. {@link SendRawTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { sendRawTransaction } from 'viem/wallet'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const hash = await client.sendRawTransaction({\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n   * })\n   */\n  sendRawTransaction: (\n    args: SendRawTransactionParameters,\n  ) => Promise<SendRawTransactionReturnType>\n  /**\n   * Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\n   *\n   * - Docs: https://viem.sh/docs/contract/simulateContract.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/writing-to-contracts\n   *\n   * @remarks\n   * This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract.html), but also supports contract write functions.\n   *\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public.html) to call the [`call` action](https://viem.sh/docs/actions/public/call.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n   *\n   * @param args - {@link SimulateContractParameters}\n   * @returns The simulation result and write request. {@link SimulateContractReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const result = await client.simulateContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32) view returns (uint32)']),\n   *   functionName: 'mint',\n   *   args: ['69420'],\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  simulateContract: <\n    const TAbi extends Abi | readonly unknown[],\n    TFunctionName extends string,\n    TChainOverride extends Chain | undefined = undefined,\n  >(\n    args: SimulateContractParameters<\n      TAbi,\n      TFunctionName,\n      TChain,\n      TChainOverride\n    >,\n  ) => Promise<\n    SimulateContractReturnType<TAbi, TFunctionName, TChain, TChainOverride>\n  >\n  verifyMessage: (\n    args: VerifyMessageParameters,\n  ) => Promise<VerifyMessageReturnType>\n  verifyTypedData: (\n    args: VerifyTypedDataParameters,\n  ) => Promise<VerifyTypedDataReturnType>\n  /**\n   * Destroys a Filter that was created from one of the following Actions:\n   *\n   * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter.html)\n   * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter.html)\n   * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter.html)\n   *\n   * - Docs: https://viem.sh/docs/actions/public/uninstallFilter.html\n   * - JSON-RPC Methods: [`eth_uninstallFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_uninstallFilter)\n   *\n   * @param args - {@link UninstallFilterParameters}\n   * @returns A boolean indicating if the Filter was successfully uninstalled. {@link UninstallFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { createPendingTransactionFilter, uninstallFilter } from 'viem/public'\n   *\n   * const filter = await client.createPendingTransactionFilter()\n   * const uninstalled = await client.uninstallFilter({ filter })\n   * // true\n   */\n  uninstallFilter: (\n    args: UninstallFilterParameters,\n  ) => Promise<UninstallFilterReturnType>\n  /**\n   * Waits for the [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) to be included on a [Block](https://viem.sh/docs/glossary/terms.html#block) (one confirmation), and then returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms.html#transaction-receipt). If the Transaction reverts, then the action will throw an error.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/waitForTransactionReceipt.html\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n   * - JSON-RPC Methods:\n   *   - Polls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt) on each block until it has been processed.\n   *   - If a Transaction has been replaced:\n   *     - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) and extracts the transactions\n   *     - Checks if one of the Transactions is a replacement\n   *     - If so, calls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt).\n   *\n   * @remarks\n   * The `waitForTransactionReceipt` action additionally supports Replacement detection (e.g. sped up Transactions).\n   *\n   * Transactions can be replaced when a user modifies their transaction in their wallet (to speed up or cancel). Transactions are replaced when they are sent from the same nonce.\n   *\n   * There are 3 types of Transaction Replacement reasons:\n   *\n   * - `repriced`: The gas price has been modified (e.g. different `maxFeePerGas`)\n   * - `cancelled`: The Transaction has been cancelled (e.g. `value === 0n`)\n   * - `replaced`: The Transaction has been replaced (e.g. different `value` or `data`)\n   *\n   * @param args - {@link WaitForTransactionReceiptParameters}\n   * @returns The transaction receipt. {@link WaitForTransactionReceiptReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionReceipt = await client.waitForTransactionReceipt({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  waitForTransactionReceipt: (\n    args: WaitForTransactionReceiptParameters<TChain>,\n  ) => Promise<WaitForTransactionReceiptReturnType<TChain>>\n  /**\n   * Watches and returns incoming block numbers.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchBlockNumber.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\n   * - JSON-RPC Methods:\n   *   - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n   *\n   * @param args - {@link WatchBlockNumberParameters}\n   * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchBlockNumber({\n   *   onBlockNumber: (blockNumber) => console.log(blockNumber),\n   * })\n   */\n  watchBlockNumber: (\n    args: WatchBlockNumberParameters,\n  ) => WatchBlockNumberReturnType\n  /**\n   * Watches and returns information for incoming blocks.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchBlocks.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\n   * - JSON-RPC Methods:\n   *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n   *\n   * @param args - {@link WatchBlocksParameters}\n   * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchBlocks({\n   *   onBlock: (block) => console.log(block),\n   * })\n   */\n  watchBlocks: <\n    TIncludeTransactions extends boolean = false,\n    TBlockTag extends BlockTag = 'latest',\n  >(\n    args: WatchBlocksParameters<\n      TTransport,\n      TChain,\n      TIncludeTransactions,\n      TBlockTag\n    >,\n  ) => WatchBlocksReturnType\n  /**\n   * Watches and returns emitted contract event logs.\n   *\n   * - Docs: https://viem.sh/docs/contract/watchContractEvent.html\n   *\n   * @remarks\n   * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent.html#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent.html#onLogs).\n   *\n   * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter.html) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs.html) instead.\n   *\n   * @param args - {@link WatchContractEventParameters}\n   * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = client.watchContractEvent({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n   *   eventName: 'Transfer',\n   *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n   *   onLogs: (logs) => console.log(logs),\n   * })\n   */\n  watchContractEvent: <\n    const TAbi extends Abi | readonly unknown[],\n    TEventName extends string,\n    TStrict extends boolean | undefined = undefined,\n  >(\n    args: WatchContractEventParameters<TAbi, TEventName, TStrict>,\n  ) => WatchContractEventReturnType\n  /**\n   * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms.html#event-log).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchEvent.html\n   * - JSON-RPC Methods:\n   *   - **RPC Provider supports `eth_newFilter`:**\n   *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n   *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n   *   - **RPC Provider does not support `eth_newFilter`:**\n   *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n   *\n   * @remarks\n   * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent.html#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent.html#onLogs).\n   *\n   * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter.html) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs.html) instead.\n   *\n   * @param args - {@link WatchEventParameters}\n   * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = client.watchEvent({\n   *   onLogs: (logs) => console.log(logs),\n   * })\n   */\n  watchEvent: <\n    const TAbiEvent extends AbiEvent | undefined = undefined,\n    const TAbiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n    TStrict extends boolean | undefined = undefined,\n  >(\n    args: WatchEventParameters<TAbiEvent, TAbiEvents, TStrict>,\n  ) => WatchEventReturnType\n  /**\n   * Watches and returns pending transaction hashes.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchPendingTransactions.html\n   * - JSON-RPC Methods:\n   *   - When `poll: true`\n   *     - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\n   *     - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newPendingTransactions\"` event.\n   *\n   * @remarks\n   * This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions.html#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions.html#ontransactions).\n   *\n   * @param args - {@link WatchPendingTransactionsParameters}\n   * @returns A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchPendingTransactions({\n   *   onTransactions: (hashes) => console.log(hashes),\n   * })\n   */\n  watchPendingTransactions: (\n    args: WatchPendingTransactionsParameters<TTransport>,\n  ) => WatchPendingTransactionsReturnType\n}\n\nexport function publicActions<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n>(\n  client: Client<TTransport, TChain, TAccount>,\n): PublicActions<TTransport, TChain, TAccount> {\n  return {\n    call: (args) => call(client, args),\n    createBlockFilter: () => createBlockFilter(client),\n    createContractEventFilter: (args) =>\n      createContractEventFilter(client, args),\n    createEventFilter: (args) => createEventFilter(client, args),\n    createPendingTransactionFilter: () =>\n      createPendingTransactionFilter(client),\n    estimateContractGas: (args) => estimateContractGas(client, args as any),\n    estimateGas: (args) => estimateGas(client, args),\n    getBalance: (args) => getBalance(client, args),\n    getBlock: (args) => getBlock(client, args),\n    getBlockNumber: (args) => getBlockNumber(client, args),\n    getBlockTransactionCount: (args) => getBlockTransactionCount(client, args),\n    getBytecode: (args) => getBytecode(client, args),\n    getChainId: () => getChainId(client),\n    getContractEvents: (args) => getContractEvents(client, args),\n    getEnsAddress: (args) => getEnsAddress(client, args),\n    getEnsAvatar: (args) => getEnsAvatar(client, args),\n    getEnsName: (args) => getEnsName(client, args),\n    getEnsResolver: (args) => getEnsResolver(client, args),\n    getEnsText: (args) => getEnsText(client, args),\n    getFeeHistory: (args) => getFeeHistory(client, args),\n    estimateFeesPerGas: (args) => estimateFeesPerGas(client, args),\n    getFilterChanges: (args) => getFilterChanges(client, args),\n    getFilterLogs: (args) => getFilterLogs(client, args),\n    getGasPrice: () => getGasPrice(client),\n    getLogs: (args) => getLogs(client, args as any),\n    getProof: (args) => getProof(client, args),\n    estimateMaxPriorityFeePerGas: (args) =>\n      estimateMaxPriorityFeePerGas(client, args),\n    getStorageAt: (args) => getStorageAt(client, args),\n    getTransaction: (args) => getTransaction(client, args),\n    getTransactionConfirmations: (args) =>\n      getTransactionConfirmations(client, args),\n    getTransactionCount: (args) => getTransactionCount(client, args),\n    getTransactionReceipt: (args) => getTransactionReceipt(client, args),\n    multicall: (args) => multicall(client, args as any) as any,\n    prepareTransactionRequest: (args) =>\n      prepareTransactionRequest(client as any, args as any),\n    readContract: (args) => readContract(client, args),\n    sendRawTransaction: (args) => sendRawTransaction(client, args),\n    simulateContract: (args) => simulateContract(client, args),\n    verifyMessage: (args) => verifyMessage(client, args),\n    verifyTypedData: (args) => verifyTypedData(client, args),\n    uninstallFilter: (args) => uninstallFilter(client, args),\n    waitForTransactionReceipt: (args) =>\n      waitForTransactionReceipt(client, args),\n    watchBlocks: (args) => watchBlocks(client, args),\n    watchBlockNumber: (args) => watchBlockNumber(client, args),\n    watchContractEvent: (args) => watchContractEvent(client, args),\n    watchEvent: (args) => watchEvent(client, args),\n    watchPendingTransactions: (args) => watchPendingTransactions(client, args),\n  }\n}\n","import {\n  type DropTransactionParameters,\n  dropTransaction,\n} from '../../actions/test/dropTransaction.js'\nimport {\n  type DumpStateReturnType,\n  dumpState,\n} from '../../actions/test/dumpState.js'\nimport {\n  type GetAutomineReturnType,\n  getAutomine,\n} from '../../actions/test/getAutomine.js'\nimport {\n  type GetTxpoolContentReturnType,\n  getTxpoolContent,\n} from '../../actions/test/getTxpoolContent.js'\nimport {\n  type GetTxpoolStatusReturnType,\n  getTxpoolStatus,\n} from '../../actions/test/getTxpoolStatus.js'\nimport {\n  type ImpersonateAccountParameters,\n  impersonateAccount,\n} from '../../actions/test/impersonateAccount.js'\nimport {\n  type IncreaseTimeParameters,\n  increaseTime,\n} from '../../actions/test/increaseTime.js'\nimport {\n  type InspectTxpoolReturnType,\n  inspectTxpool,\n} from '../../actions/test/inspectTxpool.js'\nimport {\n  type LoadStateParameters,\n  type LoadStateReturnType,\n  loadState,\n} from '../../actions/test/loadState.js'\nimport { type MineParameters, mine } from '../../actions/test/mine.js'\nimport { removeBlockTimestampInterval } from '../../actions/test/removeBlockTimestampInterval.js'\nimport { type ResetParameters, reset } from '../../actions/test/reset.js'\nimport { type RevertParameters, revert } from '../../actions/test/revert.js'\nimport {\n  type SendUnsignedTransactionParameters,\n  type SendUnsignedTransactionReturnType,\n  sendUnsignedTransaction,\n} from '../../actions/test/sendUnsignedTransaction.js'\nimport { setAutomine } from '../../actions/test/setAutomine.js'\nimport {\n  type SetBalanceParameters,\n  setBalance,\n} from '../../actions/test/setBalance.js'\nimport {\n  type SetBlockGasLimitParameters,\n  setBlockGasLimit,\n} from '../../actions/test/setBlockGasLimit.js'\nimport {\n  type SetBlockTimestampIntervalParameters,\n  setBlockTimestampInterval,\n} from '../../actions/test/setBlockTimestampInterval.js'\nimport { type SetCodeParameters, setCode } from '../../actions/test/setCode.js'\nimport {\n  type SetCoinbaseParameters,\n  setCoinbase,\n} from '../../actions/test/setCoinbase.js'\nimport {\n  type SetIntervalMiningParameters,\n  setIntervalMining,\n} from '../../actions/test/setIntervalMining.js'\nimport { setLoggingEnabled } from '../../actions/test/setLoggingEnabled.js'\nimport {\n  type SetMinGasPriceParameters,\n  setMinGasPrice,\n} from '../../actions/test/setMinGasPrice.js'\nimport {\n  type SetNextBlockBaseFeePerGasParameters,\n  setNextBlockBaseFeePerGas,\n} from '../../actions/test/setNextBlockBaseFeePerGas.js'\nimport {\n  type SetNextBlockTimestampParameters,\n  setNextBlockTimestamp,\n} from '../../actions/test/setNextBlockTimestamp.js'\nimport {\n  type SetNonceParameters,\n  setNonce,\n} from '../../actions/test/setNonce.js'\nimport { setRpcUrl } from '../../actions/test/setRpcUrl.js'\nimport {\n  type SetStorageAtParameters,\n  setStorageAt,\n} from '../../actions/test/setStorageAt.js'\nimport { snapshot } from '../../actions/test/snapshot.js'\nimport {\n  type StopImpersonatingAccountParameters,\n  stopImpersonatingAccount,\n} from '../../actions/test/stopImpersonatingAccount.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Quantity } from '../../types/rpc.js'\nimport type { Client } from '../createClient.js'\nimport type { TestClientMode } from '../createTestClient.js'\nimport type { Transport } from '../transports/createTransport.js'\n\nexport type TestActions = {\n  /**\n   * Removes a transaction from the mempool.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/dropTransaction.html\n   *\n   * @param args - {@link DropTransactionParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.dropTransaction({\n   *   hash: '0xe58dceb6b20b03965bb678e27d141e151d7d4efc2334c2d6a49b9fac523f7364'\n   * })\n   */\n  dropTransaction: (args: DropTransactionParameters) => Promise<void>\n  /**\n   * Serializes the current state (including contracts code, contract's storage,\n   * accounts properties, etc.) into a savable data blob.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/dumpState.html\n   *\n   * @param client - Client to use\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.dumpState()\n   */\n  dumpState: () => Promise<DumpStateReturnType>\n  /**\n   * Returns the automatic mining status of the node.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/getAutomine.html\n   *\n   * @returns Whether or not the node is auto mining. {@link GetAutomineReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const isAutomining = await client.getAutomine()\n   */\n  getAutomine: () => Promise<GetAutomineReturnType>\n  /**\n   * Returns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/getTxpoolContent.html\n   *\n   * @returns Transaction pool content. {@link GetTxpoolContentReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const content = await client.getTxpoolContent()\n   */\n  getTxpoolContent: () => Promise<GetTxpoolContentReturnType>\n  /**\n   * Returns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/getTxpoolStatus.html\n   *\n   * @returns Transaction pool status. {@link GetTxpoolStatusReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const status = await client.getTxpoolStatus()\n   */\n  getTxpoolStatus: () => Promise<GetTxpoolStatusReturnType>\n  /**\n   * Impersonate an account or contract address. This lets you send transactions from that account even if you don't have access to its private key.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/impersonateAccount.html\n   *\n   * @param args - {@link ImpersonateAccountParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.impersonateAccount({\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  impersonateAccount: (args: ImpersonateAccountParameters) => Promise<void>\n  /**\n   * Jump forward in time by the given amount of time, in seconds.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/increaseTime.html\n   *\n   * @param args – {@link IncreaseTimeParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.increaseTime({\n   *   seconds: 420,\n   * })\n   */\n  increaseTime: (args: IncreaseTimeParameters) => Promise<Quantity>\n  /**\n   * Returns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/inspectTxpool.html\n   *\n   * @returns Transaction pool inspection data. {@link InspectTxpoolReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const data = await client.inspectTxpool()\n   */\n  inspectTxpool: () => Promise<InspectTxpoolReturnType>\n  /**\n   * Adds state previously dumped with `dumpState` to the current chain.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/loadState.html\n   *\n   * @param client - Client to use\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.loadState({ state: '0x...' })\n   */\n  loadState: (args: LoadStateParameters) => Promise<LoadStateReturnType>\n  /**\n   * Mine a specified number of blocks.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/mine.html\n   *\n   * @param client - Client to use\n   * @param args – {@link MineParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.mine({ blocks: 1 })\n   */\n  mine: (args: MineParameters) => Promise<void>\n  /**\n   * Removes [`setBlockTimestampInterval`](https://viem.sh/docs/actions/test/setBlockTimestampInterval.html) if it exists.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/removeBlockTimestampInterval.html\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   * import { removeBlockTimestampInterval } from 'viem/test'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.removeBlockTimestampInterval()\n   */\n  removeBlockTimestampInterval: () => Promise<void>\n  /**\n   * Resets fork back to its original state.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/reset.html\n   *\n   * @param args – {@link ResetParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.reset({ blockNumber: 69420n })\n   */\n  reset: (args?: ResetParameters) => Promise<void>\n  /**\n   * Revert the state of the blockchain at the current block.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/revert.html\n   *\n   * @param args – {@link RevertParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.revert({ id: '0x…' })\n   */\n  revert: (args: RevertParameters) => Promise<void>\n  /**\n   * Returns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/getTxpoolContent.html\n   *\n   * @param args – {@link SendUnsignedTransactionParameters}\n   * @returns The transaction hash. {@link SendUnsignedTransactionReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const hash = await client.sendUnsignedTransaction({\n   *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   */\n  sendUnsignedTransaction: <TChain extends Chain | undefined>(\n    args: SendUnsignedTransactionParameters<TChain>,\n  ) => Promise<SendUnsignedTransactionReturnType>\n  /**\n   * Enables or disables the automatic mining of new blocks with each new transaction submitted to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setAutomine.html\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setAutomine()\n   */\n  setAutomine: (args: boolean) => Promise<void>\n  /**\n   * Modifies the balance of an account.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setBalance.html\n   *\n   * @param args – {@link SetBalanceParameters}\n   *\n   * @example\n   * import { createTestClient, http, parseEther } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setBalance({\n   *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n   *   value: parseEther('1'),\n   * })\n   */\n  setBalance: (args: SetBalanceParameters) => Promise<void>\n  /**\n   * Sets the block's gas limit.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setBlockGasLimit.html\n   *\n   * @param args – {@link SetBlockGasLimitParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setBlockGasLimit({ gasLimit: 420_000n })\n   */\n  setBlockGasLimit: (args: SetBlockGasLimitParameters) => Promise<void>\n  /**\n   * Similar to [`increaseTime`](https://viem.sh/docs/actions/test/increaseTime.html), but sets a block timestamp `interval`. The timestamp of future blocks will be computed as `lastBlock_timestamp` + `interval`.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setBlockTimestampInterval.html\n   *\n   * @param args – {@link SetBlockTimestampIntervalParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setBlockTimestampInterval({ interval: 5 })\n   */\n  setBlockTimestampInterval: (\n    args: SetBlockTimestampIntervalParameters,\n  ) => Promise<void>\n  /**\n   * Modifies the bytecode stored at an account's address.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setCode.html\n   *\n   * @param args – {@link SetCodeParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setCode({\n   *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n   *   bytecode: '0x60806040526000600355600019600955600c80546001600160a01b031916737a250d5630b4cf539739df…',\n   * })\n   */\n  setCode: (args: SetCodeParameters) => Promise<void>\n  /**\n   * Sets the coinbase address to be used in new blocks.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setCoinbase.html\n   *\n   * @param args – {@link SetCoinbaseParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setCoinbase({\n   *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n   * })\n   */\n  setCoinbase: (args: SetCoinbaseParameters) => Promise<void>\n  /**\n   * Sets the automatic mining interval (in seconds) of blocks. Setting the interval to 0 will disable automatic mining.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setIntervalMining.html\n   *\n   * @param args – {@link SetIntervalMiningParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setIntervalMining({ interval: 5 })\n   */\n  setIntervalMining: (args: SetIntervalMiningParameters) => Promise<void>\n  /**\n   * Enable or disable logging on the test node network.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setLoggingEnabled.html\n   *\n   * @param client - Client to use\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setLoggingEnabled()\n   */\n  setLoggingEnabled: (args: boolean) => Promise<void>\n  /**\n   * Change the minimum gas price accepted by the network (in wei).\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setMinGasPrice.html\n   *\n   * Note: `setMinGasPrice` can only be used on clients that do not have EIP-1559 enabled.\n   *\n   * @param args – {@link SetBlockGasLimitParameters}\n   *\n   * @example\n   * import { createTestClient, http, parseGwei } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setMinGasPrice({\n   *   gasPrice: parseGwei('20'),\n   * })\n   */\n  setMinGasPrice: (args: SetMinGasPriceParameters) => Promise<void>\n  /**\n   * Sets the next block's base fee per gas.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setNextBlockBaseFeePerGas.html\n   *\n   * @param args – {@link SetNextBlockBaseFeePerGasParameters}\n   *\n   * @example\n   * import { createTestClient, http, parseGwei } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setNextBlockBaseFeePerGas({\n   *   baseFeePerGas: parseGwei('20'),\n   * })\n   */\n  setNextBlockBaseFeePerGas: (\n    args: SetNextBlockBaseFeePerGasParameters,\n  ) => Promise<void>\n  /**\n   * Sets the next block's timestamp.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setNextBlockTimestamp.html\n   *\n   * @param args – {@link SetNextBlockTimestampParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setNextBlockTimestamp({ timestamp: 1671744314n })\n   */\n  setNextBlockTimestamp: (\n    args: SetNextBlockTimestampParameters,\n  ) => Promise<void>\n  /**\n   * Modifies (overrides) the nonce of an account.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setNonce.html\n   *\n   * @param args – {@link SetNonceParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setNonce({\n   *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n   *   nonce: 420,\n   * })\n   */\n  setNonce: (args: SetNonceParameters) => Promise<void>\n  /**\n   * Sets the backend RPC URL.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setRpcUrl.html\n   *\n   * @param jsonRpcUrl – RPC URL\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setRpcUrl('https://eth-mainnet.g.alchemy.com/v2')\n   */\n  setRpcUrl: (args: string) => Promise<void>\n  /**\n   * Writes to a slot of an account's storage.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setStorageAt.html\n   *\n   * @param args – {@link SetStorageAtParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setStorageAt({\n   *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n   *   index: 2,\n   *   value: '0x0000000000000000000000000000000000000000000000000000000000000069',\n   * })\n   */\n  setStorageAt: (args: SetStorageAtParameters) => Promise<void>\n  /**\n   * Snapshot the state of the blockchain at the current block.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/snapshot.html\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   * import { snapshot } from 'viem/test'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.snapshot()\n   */\n  snapshot: () => Promise<Quantity>\n  /**\n   * Stop impersonating an account after having previously used [`impersonateAccount`](https://viem.sh/docs/actions/test/impersonateAccount.html).\n   *\n   * - Docs: https://viem.sh/docs/actions/test/stopImpersonatingAccount.html\n   *\n   * @param args – {@link StopImpersonatingAccountParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   * import { stopImpersonatingAccount } from 'viem/test'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.stopImpersonatingAccount({\n   *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n   * })\n   */\n  stopImpersonatingAccount: (\n    args: StopImpersonatingAccountParameters,\n  ) => Promise<void>\n}\n\nexport function testActions<TMode extends TestClientMode>({\n  mode,\n}: { mode: TMode }): <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n>(\n  client: Client<TTransport, TChain, TAccount>,\n) => TestActions {\n  return <\n    TTransport extends Transport = Transport,\n    TChain extends Chain | undefined = Chain | undefined,\n    TAccount extends Account | undefined = Account | undefined,\n  >(\n    client_: Client<TTransport, TChain, TAccount>,\n  ): TestActions => {\n    const client = client_.extend(() => ({\n      mode,\n    }))\n    return {\n      dropTransaction: (args) => dropTransaction(client, args),\n      dumpState: () => dumpState(client),\n      getAutomine: () => getAutomine(client),\n      getTxpoolContent: () => getTxpoolContent(client),\n      getTxpoolStatus: () => getTxpoolStatus(client),\n      impersonateAccount: (args) => impersonateAccount(client, args),\n      increaseTime: (args) => increaseTime(client, args),\n      inspectTxpool: () => inspectTxpool(client),\n      loadState: (args) => loadState(client, args),\n      mine: (args) => mine(client, args),\n      removeBlockTimestampInterval: () => removeBlockTimestampInterval(client),\n      reset: (args) => reset(client, args),\n      revert: (args) => revert(client, args),\n      sendUnsignedTransaction: (args) =>\n        sendUnsignedTransaction(client, args as any),\n      setAutomine: (args) => setAutomine(client, args),\n      setBalance: (args) => setBalance(client, args),\n      setBlockGasLimit: (args) => setBlockGasLimit(client, args),\n      setBlockTimestampInterval: (args) =>\n        setBlockTimestampInterval(client, args),\n      setCode: (args) => setCode(client, args),\n      setCoinbase: (args) => setCoinbase(client, args),\n      setIntervalMining: (args) => setIntervalMining(client, args),\n      setLoggingEnabled: (args) => setLoggingEnabled(client, args),\n      setMinGasPrice: (args) => setMinGasPrice(client, args),\n      setNextBlockBaseFeePerGas: (args) =>\n        setNextBlockBaseFeePerGas(client, args),\n      setNextBlockTimestamp: (args) => setNextBlockTimestamp(client, args),\n      setNonce: (args) => setNonce(client, args),\n      setRpcUrl: (args) => setRpcUrl(client, args),\n      setStorageAt: (args) => setStorageAt(client, args),\n      snapshot: () => snapshot(client),\n      stopImpersonatingAccount: (args) =>\n        stopImpersonatingAccount(client, args),\n    }\n  }\n}\n","import type { Abi, TypedData } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type GetChainIdReturnType,\n  getChainId,\n} from '../../actions/public/getChainId.js'\nimport {\n  type AddChainParameters,\n  addChain,\n} from '../../actions/wallet/addChain.js'\nimport {\n  type DeployContractParameters,\n  type DeployContractReturnType,\n  deployContract,\n} from '../../actions/wallet/deployContract.js'\nimport {\n  type GetAddressesReturnType,\n  getAddresses,\n} from '../../actions/wallet/getAddresses.js'\nimport {\n  type GetPermissionsReturnType,\n  getPermissions,\n} from '../../actions/wallet/getPermissions.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  type PrepareTransactionRequestReturnType,\n  prepareTransactionRequest,\n} from '../../actions/wallet/prepareTransactionRequest.js'\nimport {\n  type RequestAddressesReturnType,\n  requestAddresses,\n} from '../../actions/wallet/requestAddresses.js'\nimport {\n  type RequestPermissionsParameters,\n  type RequestPermissionsReturnType,\n  requestPermissions,\n} from '../../actions/wallet/requestPermissions.js'\nimport {\n  type SendRawTransactionParameters,\n  type SendRawTransactionReturnType,\n  sendRawTransaction,\n} from '../../actions/wallet/sendRawTransaction.js'\nimport {\n  type SendTransactionParameters,\n  type SendTransactionReturnType,\n  sendTransaction,\n} from '../../actions/wallet/sendTransaction.js'\nimport {\n  type SignMessageParameters,\n  type SignMessageReturnType,\n  signMessage,\n} from '../../actions/wallet/signMessage.js'\nimport {\n  type SignTransactionParameters,\n  type SignTransactionReturnType,\n  signTransaction,\n} from '../../actions/wallet/signTransaction.js'\nimport {\n  type SignTypedDataParameters,\n  type SignTypedDataReturnType,\n  signTypedData,\n} from '../../actions/wallet/signTypedData.js'\nimport {\n  type SwitchChainParameters,\n  switchChain,\n} from '../../actions/wallet/switchChain.js'\nimport {\n  type WatchAssetParameters,\n  type WatchAssetReturnType,\n  watchAsset,\n} from '../../actions/wallet/watchAsset.js'\nimport {\n  type WriteContractParameters,\n  type WriteContractReturnType,\n  writeContract,\n} from '../../actions/wallet/writeContract.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Client } from '../createClient.js'\nimport type { Transport } from '../transports/createTransport.js'\n\nexport type WalletActions<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n> = {\n  /**\n   * Adds an EVM chain to the wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/addChain.html\n   * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\n   *\n   * @param args - {@link AddChainParameters}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { optimism } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   transport: custom(window.ethereum),\n   * })\n   * await client.addChain({ chain: optimism })\n   */\n  addChain: (args: AddChainParameters) => Promise<void>\n  /**\n   * Deploys a contract to the network, given bytecode and constructor arguments.\n   *\n   * - Docs: https://viem.sh/docs/contract/deployContract.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/deploying-contracts\n   *\n   * @param args - {@link DeployContractParameters}\n   * @returns The [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash. {@link DeployContractReturnType}\n   *\n   * @example\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const hash = await client.deployContract({\n   *   abi: [],\n   *   account: '0x…,\n   *   bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n   * })\n   */\n  deployContract: <\n    const TAbi extends Abi | readonly unknown[],\n    TChainOverride extends Chain | undefined = undefined,\n  >(\n    args: DeployContractParameters<TAbi, TChain, TAccount, TChainOverride>,\n  ) => Promise<DeployContractReturnType>\n  /**\n   * Returns a list of account addresses owned by the wallet or client.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/getAddresses.html\n   * - JSON-RPC Methods: [`eth_accounts`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_accounts)\n   *\n   * @returns List of account addresses owned by the wallet or client. {@link GetAddressesReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const accounts = await client.getAddresses()\n   */\n  getAddresses: () => Promise<GetAddressesReturnType>\n  /**\n   * Returns the chain ID associated with the current network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getChainId.html\n   * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n   *\n   * @returns The current chain ID. {@link GetChainIdReturnType}\n   *\n   * @example\n   * import { createWalletClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const chainId = await client.getChainId()\n   * // 1\n   */\n  getChainId: () => Promise<GetChainIdReturnType>\n  /**\n   * Gets the wallets current permissions.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/getPermissions.html\n   * - JSON-RPC Methods: [`wallet_getPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n   *\n   * @returns The wallet permissions. {@link GetPermissionsReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const permissions = await client.getPermissions()\n   */\n  getPermissions: () => Promise<GetPermissionsReturnType>\n  /**\n   * Prepares a transaction request for signing.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest.html\n   *\n   * @param args - {@link PrepareTransactionRequestParameters}\n   * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   */\n  prepareTransactionRequest: <\n    TChainOverride extends Chain | undefined = undefined,\n  >(\n    args: PrepareTransactionRequestParameters<TChain, TAccount, TChainOverride>,\n  ) => Promise<PrepareTransactionRequestReturnType>\n  /**\n   * Requests a list of accounts managed by a wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/requestAddresses.html\n   * - JSON-RPC Methods: [`eth_requestAccounts`](https://eips.ethereum.org/EIPS/eip-1102)\n   *\n   * Sends a request to the wallet, asking for permission to access the user's accounts. After the user accepts the request, it will return a list of accounts (addresses).\n   *\n   * This API can be useful for dapps that need to access the user's accounts in order to execute transactions or interact with smart contracts.\n   *\n   * @returns List of accounts managed by a wallet {@link RequestAddressesReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const accounts = await client.requestAddresses()\n   */\n  requestAddresses: () => Promise<RequestAddressesReturnType>\n  /**\n   * Requests permissions for a wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/requestPermissions.html\n   * - JSON-RPC Methods: [`wallet_requestPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n   *\n   * @param args - {@link RequestPermissionsParameters}\n   * @returns The wallet permissions. {@link RequestPermissionsReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const permissions = await client.requestPermissions({\n   *   eth_accounts: {}\n   * })\n   */\n  requestPermissions: (\n    args: RequestPermissionsParameters,\n  ) => Promise<RequestPermissionsReturnType>\n  /**\n   * Sends a **signed** transaction to the network\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction.html\n   * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SendRawTransactionParameters}\n   * @returns The transaction hash. {@link SendRawTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { sendRawTransaction } from 'viem/wallet'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const hash = await client.sendRawTransaction({\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n   * })\n   */\n  sendRawTransaction: (\n    args: SendRawTransactionParameters,\n  ) => Promise<SendRawTransactionReturnType>\n  /**\n   * Creates, signs, and sends a new transaction to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n   *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n   *\n   * @param args - {@link SendTransactionParameters}\n   * @returns The [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash. {@link SendTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const hash = await client.sendTransaction({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const hash = await client.sendTransaction({\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   */\n  sendTransaction: <TChainOverride extends Chain | undefined = undefined>(\n    args: SendTransactionParameters<TChain, TAccount, TChainOverride>,\n  ) => Promise<SendTransactionReturnType>\n  /**\n   * Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/signMessage.html\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data.html#personal-sign)\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\n   *\n   * With the calculated signature, you can:\n   * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage.html) to verify the signature,\n   * - use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress.html) to recover the signing address from a signature.\n   *\n   * @param args - {@link SignMessageParameters}\n   * @returns The signed message. {@link SignMessageReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const signature = await client.signMessage({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   message: 'hello world',\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const signature = await client.signMessage({\n   *   message: 'hello world',\n   * })\n   */\n  signMessage: (\n    args: SignMessageParameters<TAccount>,\n  ) => Promise<SignMessageReturnType>\n  /**\n   * Signs a transaction.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/signTransaction.html\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\n   *\n   * @param args - {@link SignTransactionParameters}\n   * @returns The signed message. {@link SignTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   * const signature = await client.signTransaction(request)\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   * const signature = await client.signTransaction(request)\n   */\n  signTransaction: <TChainOverride extends Chain | undefined = undefined>(\n    args: SignTransactionParameters<TChain, TAccount, TChainOverride>,\n  ) => Promise<SignTransactionReturnType>\n  /**\n   * Signs typed data and calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/signTypedData.html\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`eth_signTypedData_v4`](https://docs.metamask.io/guide/signing-data.html#signtypeddata-v4)\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\n   *\n   * @param client - Client to use\n   * @param args - {@link SignTypedDataParameters}\n   * @returns The signed data. {@link SignTypedDataReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const signature = await client.signTypedData({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   domain: {\n   *     name: 'Ether Mail',\n   *     version: '1',\n   *     chainId: 1,\n   *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n   *   },\n   *   types: {\n   *     Person: [\n   *       { name: 'name', type: 'string' },\n   *       { name: 'wallet', type: 'address' },\n   *     ],\n   *     Mail: [\n   *       { name: 'from', type: 'Person' },\n   *       { name: 'to', type: 'Person' },\n   *       { name: 'contents', type: 'string' },\n   *     ],\n   *   },\n   *   primaryType: 'Mail',\n   *   message: {\n   *     from: {\n   *       name: 'Cow',\n   *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n   *     },\n   *     to: {\n   *       name: 'Bob',\n   *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n   *     },\n   *     contents: 'Hello, Bob!',\n   *   },\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const signature = await client.signTypedData({\n   *   domain: {\n   *     name: 'Ether Mail',\n   *     version: '1',\n   *     chainId: 1,\n   *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n   *   },\n   *   types: {\n   *     Person: [\n   *       { name: 'name', type: 'string' },\n   *       { name: 'wallet', type: 'address' },\n   *     ],\n   *     Mail: [\n   *       { name: 'from', type: 'Person' },\n   *       { name: 'to', type: 'Person' },\n   *       { name: 'contents', type: 'string' },\n   *     ],\n   *   },\n   *   primaryType: 'Mail',\n   *   message: {\n   *     from: {\n   *       name: 'Cow',\n   *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n   *     },\n   *     to: {\n   *       name: 'Bob',\n   *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n   *     },\n   *     contents: 'Hello, Bob!',\n   *   },\n   * })\n   */\n  signTypedData: <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string,\n  >(\n    args: SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>,\n  ) => Promise<SignTypedDataReturnType>\n  /**\n   * Switch the target chain in a wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/switchChain.html\n   * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-3326)\n   *\n   * @param args - {@link SwitchChainParameters}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet, optimism } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * await client.switchChain({ id: optimism.id })\n   */\n  switchChain: (args: SwitchChainParameters) => Promise<void>\n  /**\n   * Adds an EVM chain to the wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/watchAsset.html\n   * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-747)\n   *\n   * @param args - {@link WatchAssetParameters}\n   * @returns Boolean indicating if the token was successfully added. {@link WatchAssetReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const success = await client.watchAsset({\n   *   type: 'ERC20',\n   *   options: {\n   *     address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n   *     decimals: 18,\n   *     symbol: 'WETH',\n   *   },\n   * })\n   */\n  watchAsset: (args: WatchAssetParameters) => Promise<WatchAssetReturnType>\n  /**\n   * Executes a write function on a contract.\n   *\n   * - Docs: https://viem.sh/docs/contract/writeContract.html\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/writing-to-contracts\n   *\n   * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms.html) is needed to be broadcast in order to change the state.\n   *\n   * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet.html) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n   *\n   * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract.html#usage) before you execute it.__\n   *\n   * @param args - {@link WriteContractParameters}\n   * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms.html#hash). {@link WriteContractReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const hash = await client.writeContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n   *   functionName: 'mint',\n   *   args: [69420],\n   * })\n   *\n   * @example\n   * // With Validation\n   * import { createWalletClient, custom, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const { request } = await client.simulateContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n   *   functionName: 'mint',\n   *   args: [69420],\n   * }\n   * const hash = await client.writeContract(request)\n   */\n  writeContract: <\n    const TAbi extends Abi | readonly unknown[],\n    TFunctionName extends string,\n    TChainOverride extends Chain | undefined = undefined,\n  >(\n    args: WriteContractParameters<\n      TAbi,\n      TFunctionName,\n      TChain,\n      TAccount,\n      TChainOverride\n    >,\n  ) => Promise<WriteContractReturnType>\n}\n\nexport function walletActions<\n  TTransport extends Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n>(\n  client: Client<TTransport, TChain, TAccount>,\n): WalletActions<TChain, TAccount> {\n  return {\n    addChain: (args) => addChain(client, args),\n    deployContract: (args) => deployContract(client, args),\n    getAddresses: () => getAddresses(client),\n    getChainId: () => getChainId(client),\n    getPermissions: () => getPermissions(client),\n    prepareTransactionRequest: (args) =>\n      prepareTransactionRequest(client as any, args as any),\n    requestAddresses: () => requestAddresses(client),\n    requestPermissions: (args) => requestPermissions(client, args),\n    sendRawTransaction: (args) => sendRawTransaction(client, args),\n    sendTransaction: (args) => sendTransaction(client, args),\n    signMessage: (args) => signMessage(client, args),\n    signTransaction: (args) => signTransaction(client, args),\n    signTypedData: (args) => signTypedData(client, args),\n    switchChain: (args) => switchChain(client, args),\n    watchAsset: (args) => watchAsset(client, args),\n    writeContract: (args) => writeContract(client, args),\n  }\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\nimport { buildRequest } from '../../utils/buildRequest.js'\nimport type { ClientConfig } from '../createClient.js'\n\nexport type TransportConfig<\n  TType extends string = string,\n  TEIP1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = {\n  /** The name of the transport. */\n  name: string\n  /** The key of the transport. */\n  key: string\n  /** The JSON-RPC request function that matches the EIP-1193 request spec. */\n  request: TEIP1193RequestFn\n  /** The base delay (in ms) between retries. */\n  retryDelay?: number\n  /** The max number of times to retry. */\n  retryCount?: number\n  /** The timeout (in ms) for requests. */\n  timeout?: number\n  /** The type of the transport. */\n  type: TType\n}\n\nexport type Transport<\n  TType extends string = string,\n  TRpcAttributes = Record<string, any>,\n  TEIP1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = <TChain extends Chain | undefined = Chain>({\n  chain,\n}: {\n  chain?: TChain\n  pollingInterval?: ClientConfig['pollingInterval']\n  retryCount?: TransportConfig['retryCount']\n  timeout?: TransportConfig['timeout']\n}) => {\n  config: TransportConfig<TType>\n  request: TEIP1193RequestFn\n  value?: TRpcAttributes\n}\n\nexport type CreateTransportErrorType = ErrorType\n\n/**\n * @description Creates an transport intended to be used with a client.\n */\nexport function createTransport<\n  TType extends string,\n  TRpcAttributes extends Record<string, any>,\n>(\n  {\n    key,\n    name,\n    request,\n    retryCount = 3,\n    retryDelay = 150,\n    timeout,\n    type,\n  }: TransportConfig<TType>,\n  value?: TRpcAttributes,\n): ReturnType<Transport<TType, TRpcAttributes>> {\n  return {\n    config: { key, name, request, retryCount, retryDelay, timeout, type },\n    request: buildRequest(request, { retryCount, retryDelay }),\n    value,\n  }\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport {\n  type CreateTransportErrorType,\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n\ntype EthereumProvider = { request(...args: any): Promise<any> }\n\nexport type CustomTransportConfig = {\n  /** The key of the transport. */\n  key?: TransportConfig['key']\n  /** The name of the transport. */\n  name?: TransportConfig['name']\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount']\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay']\n}\n\nexport type CustomTransport = Transport<\n  'custom',\n  {},\n  EthereumProvider['request']\n>\n\nexport type CustomTransportErrorType = CreateTransportErrorType | ErrorType\n\n/**\n * @description Creates a custom transport given an EIP-1193 compliant `request` attribute.\n */\nexport function custom<TProvider extends EthereumProvider>(\n  provider: TProvider,\n  config: CustomTransportConfig = {},\n): CustomTransport {\n  const { key = 'custom', name = 'Custom Provider', retryDelay } = config\n  return ({ retryCount: defaultRetryCount }) =>\n    createTransport({\n      key,\n      name,\n      request: provider.request.bind(provider),\n      retryCount: config.retryCount ?? defaultRetryCount,\n      retryDelay,\n      type: 'custom',\n    })\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport { isDeterministicError } from '../../utils/buildRequest.js'\nimport { wait } from '../../utils/wait.js'\n\nimport {\n  type CreateTransportErrorType,\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n// TODO: Narrow `method` & `params` types.\nexport type OnResponseFn = (\n  args: {\n    method: string\n    params: unknown[]\n    transport: ReturnType<Transport>\n  } & (\n    | {\n        error?: never\n        response: unknown\n        status: 'success'\n      }\n    | {\n        error: Error\n        response?: never\n        status: 'error'\n      }\n  ),\n) => void\n\ntype RankOptions = {\n  /**\n   * The polling interval (in ms) at which the ranker should ping the RPC URL.\n   * @default client.pollingInterval\n   */\n  interval?: number\n  /**\n   * The number of previous samples to perform ranking on.\n   * @default 10\n   */\n  sampleCount?: number\n  /**\n   * Timeout when sampling transports.\n   * @default 1_000\n   */\n  timeout?: number\n  /**\n   * Weights to apply to the scores. Weight values are proportional.\n   */\n  weights?: {\n    /**\n     * The weight to apply to the latency score.\n     * @default 0.3\n     */\n    latency?: number\n    /**\n     * The weight to apply to the stability score.\n     * @default 0.7\n     */\n    stability?: number\n  }\n}\n\nexport type FallbackTransportConfig = {\n  /** The key of the Fallback transport. */\n  key?: TransportConfig['key']\n  /** The name of the Fallback transport. */\n  name?: TransportConfig['name']\n  /** Toggle to enable ranking, or rank options. */\n  rank?: boolean | RankOptions\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount']\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay']\n}\n\nexport type FallbackTransport = Transport<\n  'fallback',\n  {\n    onResponse: (fn: OnResponseFn) => void\n    transports: ReturnType<Transport>[]\n  }\n>\n\nexport type FallbackTransportErrorType = CreateTransportErrorType | ErrorType\n\nexport function fallback(\n  transports_: Transport[],\n  config: FallbackTransportConfig = {},\n): FallbackTransport {\n  const {\n    key = 'fallback',\n    name = 'Fallback',\n    rank = false,\n    retryCount,\n    retryDelay,\n  } = config\n  return ({ chain, pollingInterval = 4_000, timeout }) => {\n    let transports = transports_\n\n    let onResponse: OnResponseFn = () => {}\n\n    const transport = createTransport(\n      {\n        key,\n        name,\n        async request({ method, params }) {\n          const fetch = async (i = 0): Promise<any> => {\n            const transport = transports[i]({ chain, retryCount: 0, timeout })\n            try {\n              const response = await transport.request({\n                method,\n                params,\n              } as any)\n\n              onResponse({\n                method,\n                params: params as unknown[],\n                response,\n                transport,\n                status: 'success',\n              })\n\n              return response\n            } catch (err) {\n              onResponse({\n                error: err as Error,\n                method,\n                params: params as unknown[],\n                transport,\n                status: 'error',\n              })\n\n              // If the error is deterministic, we don't need to fall back.\n              // So throw the error.\n              if (isDeterministicError(err as Error)) throw err\n\n              // If we've reached the end of the fallbacks, throw the error.\n              if (i === transports.length - 1) throw err\n\n              // Otherwise, try the next fallback.\n              return fetch(i + 1)\n            }\n          }\n          return fetch()\n        },\n        retryCount,\n        retryDelay,\n        type: 'fallback',\n      },\n      {\n        onResponse: (fn: OnResponseFn) => (onResponse = fn),\n        transports: transports.map((fn) => fn({ chain, retryCount: 0 })),\n      },\n    )\n\n    if (rank) {\n      const rankOptions = (typeof rank === 'object' ? rank : {}) as RankOptions\n      rankTransports({\n        chain,\n        interval: rankOptions.interval ?? pollingInterval,\n        onTransports: (transports_) => (transports = transports_),\n        sampleCount: rankOptions.sampleCount,\n        timeout: rankOptions.timeout,\n        transports,\n        weights: rankOptions.weights,\n      })\n    }\n    return transport\n  }\n}\n\nexport function rankTransports({\n  chain,\n  interval = 4_000,\n  onTransports,\n  sampleCount = 10,\n  timeout = 1_000,\n  transports,\n  weights = {},\n}: {\n  chain?: Chain\n  interval: RankOptions['interval']\n  onTransports: (transports: Transport[]) => void\n  sampleCount?: RankOptions['sampleCount']\n  timeout?: RankOptions['timeout']\n  transports: Transport[]\n  weights?: RankOptions['weights']\n}) {\n  const { stability: stabilityWeight = 0.7, latency: latencyWeight = 0.3 } =\n    weights\n\n  type SampleData = { latency: number; success: number }\n  type Sample = SampleData[]\n  const samples: Sample[] = []\n\n  const rankTransports_ = async () => {\n    // 1. Take a sample from each Transport.\n    const sample: Sample = await Promise.all(\n      transports.map(async (transport) => {\n        const transport_ = transport({ chain, retryCount: 0, timeout })\n\n        const start = Date.now()\n        let end\n        let success\n        try {\n          await transport_.request({ method: 'net_listening' })\n          success = 1\n        } catch {\n          success = 0\n        } finally {\n          end = Date.now()\n        }\n        const latency = end - start\n        return { latency, success }\n      }),\n    )\n\n    // 2. Store the sample. If we have more than `sampleCount` samples, remove\n    // the oldest sample.\n    samples.push(sample)\n    if (samples.length > sampleCount) samples.shift()\n\n    // 3. Calculate the max latency from samples.\n    const maxLatency = Math.max(\n      ...samples.map((sample) =>\n        Math.max(...sample.map(({ latency }) => latency)),\n      ),\n    )\n\n    // 4. Calculate the score for each Transport.\n    const scores = transports\n      .map((_, i) => {\n        const latencies = samples.map((sample) => sample[i].latency)\n        const meanLatency =\n          latencies.reduce((acc, latency) => acc + latency, 0) /\n          latencies.length\n        const latencyScore = 1 - meanLatency / maxLatency\n\n        const successes = samples.map((sample) => sample[i].success)\n        const stabilityScore =\n          successes.reduce((acc, success) => acc + success, 0) /\n          successes.length\n\n        if (stabilityScore === 0) return [0, i]\n        return [\n          latencyWeight * latencyScore + stabilityWeight * stabilityScore,\n          i,\n        ]\n      })\n      .sort((a, b) => b[0] - a[0])\n\n    // 5. Sort the Transports by score.\n    onTransports(scores.map(([, i]) => transports[i]))\n\n    // 6. Wait, and then rank again.\n    await wait(interval)\n    rankTransports_()\n  }\n  rankTransports_()\n}\n","import { RpcRequestError } from '../../errors/request.js'\nimport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from '../../errors/transport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js'\nimport { type HttpOptions, type RpcRequest, rpc } from '../../utils/rpc.js'\n\nimport {\n  type CreateTransportErrorType,\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n\nexport type BatchOptions = {\n  /** The maximum number of JSON-RPC requests to send in a batch. @default 1_000 */\n  batchSize?: number\n  /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\n  wait?: number\n}\n\nexport type HttpTransportConfig = {\n  /**\n   * Whether to enable Batch JSON-RPC.\n   * @link https://www.jsonrpc.org/specification#batch\n   */\n  batch?: boolean | BatchOptions\n  /**\n   * Request configuration to pass to `fetch`.\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/fetch\n   */\n  fetchOptions?: HttpOptions['fetchOptions']\n  /** The key of the HTTP transport. */\n  key?: TransportConfig['key']\n  /** The name of the HTTP transport. */\n  name?: TransportConfig['name']\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount']\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay']\n  /** The timeout (in ms) for the HTTP request. Default: 10_000 */\n  timeout?: TransportConfig['timeout']\n}\n\nexport type HttpTransport = Transport<\n  'http',\n  {\n    fetchOptions?: HttpTransportConfig['fetchOptions']\n    url?: string\n  }\n>\n\nexport type HttpTransportErrorType =\n  | CreateTransportErrorType\n  | UrlRequiredErrorType\n  | ErrorType\n\n/**\n * @description Creates a HTTP transport that connects to a JSON-RPC API.\n */\nexport function http(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string,\n  config: HttpTransportConfig = {},\n): HttpTransport {\n  const {\n    batch,\n    fetchOptions,\n    key = 'http',\n    name = 'HTTP JSON-RPC',\n    retryDelay,\n  } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const { batchSize = 1000, wait = 0 } =\n      typeof batch === 'object' ? batch : {}\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.http[0]\n    if (!url_) throw new UrlRequiredError()\n    return createTransport(\n      {\n        key,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n\n          const { schedule } = createBatchScheduler({\n            id: `${url}`,\n            wait,\n            shouldSplitBatch(requests) {\n              return requests.length > batchSize\n            },\n            fn: (body: RpcRequest[]) =>\n              rpc.http(url_, {\n                body,\n                fetchOptions,\n                timeout,\n              }),\n            sort: (a, b) => a.id - b.id,\n          })\n\n          const fn = async (body: RpcRequest) =>\n            batch\n              ? schedule(body)\n              : [await rpc.http(url_, { body, fetchOptions, timeout })]\n\n          const [{ error, result }] = await fn(body)\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'http',\n      },\n      {\n        fetchOptions,\n        url,\n      },\n    )\n  }\n}\n","import { RpcRequestError } from '../../errors/request.js'\nimport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from '../../errors/transport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hash } from '../../types/misc.js'\nimport { type RpcResponse, getSocket, rpc } from '../../utils/rpc.js'\nimport {\n  type CreateTransportErrorType,\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n\ntype WebSocketTransportSubscribeParameters = {\n  onData: (data: RpcResponse) => void\n  onError?: (error: any) => void\n}\n\ntype WebSocketTransportSubscribeReturnType = {\n  subscriptionId: Hash\n  unsubscribe: () => Promise<RpcResponse<boolean>>\n}\n\ntype WebSocketTransportSubscribe = {\n  subscribe(\n    args: WebSocketTransportSubscribeParameters & {\n      /**\n       * @description Add information about compiled contracts\n       * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_addcompilationresult\n       */\n      params: ['newHeads']\n    },\n  ): Promise<WebSocketTransportSubscribeReturnType>\n}\n\nexport type WebSocketTransportConfig = {\n  /** The key of the WebSocket transport. */\n  key?: TransportConfig['key']\n  /** The name of the WebSocket transport. */\n  name?: TransportConfig['name']\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount']\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay']\n  /** The timeout (in ms) for async WebSocket requests. Default: 10_000 */\n  timeout?: TransportConfig['timeout']\n}\n\nexport type WebSocketTransport = Transport<\n  'webSocket',\n  {\n    getSocket(): Promise<WebSocket>\n    subscribe: WebSocketTransportSubscribe['subscribe']\n  }\n>\n\nexport type WebSocketTransportErrorType =\n  | CreateTransportErrorType\n  | UrlRequiredErrorType\n  | ErrorType\n\n/**\n * @description Creates a WebSocket transport that connects to a JSON-RPC API.\n */\nexport function webSocket(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string,\n  config: WebSocketTransportConfig = {},\n): WebSocketTransport {\n  const { key = 'webSocket', name = 'WebSocket JSON-RPC', retryDelay } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.webSocket?.[0]\n    if (!url_) throw new UrlRequiredError()\n    return createTransport(\n      {\n        key,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n          const socket = await getSocket(url_)\n          const { error, result } = await rpc.webSocketAsync(socket, {\n            body,\n            timeout,\n          })\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'webSocket',\n      },\n      {\n        getSocket() {\n          return getSocket(url_)\n        },\n        async subscribe({ params, onData, onError }: any) {\n          const socket = await getSocket(url_)\n          const { result: subscriptionId } = await new Promise<any>(\n            (resolve, reject) =>\n              rpc.webSocket(socket, {\n                body: {\n                  method: 'eth_subscribe',\n                  params,\n                },\n                onResponse(response) {\n                  if (response.error) {\n                    reject(response.error)\n                    onError?.(response.error)\n                    return\n                  }\n\n                  if (typeof response.id === 'number') {\n                    resolve(response)\n                    return\n                  }\n                  if (response.method !== 'eth_subscription') return\n                  onData(response.params)\n                },\n              }),\n          )\n          return {\n            subscriptionId,\n            async unsubscribe() {\n              return new Promise<any>((resolve) =>\n                rpc.webSocket(socket, {\n                  body: {\n                    method: 'eth_unsubscribe',\n                    params: [subscriptionId],\n                  },\n                  onResponse: resolve,\n                }),\n              )\n            },\n          }\n        },\n      },\n    )\n  }\n}\n","/* [Multicall3](https://github.com/mds1/multicall) */\nexport const multicall3Abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            name: 'target',\n            type: 'address',\n          },\n          {\n            name: 'allowFailure',\n            type: 'bool',\n          },\n          {\n            name: 'callData',\n            type: 'bytes',\n          },\n        ],\n        name: 'calls',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'aggregate3',\n    outputs: [\n      {\n        components: [\n          {\n            name: 'success',\n            type: 'bool',\n          },\n          {\n            name: 'returnData',\n            type: 'bytes',\n          },\n        ],\n        name: 'returnData',\n        type: 'tuple[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n] as const\n\nconst universalResolverErrors = [\n  {\n    inputs: [],\n    name: 'ResolverNotFound',\n    type: 'error',\n  },\n  {\n    inputs: [],\n    name: 'ResolverWildcardNotSupported',\n    type: 'error',\n  },\n] as const\n\nexport const universalResolverResolveAbi = [\n  ...universalResolverErrors,\n  {\n    name: 'resolve',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { name: 'name', type: 'bytes' },\n      { name: 'data', type: 'bytes' },\n    ],\n    outputs: [\n      { name: '', type: 'bytes' },\n      { name: 'address', type: 'address' },\n    ],\n  },\n] as const\n\nexport const universalResolverReverseAbi = [\n  ...universalResolverErrors,\n  {\n    name: 'reverse',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ type: 'bytes', name: 'reverseName' }],\n    outputs: [\n      { type: 'string', name: 'resolvedName' },\n      { type: 'address', name: 'resolvedAddress' },\n      { type: 'address', name: 'reverseResolver' },\n      { type: 'address', name: 'resolver' },\n    ],\n  },\n] as const\n\nexport const textResolverAbi = [\n  {\n    name: 'text',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { name: 'name', type: 'bytes32' },\n      { name: 'key', type: 'string' },\n    ],\n    outputs: [{ name: '', type: 'string' }],\n  },\n] as const\n\nexport const addressResolverAbi = [\n  {\n    name: 'addr',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ name: 'name', type: 'bytes32' }],\n    outputs: [{ name: '', type: 'address' }],\n  },\n  {\n    name: 'addr',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { name: 'name', type: 'bytes32' },\n      { name: 'coinType', type: 'uint256' },\n    ],\n    outputs: [{ name: '', type: 'bytes' }],\n  },\n] as const\n\n// ERC-1271\n// isValidSignature(bytes32 hash, bytes signature) → bytes4 magicValue\nexport const smartAccountAbi = [\n  {\n    name: 'isValidSignature',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { name: 'hash', type: 'bytes32' },\n      { name: 'signature', type: 'bytes' },\n    ],\n    outputs: [{ name: '', type: 'bytes4' }],\n  },\n] as const\n\n// ERC-6492 - universal deployless signature validator contract\n// constructor(address _signer, bytes32 _hash, bytes _signature) → bytes4 returnValue\n// returnValue is either 0x1 (valid) or 0x0 (invalid)\nexport const universalSignatureValidatorAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_signer',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes32',\n        name: '_hash',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes',\n        name: '_signature',\n        type: 'bytes',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n] as const\n","export const zeroAddress = '0x0000000000000000000000000000000000000000' as const\n","export const zeroHash =\n  '0x0000000000000000000000000000000000000000000000000000000000000000' as const\n","export const aggregate3Signature = '0x82ad56cb'\n","export const universalSignatureValidatorByteCode =\n  '0x60806040523480156200001157600080fd5b50604051620007003803806200070083398101604081905262000034916200056f565b6000620000438484846200004f565b9050806000526001601ff35b600080846001600160a01b0316803b806020016040519081016040528181526000908060200190933c90507f6492649264926492649264926492649264926492649264926492649264926492620000a68462000451565b036200021f57600060608085806020019051810190620000c79190620005ce565b8651929550909350915060000362000192576000836001600160a01b031683604051620000f5919062000643565b6000604051808303816000865af19150503d806000811462000134576040519150601f19603f3d011682016040523d82523d6000602084013e62000139565b606091505b5050905080620001905760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b505b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90620001c4908b90869060040162000661565b602060405180830381865afa158015620001e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020891906200069d565b6001600160e01b031916149450505050506200044a565b805115620002b157604051630b135d3f60e11b808252906001600160a01b03871690631626ba7e9062000259908890889060040162000661565b602060405180830381865afa15801562000277573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029d91906200069d565b6001600160e01b031916149150506200044a565b8251604114620003195760405162461bcd60e51b815260206004820152603a6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e677468000000000000606482015260840162000187565b620003236200046b565b506020830151604080850151855186939260009185919081106200034b576200034b620006c9565b016020015160f81c9050601b81148015906200036b57508060ff16601c14155b15620003cf5760405162461bcd60e51b815260206004820152603b6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c75650000000000606482015260840162000187565b6040805160008152602081018083528a905260ff83169181019190915260608101849052608081018390526001600160a01b038a169060019060a0016020604051602081039080840390855afa1580156200042e573d6000803e3d6000fd5b505050602060405103516001600160a01b031614955050505050505b9392505050565b60006020825110156200046357600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b03811681146200049f57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004d5578181015183820152602001620004bb565b50506000910152565b600082601f830112620004f057600080fd5b81516001600160401b03808211156200050d576200050d620004a2565b604051601f8301601f19908116603f01168101908282118183101715620005385762000538620004a2565b816040528381528660208588010111156200055257600080fd5b62000565846020830160208901620004b8565b9695505050505050565b6000806000606084860312156200058557600080fd5b8351620005928162000489565b6020850151604086015191945092506001600160401b03811115620005b657600080fd5b620005c486828701620004de565b9150509250925092565b600080600060608486031215620005e457600080fd5b8351620005f18162000489565b60208501519093506001600160401b03808211156200060f57600080fd5b6200061d87838801620004de565b935060408601519150808211156200063457600080fd5b50620005c486828701620004de565b6000825162000657818460208701620004b8565b9190910192915050565b828152604060208201526000825180604084015262000688816060850160208701620004b8565b601f01601f1916919091016060019392505050565b600060208284031215620006b057600080fd5b81516001600160e01b0319811681146200044a57600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572'\n","export const maxInt8 = 2n ** (8n - 1n) - 1n\nexport const maxInt16 = 2n ** (16n - 1n) - 1n\nexport const maxInt24 = 2n ** (24n - 1n) - 1n\nexport const maxInt32 = 2n ** (32n - 1n) - 1n\nexport const maxInt40 = 2n ** (40n - 1n) - 1n\nexport const maxInt48 = 2n ** (48n - 1n) - 1n\nexport const maxInt56 = 2n ** (56n - 1n) - 1n\nexport const maxInt64 = 2n ** (64n - 1n) - 1n\nexport const maxInt72 = 2n ** (72n - 1n) - 1n\nexport const maxInt80 = 2n ** (80n - 1n) - 1n\nexport const maxInt88 = 2n ** (88n - 1n) - 1n\nexport const maxInt96 = 2n ** (96n - 1n) - 1n\nexport const maxInt104 = 2n ** (104n - 1n) - 1n\nexport const maxInt112 = 2n ** (112n - 1n) - 1n\nexport const maxInt120 = 2n ** (120n - 1n) - 1n\nexport const maxInt128 = 2n ** (128n - 1n) - 1n\nexport const maxInt136 = 2n ** (136n - 1n) - 1n\nexport const maxInt144 = 2n ** (144n - 1n) - 1n\nexport const maxInt152 = 2n ** (152n - 1n) - 1n\nexport const maxInt160 = 2n ** (160n - 1n) - 1n\nexport const maxInt168 = 2n ** (168n - 1n) - 1n\nexport const maxInt176 = 2n ** (176n - 1n) - 1n\nexport const maxInt184 = 2n ** (184n - 1n) - 1n\nexport const maxInt192 = 2n ** (192n - 1n) - 1n\nexport const maxInt200 = 2n ** (200n - 1n) - 1n\nexport const maxInt208 = 2n ** (208n - 1n) - 1n\nexport const maxInt216 = 2n ** (216n - 1n) - 1n\nexport const maxInt224 = 2n ** (224n - 1n) - 1n\nexport const maxInt232 = 2n ** (232n - 1n) - 1n\nexport const maxInt240 = 2n ** (240n - 1n) - 1n\nexport const maxInt248 = 2n ** (248n - 1n) - 1n\nexport const maxInt256 = 2n ** (256n - 1n) - 1n\n\nexport const minInt8 = -(2n ** (8n - 1n))\nexport const minInt16 = -(2n ** (16n - 1n))\nexport const minInt24 = -(2n ** (24n - 1n))\nexport const minInt32 = -(2n ** (32n - 1n))\nexport const minInt40 = -(2n ** (40n - 1n))\nexport const minInt48 = -(2n ** (48n - 1n))\nexport const minInt56 = -(2n ** (56n - 1n))\nexport const minInt64 = -(2n ** (64n - 1n))\nexport const minInt72 = -(2n ** (72n - 1n))\nexport const minInt80 = -(2n ** (80n - 1n))\nexport const minInt88 = -(2n ** (88n - 1n))\nexport const minInt96 = -(2n ** (96n - 1n))\nexport const minInt104 = -(2n ** (104n - 1n))\nexport const minInt112 = -(2n ** (112n - 1n))\nexport const minInt120 = -(2n ** (120n - 1n))\nexport const minInt128 = -(2n ** (128n - 1n))\nexport const minInt136 = -(2n ** (136n - 1n))\nexport const minInt144 = -(2n ** (144n - 1n))\nexport const minInt152 = -(2n ** (152n - 1n))\nexport const minInt160 = -(2n ** (160n - 1n))\nexport const minInt168 = -(2n ** (168n - 1n))\nexport const minInt176 = -(2n ** (176n - 1n))\nexport const minInt184 = -(2n ** (184n - 1n))\nexport const minInt192 = -(2n ** (192n - 1n))\nexport const minInt200 = -(2n ** (200n - 1n))\nexport const minInt208 = -(2n ** (208n - 1n))\nexport const minInt216 = -(2n ** (216n - 1n))\nexport const minInt224 = -(2n ** (224n - 1n))\nexport const minInt232 = -(2n ** (232n - 1n))\nexport const minInt240 = -(2n ** (240n - 1n))\nexport const minInt248 = -(2n ** (248n - 1n))\nexport const minInt256 = -(2n ** (256n - 1n))\n\nexport const maxUint8 = 2n ** 8n - 1n\nexport const maxUint16 = 2n ** 16n - 1n\nexport const maxUint24 = 2n ** 24n - 1n\nexport const maxUint32 = 2n ** 32n - 1n\nexport const maxUint40 = 2n ** 40n - 1n\nexport const maxUint48 = 2n ** 48n - 1n\nexport const maxUint56 = 2n ** 56n - 1n\nexport const maxUint64 = 2n ** 64n - 1n\nexport const maxUint72 = 2n ** 72n - 1n\nexport const maxUint80 = 2n ** 80n - 1n\nexport const maxUint88 = 2n ** 88n - 1n\nexport const maxUint96 = 2n ** 96n - 1n\nexport const maxUint104 = 2n ** 104n - 1n\nexport const maxUint112 = 2n ** 112n - 1n\nexport const maxUint120 = 2n ** 120n - 1n\nexport const maxUint128 = 2n ** 128n - 1n\nexport const maxUint136 = 2n ** 136n - 1n\nexport const maxUint144 = 2n ** 144n - 1n\nexport const maxUint152 = 2n ** 152n - 1n\nexport const maxUint160 = 2n ** 160n - 1n\nexport const maxUint168 = 2n ** 168n - 1n\nexport const maxUint176 = 2n ** 176n - 1n\nexport const maxUint184 = 2n ** 184n - 1n\nexport const maxUint192 = 2n ** 192n - 1n\nexport const maxUint200 = 2n ** 200n - 1n\nexport const maxUint208 = 2n ** 208n - 1n\nexport const maxUint216 = 2n ** 216n - 1n\nexport const maxUint224 = 2n ** 224n - 1n\nexport const maxUint232 = 2n ** 232n - 1n\nexport const maxUint240 = 2n ** 240n - 1n\nexport const maxUint248 = 2n ** 248n - 1n\nexport const maxUint256 = 2n ** 256n - 1n\n","import type { AbiError } from 'abitype'\n\n// https://docs.soliditylang.org/en/v0.8.16/control-structures.html#panic-via-assert-and-error-via-require\nexport const panicReasons = {\n  1: 'An `assert` condition failed.',\n  17: 'Arithmic operation resulted in underflow or overflow.',\n  18: 'Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).',\n  33: 'Attempted to convert to an invalid type.',\n  34: 'Attempted to access a storage byte array that is incorrectly encoded.',\n  49: 'Performed `.pop()` on an empty array',\n  50: 'Array index is out of bounds.',\n  65: 'Allocated too much memory or created an array which is too large.',\n  81: 'Attempted to call a zero-initialized variable of internal function type.',\n} as const\n\nexport const solidityError: AbiError = {\n  inputs: [\n    {\n      name: 'message',\n      type: 'string',\n    },\n  ],\n  name: 'Error',\n  type: 'error',\n}\nexport const solidityPanic: AbiError = {\n  inputs: [\n    {\n      name: 'reason',\n      type: 'uint256',\n    },\n  ],\n  name: 'Panic',\n  type: 'error',\n}\n","export const presignMessagePrefix = '\\x19Ethereum Signed Message:\\n'\n","export const etherUnits = {\n  gwei: 9,\n  wei: 18,\n}\nexport const gweiUnits = {\n  ether: -9,\n  wei: 9,\n}\nexport const weiUnits = {\n  ether: -18,\n  gwei: -9,\n}\n","import type { Abi, AbiEvent, AbiParameter } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { formatAbiItem, formatAbiParams } from '../utils/abi/formatAbiItem.js'\nimport { size } from '../utils/data/size.js'\n\nimport { BaseError } from './base.js'\n\nexport type AbiConstructorNotFoundErrorType = AbiConstructorNotFoundError & {\n  name: 'AbiConstructorNotFoundError'\n}\nexport class AbiConstructorNotFoundError extends BaseError {\n  override name = 'AbiConstructorNotFoundError'\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'A constructor was not found on the ABI.',\n        'Make sure you are using the correct ABI and that the constructor exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiConstructorParamsNotFoundErrorType =\n  AbiConstructorParamsNotFoundError & {\n    name: 'AbiConstructorParamsNotFoundError'\n  }\n\nexport class AbiConstructorParamsNotFoundError extends BaseError {\n  override name = 'AbiConstructorParamsNotFoundError'\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.',\n        'Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeInvalidErrorType =\n  AbiDecodingDataSizeInvalidError & {\n    name: 'AbiDecodingDataSizeInvalidError'\n  }\nexport class AbiDecodingDataSizeInvalidError extends BaseError {\n  override name = 'AbiDecodingDataSizeInvalidError'\n  constructor({ data, size }: { data: Hex; size: number }) {\n    super(\n      [\n        `Data size of ${size} bytes is invalid.`,\n        'Size must be in increments of 32 bytes (size % 32 === 0).',\n      ].join('\\n'),\n      { metaMessages: [`Data: ${data} (${size} bytes)`] },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeTooSmallErrorType =\n  AbiDecodingDataSizeTooSmallError & {\n    name: 'AbiDecodingDataSizeTooSmallError'\n  }\nexport class AbiDecodingDataSizeTooSmallError extends BaseError {\n  override name = 'AbiDecodingDataSizeTooSmallError'\n\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    data,\n    params,\n    size,\n  }: { data: Hex; params: readonly AbiParameter[]; size: number }) {\n    super(\n      [`Data size of ${size} bytes is too small for given parameters.`].join(\n        '\\n',\n      ),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n      },\n    )\n\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type AbiDecodingZeroDataErrorType = AbiDecodingZeroDataError & {\n  name: 'AbiDecodingZeroDataError'\n}\nexport class AbiDecodingZeroDataError extends BaseError {\n  override name = 'AbiDecodingZeroDataError'\n  constructor() {\n    super('Cannot decode zero data (\"0x\") with ABI parameters.')\n  }\n}\n\nexport type AbiEncodingArrayLengthMismatchErrorType =\n  AbiEncodingArrayLengthMismatchError & {\n    name: 'AbiEncodingArrayLengthMismatchError'\n  }\nexport class AbiEncodingArrayLengthMismatchError extends BaseError {\n  override name = 'AbiEncodingArrayLengthMismatchError'\n  constructor({\n    expectedLength,\n    givenLength,\n    type,\n  }: { expectedLength: number; givenLength: number; type: string }) {\n    super(\n      [\n        `ABI encoding array length mismatch for type ${type}.`,\n        `Expected length: ${expectedLength}`,\n        `Given length: ${givenLength}`,\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type AbiEncodingBytesSizeMismatchErrorType =\n  AbiEncodingBytesSizeMismatchError & {\n    name: 'AbiEncodingBytesSizeMismatchError'\n  }\nexport class AbiEncodingBytesSizeMismatchError extends BaseError {\n  override name = 'AbiEncodingBytesSizeMismatchError'\n  constructor({ expectedSize, value }: { expectedSize: number; value: Hex }) {\n    super(\n      `Size of bytes \"${value}\" (bytes${size(\n        value,\n      )}) does not match expected size (bytes${expectedSize}).`,\n    )\n  }\n}\n\nexport type AbiEncodingLengthMismatchErrorType =\n  AbiEncodingLengthMismatchError & {\n    name: 'AbiEncodingLengthMismatchError'\n  }\nexport class AbiEncodingLengthMismatchError extends BaseError {\n  override name = 'AbiEncodingLengthMismatchError'\n  constructor({\n    expectedLength,\n    givenLength,\n  }: { expectedLength: number; givenLength: number }) {\n    super(\n      [\n        'ABI encoding params/values length mismatch.',\n        `Expected length (params): ${expectedLength}`,\n        `Given length (values): ${givenLength}`,\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type AbiErrorInputsNotFoundErrorType = AbiErrorInputsNotFoundError & {\n  name: 'AbiErrorInputsNotFoundError'\n}\nexport class AbiErrorInputsNotFoundError extends BaseError {\n  override name = 'AbiErrorInputsNotFoundError'\n  constructor(errorName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Arguments (\\`args\\`) were provided to \"${errorName}\", but \"${errorName}\" on the ABI does not contain any parameters (\\`inputs\\`).`,\n        'Cannot encode error result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the inputs exist on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiErrorNotFoundErrorType = AbiErrorNotFoundError & {\n  name: 'AbiErrorNotFoundError'\n}\nexport class AbiErrorNotFoundError extends BaseError {\n  override name = 'AbiErrorNotFoundError'\n  constructor(errorName?: string, { docsPath }: { docsPath?: string } = {}) {\n    super(\n      [\n        `Error ${errorName ? `\"${errorName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiErrorSignatureNotFoundErrorType =\n  AbiErrorSignatureNotFoundError & {\n    name: 'AbiErrorSignatureNotFoundError'\n  }\nexport class AbiErrorSignatureNotFoundError extends BaseError {\n  override name = 'AbiErrorSignatureNotFoundError'\n\n  signature: Hex\n\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded error signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n        `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n    this.signature = signature\n  }\n}\n\nexport type AbiEventSignatureEmptyTopicsErrorType =\n  AbiEventSignatureEmptyTopicsError & {\n    name: 'AbiEventSignatureEmptyTopicsError'\n  }\nexport class AbiEventSignatureEmptyTopicsError extends BaseError {\n  override name = 'AbiEventSignatureEmptyTopicsError'\n  constructor({ docsPath }: { docsPath: string }) {\n    super('Cannot extract event signature from empty topics.', {\n      docsPath,\n    })\n  }\n}\n\nexport type AbiEventSignatureNotFoundErrorType =\n  AbiEventSignatureNotFoundError & {\n    name: 'AbiEventSignatureNotFoundError'\n  }\nexport class AbiEventSignatureNotFoundError extends BaseError {\n  override name = 'AbiEventSignatureNotFoundError'\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded event signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiEventNotFoundErrorType = AbiEventNotFoundError & {\n  name: 'AbiEventNotFoundError'\n}\nexport class AbiEventNotFoundError extends BaseError {\n  override name = 'AbiEventNotFoundError'\n  constructor(eventName?: string, { docsPath }: { docsPath?: string } = {}) {\n    super(\n      [\n        `Event ${eventName ? `\"${eventName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiFunctionNotFoundErrorType = AbiFunctionNotFoundError & {\n  name: 'AbiFunctionNotFoundError'\n}\nexport class AbiFunctionNotFoundError extends BaseError {\n  override name = 'AbiFunctionNotFoundError'\n  constructor(functionName?: string, { docsPath }: { docsPath?: string } = {}) {\n    super(\n      [\n        `Function ${functionName ? `\"${functionName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiFunctionOutputsNotFoundErrorType =\n  AbiFunctionOutputsNotFoundError & {\n    name: 'AbiFunctionOutputsNotFoundError'\n  }\nexport class AbiFunctionOutputsNotFoundError extends BaseError {\n  override name = 'AbiFunctionOutputsNotFoundError'\n  constructor(functionName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`,\n        'Cannot decode function result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiFunctionSignatureNotFoundErrorType =\n  AbiFunctionSignatureNotFoundError & {\n    name: 'AbiFunctionSignatureNotFoundError'\n  }\nexport class AbiFunctionSignatureNotFoundError extends BaseError {\n  override name = 'AbiFunctionSignatureNotFoundError'\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded function signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiItemAmbiguityErrorType = AbiItemAmbiguityError & {\n  name: 'AbiItemAmbiguityError'\n}\nexport class AbiItemAmbiguityError extends BaseError {\n  override name = 'AbiItemAmbiguityError'\n  constructor(\n    x: { abiItem: Abi[number]; type: string },\n    y: { abiItem: Abi[number]; type: string },\n  ) {\n    super('Found ambiguous types in overloaded ABI items.', {\n      metaMessages: [\n        `\\`${x.type}\\` in \\`${formatAbiItem(x.abiItem)}\\`, and`,\n        `\\`${y.type}\\` in \\`${formatAbiItem(y.abiItem)}\\``,\n        '',\n        'These types encode differently and cannot be distinguished at runtime.',\n        'Remove one of the ambiguous items in the ABI.',\n      ],\n    })\n  }\n}\n\nexport type BytesSizeMismatchErrorType = BytesSizeMismatchError & {\n  name: 'BytesSizeMismatchError'\n}\nexport class BytesSizeMismatchError extends BaseError {\n  override name = 'BytesSizeMismatchError'\n  constructor({\n    expectedSize,\n    givenSize,\n  }: { expectedSize: number; givenSize: number }) {\n    super(`Expected bytes${expectedSize}, got bytes${givenSize}.`)\n  }\n}\n\nexport type DecodeLogDataMismatchErrorType = DecodeLogDataMismatch & {\n  name: 'DecodeLogDataMismatch'\n}\nexport class DecodeLogDataMismatch extends BaseError {\n  override name = 'DecodeLogDataMismatch'\n\n  abiItem: AbiEvent\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    abiItem,\n    data,\n    params,\n    size,\n  }: {\n    abiItem: AbiEvent\n    data: Hex\n    params: readonly AbiParameter[]\n    size: number\n  }) {\n    super(\n      [\n        `Data size of ${size} bytes is too small for non-indexed event parameters.`,\n      ].join('\\n'),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n      },\n    )\n\n    this.abiItem = abiItem\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type DecodeLogTopicsMismatchErrorType = DecodeLogTopicsMismatch & {\n  name: 'DecodeLogTopicsMismatch'\n}\nexport class DecodeLogTopicsMismatch extends BaseError {\n  override name = 'DecodeLogTopicsMismatch'\n\n  abiItem: AbiEvent\n\n  constructor({\n    abiItem,\n    param,\n  }: {\n    abiItem: AbiEvent\n    param: AbiParameter & { indexed: boolean }\n  }) {\n    super(\n      [\n        `Expected a topic for indexed event parameter${\n          param.name ? ` \"${param.name}\"` : ''\n        } on event \"${formatAbiItem(abiItem, { includeName: true })}\".`,\n      ].join('\\n'),\n    )\n\n    this.abiItem = abiItem\n  }\n}\n\nexport type InvalidAbiEncodingTypeErrorType = InvalidAbiEncodingTypeError & {\n  name: 'InvalidAbiEncodingTypeError'\n}\nexport class InvalidAbiEncodingTypeError extends BaseError {\n  override name = 'InvalidAbiEncodingType'\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid encoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath },\n    )\n  }\n}\n\nexport type InvalidAbiDecodingTypeErrorType = InvalidAbiDecodingTypeError & {\n  name: 'InvalidAbiDecodingTypeError'\n}\nexport class InvalidAbiDecodingTypeError extends BaseError {\n  override name = 'InvalidAbiDecodingType'\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid decoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath },\n    )\n  }\n}\n\nexport type InvalidArrayErrorType = InvalidArrayError & {\n  name: 'InvalidArrayError'\n}\nexport class InvalidArrayError extends BaseError {\n  override name = 'InvalidArrayError'\n  constructor(value: unknown) {\n    super([`Value \"${value}\" is not a valid array.`].join('\\n'))\n  }\n}\n\nexport type InvalidDefinitionTypeErrorType = InvalidDefinitionTypeError & {\n  name: 'InvalidDefinitionTypeError'\n}\nexport class InvalidDefinitionTypeError extends BaseError {\n  override name = 'InvalidDefinitionTypeError'\n  constructor(type: string) {\n    super(\n      [\n        `\"${type}\" is not a valid definition type.`,\n        'Valid types: \"function\", \"event\", \"error\"',\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type UnsupportedPackedAbiTypeErrorType = UnsupportedPackedAbiType & {\n  name: 'UnsupportedPackedAbiType'\n}\nexport class UnsupportedPackedAbiType extends BaseError {\n  override name = 'UnsupportedPackedAbiType'\n  constructor(type: unknown) {\n    super(`Type \"${type}\" is not supported for packed encoding.`)\n  }\n}\n","import { BaseError } from './base.js'\n\nexport type AccountNotFoundErrorType = AccountNotFoundError & {\n  name: 'AccountNotFoundError'\n}\nexport class AccountNotFoundError extends BaseError {\n  override name = 'AccountNotFoundError'\n  constructor({ docsPath }: { docsPath?: string } = {}) {\n    super(\n      [\n        'Could not find an Account to execute with this Action.',\n        'Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the WalletClient.',\n      ].join('\\n'),\n      {\n        docsPath,\n        docsSlug: 'account',\n      },\n    )\n  }\n}\n","import { BaseError } from './base.js'\n\nexport type InvalidAddressErrorType = InvalidAddressError & {\n  name: 'InvalidAddressError'\n}\nexport class InvalidAddressError extends BaseError {\n  override name = 'InvalidAddressError'\n  constructor({ address }: { address: string }) {\n    super(`Address \"${address}\" is invalid.`)\n  }\n}\n","import { getVersion } from './utils.js'\n\ntype BaseErrorParameters = {\n  docsPath?: string\n  docsSlug?: string\n  metaMessages?: string[]\n} & (\n  | {\n      cause?: never\n      details?: string\n    }\n  | {\n      cause: BaseError | Error\n      details?: never\n    }\n)\n\nexport type BaseErrorType = BaseError & { name: 'ViemError' }\nexport class BaseError extends Error {\n  details: string\n  docsPath?: string\n  metaMessages?: string[]\n  shortMessage: string\n\n  override name = 'ViemError'\n  version = getVersion()\n\n  constructor(shortMessage: string, args: BaseErrorParameters = {}) {\n    super()\n\n    const details =\n      args.cause instanceof BaseError\n        ? args.cause.details\n        : args.cause?.message\n          ? args.cause.message\n          : args.details!\n    const docsPath =\n      args.cause instanceof BaseError\n        ? args.cause.docsPath || args.docsPath\n        : args.docsPath\n\n    this.message = [\n      shortMessage || 'An error occurred.',\n      '',\n      ...(args.metaMessages ? [...args.metaMessages, ''] : []),\n      ...(docsPath\n        ? [\n            `Docs: https://viem.sh${docsPath}.html${\n              args.docsSlug ? `#${args.docsSlug}` : ''\n            }`,\n          ]\n        : []),\n      ...(details ? [`Details: ${details}`] : []),\n      `Version: ${this.version}`,\n    ].join('\\n')\n\n    if (args.cause) this.cause = args.cause\n    this.details = details\n    this.docsPath = docsPath\n    this.metaMessages = args.metaMessages\n    this.shortMessage = shortMessage\n  }\n\n  walk(): Error\n  walk(fn: (err: unknown) => boolean): Error | null\n  walk(fn?: any): any {\n    return walk(this, fn)\n  }\n}\n\nfunction walk(err: unknown, fn?: (err: unknown) => boolean): unknown {\n  if (fn?.(err)) return err\n  if (err && typeof err === 'object' && 'cause' in err)\n    return walk(err.cause, fn)\n  return fn ? null : err\n}\n","import type { Hash } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type BlockNotFoundErrorType = BlockNotFoundError & {\n  name: 'BlockNotFoundError'\n}\nexport class BlockNotFoundError extends BaseError {\n  override name = 'BlockNotFoundError'\n  constructor({\n    blockHash,\n    blockNumber,\n  }: {\n    blockHash?: Hash\n    blockNumber?: bigint\n  }) {\n    let identifier = 'Block'\n    if (blockHash) identifier = `Block at hash \"${blockHash}\"`\n    if (blockNumber) identifier = `Block at number \"${blockNumber}\"`\n    super(`${identifier} could not be found.`)\n  }\n}\n","import type { Address } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport type OffchainLookupErrorType = OffchainLookupError & {\n  name: 'OffchainLookupError'\n}\nexport class OffchainLookupError extends BaseError {\n  override name = 'OffchainLookupError'\n  constructor({\n    callbackSelector,\n    cause,\n    data,\n    extraData,\n    sender,\n    urls,\n  }: {\n    callbackSelector: Hex\n    cause: BaseError\n    data: Hex\n    extraData: Hex\n    sender: Address\n    urls: readonly string[]\n  }) {\n    super(\n      cause.shortMessage ||\n        'An error occurred while fetching for an offchain result.',\n      {\n        cause,\n        metaMessages: [\n          ...(cause.metaMessages || []),\n          cause.metaMessages?.length ? '' : [],\n          'Offchain Gateway Call:',\n          urls && [\n            '  Gateway URL(s):',\n            ...urls.map((url) => `    ${getUrl(url)}`),\n          ],\n          `  Sender: ${sender}`,\n          `  Data: ${data}`,\n          `  Callback selector: ${callbackSelector}`,\n          `  Extra data: ${extraData}`,\n        ].flat(),\n      },\n    )\n  }\n}\n\nexport type OffchainLookupResponseMalformedErrorType =\n  OffchainLookupResponseMalformedError & {\n    name: 'OffchainLookupResponseMalformedError'\n  }\nexport class OffchainLookupResponseMalformedError extends BaseError {\n  override name = 'OffchainLookupResponseMalformedError'\n  constructor({ result, url }: { result: any; url: string }) {\n    super(\n      'Offchain gateway response is malformed. Response data must be a hex value.',\n      {\n        metaMessages: [\n          `Gateway URL: ${getUrl(url)}`,\n          `Response: ${stringify(result)}`,\n        ],\n      },\n    )\n  }\n}\n\nexport type OffchainLookupSenderMismatchErrorType =\n  OffchainLookupSenderMismatchError & {\n    name: 'OffchainLookupSenderMismatchError'\n  }\nexport class OffchainLookupSenderMismatchError extends BaseError {\n  override name = 'OffchainLookupSenderMismatchError'\n  constructor({ sender, to }: { sender: Address; to: Address }) {\n    super(\n      'Reverted sender address does not match target contract address (`to`).',\n      {\n        metaMessages: [\n          `Contract address: ${to}`,\n          `OffchainLookup sender address: ${sender}`,\n        ],\n      },\n    )\n  }\n}\n","import type { Chain } from '../types/chain.js'\n\nimport { BaseError } from './base.js'\n\nexport type ChainDoesNotSupportContractErrorType =\n  ChainDoesNotSupportContract & {\n    name: 'ChainDoesNotSupportContract'\n  }\nexport class ChainDoesNotSupportContract extends BaseError {\n  override name = 'ChainDoesNotSupportContract'\n  constructor({\n    blockNumber,\n    chain,\n    contract,\n  }: {\n    blockNumber?: bigint\n    chain: Chain\n    contract: { name: string; blockCreated?: number }\n  }) {\n    super(\n      `Chain \"${chain.name}\" does not support contract \"${contract.name}\".`,\n      {\n        metaMessages: [\n          'This could be due to any of the following:',\n          ...(blockNumber &&\n          contract.blockCreated &&\n          contract.blockCreated > blockNumber\n            ? [\n                `- The contract \"${contract.name}\" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`,\n              ]\n            : [\n                `- The chain does not have the contract \"${contract.name}\" configured.`,\n              ]),\n        ],\n      },\n    )\n  }\n}\n\nexport type ChainMismatchErrorType = ChainMismatchError & {\n  name: 'ChainMismatchError'\n}\nexport class ChainMismatchError extends BaseError {\n  override name = 'ChainMismatchError'\n\n  constructor({\n    chain,\n    currentChainId,\n  }: {\n    chain: Chain\n    currentChainId: number\n  }) {\n    super(\n      `The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} – ${chain.name}).`,\n      {\n        metaMessages: [\n          `Current Chain ID:  ${currentChainId}`,\n          `Expected Chain ID: ${chain.id} – ${chain.name}`,\n        ],\n      },\n    )\n  }\n}\n\nexport type ChainNotFoundErrorType = ChainNotFoundError & {\n  name: 'ChainNotFoundError'\n}\nexport class ChainNotFoundError extends BaseError {\n  override name = 'ChainNotFoundError'\n\n  constructor() {\n    super(\n      [\n        'No chain was provided to the request.',\n        'Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient.',\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type ClientChainNotConfiguredErrorType =\n  ClientChainNotConfiguredError & {\n    name: 'ClientChainNotConfiguredError'\n  }\nexport class ClientChainNotConfiguredError extends BaseError {\n  override name = 'ClientChainNotConfiguredError'\n\n  constructor() {\n    super('No chain was provided to the Client.')\n  }\n}\n\nexport type InvalidChainIdErrorType = InvalidChainIdError & {\n  name: 'InvalidChainIdError'\n}\nexport class InvalidChainIdError extends BaseError {\n  override name = 'InvalidChainIdError'\n\n  constructor({ chainId }: { chainId: number }) {\n    super(`Chain ID \"${chainId}\" is invalid.`)\n  }\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { parseAccount } from '../accounts/utils/parseAccount.js'\nimport type { CallParameters } from '../actions/public/call.js'\nimport { panicReasons } from '../constants/solidity.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hex } from '../types/misc.js'\nimport {\n  type DecodeErrorResultReturnType,\n  decodeErrorResult,\n} from '../utils/abi/decodeErrorResult.js'\nimport { formatAbiItem } from '../utils/abi/formatAbiItem.js'\nimport { formatAbiItemWithArgs } from '../utils/abi/formatAbiItemWithArgs.js'\nimport { getAbiItem } from '../utils/abi/getAbiItem.js'\nimport { formatEther } from '../utils/unit/formatEther.js'\nimport { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { AbiErrorSignatureNotFoundError } from './abi.js'\nimport { BaseError } from './base.js'\nimport { prettyPrint } from './transaction.js'\nimport { getContractAddress } from './utils.js'\n\nexport type CallExecutionErrorType = CallExecutionError & {\n  name: 'CallExecutionError'\n}\nexport class CallExecutionError extends BaseError {\n  override cause: BaseError\n\n  override name = 'CallExecutionError'\n\n  constructor(\n    cause: BaseError,\n    {\n      account: account_,\n      docsPath,\n      chain,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    }: CallParameters & { chain?: Chain; docsPath?: string },\n  ) {\n    const account = account_ ? parseAccount(account_) : undefined\n    const prettyArgs = prettyPrint({\n      from: account?.address,\n      to,\n      value:\n        typeof value !== 'undefined' &&\n        `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice:\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas:\n        typeof maxFeePerGas !== 'undefined' &&\n        `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas:\n        typeof maxPriorityFeePerGas !== 'undefined' &&\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce,\n    })\n\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n        'Raw Call Arguments:',\n        prettyArgs,\n      ].filter(Boolean) as string[],\n    })\n    this.cause = cause\n  }\n}\n\nexport type ContractFunctionExecutionErrorType =\n  ContractFunctionExecutionError & {\n    name: 'ContractFunctionExecutionError'\n  }\nexport class ContractFunctionExecutionError extends BaseError {\n  abi: Abi\n  args?: unknown[]\n  override cause: BaseError\n  contractAddress?: Address\n  formattedArgs?: string\n  functionName: string\n  sender?: Address\n\n  override name = 'ContractFunctionExecutionError'\n\n  constructor(\n    cause: BaseError,\n    {\n      abi,\n      args,\n      contractAddress,\n      docsPath,\n      functionName,\n      sender,\n    }: {\n      abi: Abi\n      args?: any\n      contractAddress?: Address\n      docsPath?: string\n      functionName: string\n      sender?: Address\n    },\n  ) {\n    const abiItem = getAbiItem({ abi, args, name: functionName })\n    const formattedArgs = abiItem\n      ? formatAbiItemWithArgs({\n          abiItem,\n          args,\n          includeFunctionName: false,\n          includeName: false,\n        })\n      : undefined\n    const functionWithParams = abiItem\n      ? formatAbiItem(abiItem, { includeName: true })\n      : undefined\n\n    const prettyArgs = prettyPrint({\n      address: contractAddress && getContractAddress(contractAddress),\n      function: functionWithParams,\n      args:\n        formattedArgs &&\n        formattedArgs !== '()' &&\n        `${[...Array(functionName?.length ?? 0).keys()]\n          .map(() => ' ')\n          .join('')}${formattedArgs}`,\n      sender,\n    })\n\n    super(\n      cause.shortMessage ||\n        `An unknown error occurred while executing the contract function \"${functionName}\".`,\n      {\n        cause,\n        docsPath,\n        metaMessages: [\n          ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n          'Contract Call:',\n          prettyArgs,\n        ].filter(Boolean) as string[],\n      },\n    )\n    this.abi = abi\n    this.args = args\n    this.cause = cause\n    this.contractAddress = contractAddress\n    this.functionName = functionName\n    this.sender = sender\n  }\n}\n\nexport type ContractFunctionRevertedErrorType =\n  ContractFunctionRevertedError & {\n    name: 'ContractFunctionRevertedError'\n  }\nexport class ContractFunctionRevertedError extends BaseError {\n  override name = 'ContractFunctionRevertedError'\n\n  data?: DecodeErrorResultReturnType\n  reason?: string\n  signature?: Hex\n\n  constructor({\n    abi,\n    data,\n    functionName,\n    message,\n  }: { abi: Abi; data?: Hex; functionName: string; message?: string }) {\n    let cause: Error | undefined\n    let decodedData: DecodeErrorResultReturnType | undefined = undefined\n    let metaMessages\n    let reason\n    if (data && data !== '0x') {\n      try {\n        decodedData = decodeErrorResult({ abi, data })\n        const { abiItem, errorName, args: errorArgs } = decodedData\n        if (errorName === 'Error') {\n          reason = (errorArgs as [string])[0]\n        } else if (errorName === 'Panic') {\n          const [firstArg] = errorArgs as [number]\n          reason = panicReasons[firstArg as keyof typeof panicReasons]\n        } else {\n          const errorWithParams = abiItem\n            ? formatAbiItem(abiItem, { includeName: true })\n            : undefined\n          const formattedArgs =\n            abiItem && errorArgs\n              ? formatAbiItemWithArgs({\n                  abiItem,\n                  args: errorArgs,\n                  includeFunctionName: false,\n                  includeName: false,\n                })\n              : undefined\n\n          metaMessages = [\n            errorWithParams ? `Error: ${errorWithParams}` : '',\n            formattedArgs && formattedArgs !== '()'\n              ? `       ${[...Array(errorName?.length ?? 0).keys()]\n                  .map(() => ' ')\n                  .join('')}${formattedArgs}`\n              : '',\n          ]\n        }\n      } catch (err) {\n        cause = err as Error\n      }\n    } else if (message) reason = message\n\n    let signature: Hex | undefined\n    if (cause instanceof AbiErrorSignatureNotFoundError) {\n      signature = cause.signature\n      metaMessages = [\n        `Unable to decode signature \"${signature}\" as it was not found on the provided ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n        `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ]\n    }\n\n    super(\n      (reason && reason !== 'execution reverted') || signature\n        ? [\n            `The contract function \"${functionName}\" reverted with the following ${\n              signature ? 'signature' : 'reason'\n            }:`,\n            reason || signature,\n          ].join('\\n')\n        : `The contract function \"${functionName}\" reverted.`,\n      {\n        cause,\n        metaMessages,\n      },\n    )\n\n    this.data = decodedData\n    this.reason = reason\n    this.signature = signature\n  }\n}\n\nexport type ContractFunctionZeroDataErrorType =\n  ContractFunctionZeroDataError & {\n    name: 'ContractFunctionZeroDataError'\n  }\nexport class ContractFunctionZeroDataError extends BaseError {\n  override name = 'ContractFunctionZeroDataError'\n  constructor({ functionName }: { functionName: string }) {\n    super(`The contract function \"${functionName}\" returned no data (\"0x\").`, {\n      metaMessages: [\n        'This could be due to any of the following:',\n        `  - The contract does not have the function \"${functionName}\",`,\n        '  - The parameters passed to the contract function may be invalid, or',\n        '  - The address is not a contract.',\n      ],\n    })\n  }\n}\n\nexport type RawContractErrorType = RawContractError & {\n  name: 'RawContractError'\n}\nexport class RawContractError extends BaseError {\n  code = 3\n  override name = 'RawContractError'\n\n  data?: Hex | { data?: Hex }\n\n  constructor({\n    data,\n    message,\n  }: { data?: Hex | { data?: Hex }; message?: string }) {\n    super(message || '')\n    this.data = data\n  }\n}\n","import { BaseError } from './base.js'\n\nexport type NegativeOffsetErrorType = NegativeOffsetError & {\n  name: 'NegativeOffsetError'\n}\nexport class NegativeOffsetError extends BaseError {\n  override name = 'NegativeOffsetError'\n  constructor({ offset }: { offset: number }) {\n    super(`Offset \\`${offset}\\` cannot be negative.`)\n  }\n}\n\nexport type PositionOutOfBoundsErrorType = PositionOutOfBoundsError & {\n  name: 'PositionOutOfBoundsError'\n}\nexport class PositionOutOfBoundsError extends BaseError {\n  override name = 'PositionOutOfBoundsError'\n  constructor({ length, position }: { length: number; position: number }) {\n    super(\n      `Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`,\n    )\n  }\n}\n","import { BaseError } from './base.js'\n\nexport type SliceOffsetOutOfBoundsErrorType = SliceOffsetOutOfBoundsError & {\n  name: 'SliceOffsetOutOfBoundsError'\n}\nexport class SliceOffsetOutOfBoundsError extends BaseError {\n  override name = 'SliceOffsetOutOfBoundsError'\n  constructor({\n    offset,\n    position,\n    size,\n  }: { offset: number; position: 'start' | 'end'; size: number }) {\n    super(\n      `Slice ${\n        position === 'start' ? 'starting' : 'ending'\n      } at offset \"${offset}\" is out-of-bounds (size: ${size}).`,\n    )\n  }\n}\n\nexport type SizeExceedsPaddingSizeErrorType = SizeExceedsPaddingSizeError & {\n  name: 'SizeExceedsPaddingSizeError'\n}\nexport class SizeExceedsPaddingSizeError extends BaseError {\n  override name = 'SizeExceedsPaddingSizeError'\n  constructor({\n    size,\n    targetSize,\n    type,\n  }: {\n    size: number\n    targetSize: number\n    type: 'hex' | 'bytes'\n  }) {\n    super(\n      `${type.charAt(0).toUpperCase()}${type\n        .slice(1)\n        .toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`,\n    )\n  }\n}\n","import type { ByteArray, Hex } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type DataLengthTooLongErrorType = DataLengthTooLongError & {\n  name: 'DataLengthTooLongError'\n}\n/** @deprecated */\nexport class DataLengthTooLongError extends BaseError {\n  override name = 'DataLengthTooLongError'\n  constructor({ consumed, length }: { consumed: number; length: number }) {\n    super(\n      `Consumed bytes (${consumed}) is shorter than data length (${\n        length - 1\n      }).`,\n    )\n  }\n}\n\nexport type DataLengthTooShortErrorType = DataLengthTooShortError & {\n  name: 'DataLengthTooShortError'\n}\n/** @deprecated */\nexport class DataLengthTooShortError extends BaseError {\n  override name = 'DataLengthTooShortError'\n  constructor({ length, dataLength }: { length: number; dataLength: number }) {\n    super(\n      `Data length (${dataLength - 1}) is shorter than consumed bytes length (${\n        length - 1\n      }).`,\n    )\n  }\n}\n\nexport type IntegerOutOfRangeErrorType = IntegerOutOfRangeError & {\n  name: 'IntegerOutOfRangeError'\n}\nexport class IntegerOutOfRangeError extends BaseError {\n  override name = 'IntegerOutOfRangeError'\n  constructor({\n    max,\n    min,\n    signed,\n    size,\n    value,\n  }: {\n    max?: string\n    min: string\n    signed?: boolean\n    size?: number\n    value: string\n  }) {\n    super(\n      `Number \"${value}\" is not in safe ${\n        size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''\n      }integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`,\n    )\n  }\n}\n\nexport type InvalidBytesBooleanErrorType = InvalidBytesBooleanError & {\n  name: 'InvalidBytesBooleanError'\n}\nexport class InvalidBytesBooleanError extends BaseError {\n  override name = 'InvalidBytesBooleanError'\n  constructor(bytes: ByteArray) {\n    super(\n      `Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`,\n    )\n  }\n}\n\nexport type InvalidHexBooleanErrorType = InvalidHexBooleanError & {\n  name: 'InvalidHexBooleanError'\n}\nexport class InvalidHexBooleanError extends BaseError {\n  override name = 'InvalidHexBooleanError'\n  constructor(hex: Hex) {\n    super(\n      `Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`,\n    )\n  }\n}\n\nexport type InvalidHexValueErrorType = InvalidHexValueError & {\n  name: 'InvalidHexValueError'\n}\nexport class InvalidHexValueError extends BaseError {\n  override name = 'InvalidHexValueError'\n  constructor(value: Hex) {\n    super(\n      `Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`,\n    )\n  }\n}\n\nexport type OffsetOutOfBoundsErrorType = OffsetOutOfBoundsError & {\n  name: 'OffsetOutOfBoundsError'\n}\n/** @deprecated */\nexport class OffsetOutOfBoundsError extends BaseError {\n  override name = 'OffsetOutOfBoundsError' as const\n  constructor({ nextOffset, offset }: { nextOffset: number; offset: number }) {\n    super(\n      `Next offset (${nextOffset}) is greater than previous offset + consumed bytes (${offset})`,\n    )\n  }\n}\n\nexport type SizeOverflowErrorType = SizeOverflowError & {\n  name: 'SizeOverflowError'\n}\nexport class SizeOverflowError extends BaseError {\n  override name = 'SizeOverflowError' as const\n  constructor({ givenSize, maxSize }: { givenSize: number; maxSize: number }) {\n    super(\n      `Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`,\n    )\n  }\n}\n","import { BaseError } from './base.js'\n\nexport type EnsAvatarInvalidMetadataErrorType =\n  EnsAvatarInvalidMetadataError & {\n    name: 'EnsAvatarInvalidMetadataError'\n  }\nexport class EnsAvatarInvalidMetadataError extends BaseError {\n  override name = 'EnsAvatarInvalidMetadataError'\n  constructor({ data }: { data: any }) {\n    super(\n      'Unable to extract image from metadata. The metadata may be malformed or invalid.',\n      {\n        metaMessages: [\n          '- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.',\n          '',\n          `Provided data: ${JSON.stringify(data)}`,\n        ],\n      },\n    )\n  }\n}\n\nexport type EnsAvatarInvalidNftUriErrorType = EnsAvatarInvalidNftUriError & {\n  name: 'EnsAvatarInvalidNftUriError'\n}\nexport class EnsAvatarInvalidNftUriError extends BaseError {\n  override name = 'EnsAvatarInvalidNftUriError'\n  constructor({ reason }: { reason: string }) {\n    super(`ENS NFT avatar URI is invalid. ${reason}`)\n  }\n}\n\nexport type EnsAvatarUriResolutionErrorType = EnsAvatarUriResolutionError & {\n  name: 'EnsAvatarUriResolutionError'\n}\nexport class EnsAvatarUriResolutionError extends BaseError {\n  override name = 'EnsAvatarUriResolutionError'\n  constructor({ uri }: { uri: string }) {\n    super(\n      `Unable to resolve ENS avatar URI \"${uri}\". The URI may be malformed, invalid, or does not respond with a valid image.`,\n    )\n  }\n}\n\nexport type EnsAvatarUnsupportedNamespaceErrorType =\n  EnsAvatarUnsupportedNamespaceError & {\n    name: 'EnsAvatarUnsupportedNamespaceError'\n  }\nexport class EnsAvatarUnsupportedNamespaceError extends BaseError {\n  override name = 'EnsAvatarUnsupportedNamespaceError'\n  constructor({ namespace }: { namespace: string }) {\n    super(\n      `ENS NFT avatar namespace \"${namespace}\" is not supported. Must be \"erc721\" or \"erc1155\".`,\n    )\n  }\n}\n","import type { Account } from '../accounts/types.js'\nimport type { EstimateGasParameters } from '../actions/public/estimateGas.js'\nimport type { Chain } from '../types/chain.js'\nimport { formatEther } from '../utils/unit/formatEther.js'\nimport { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { BaseError } from './base.js'\nimport { prettyPrint } from './transaction.js'\n\nexport type EstimateGasExecutionErrorType = EstimateGasExecutionError & {\n  name: 'EstimateGasExecutionError'\n}\nexport class EstimateGasExecutionError extends BaseError {\n  override cause: BaseError\n\n  override name = 'EstimateGasExecutionError'\n\n  constructor(\n    cause: BaseError,\n    {\n      account,\n      docsPath,\n      chain,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    }: Omit<EstimateGasParameters<any, any>, 'account'> & {\n      account?: Account\n      chain?: Chain\n      docsPath?: string\n    },\n  ) {\n    const prettyArgs = prettyPrint({\n      from: account?.address,\n      to,\n      value:\n        typeof value !== 'undefined' &&\n        `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice:\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas:\n        typeof maxFeePerGas !== 'undefined' &&\n        `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas:\n        typeof maxPriorityFeePerGas !== 'undefined' &&\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce,\n    })\n\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n        'Estimate Gas Arguments:',\n        prettyArgs,\n      ].filter(Boolean) as string[],\n    })\n    this.cause = cause\n  }\n}\n","import { formatGwei } from '../utils/unit/formatGwei.js'\nimport { BaseError } from './base.js'\n\nexport type BaseFeeScalarErrorType = BaseFeeScalarError & {\n  name: 'BaseFeeScalarError'\n}\nexport class BaseFeeScalarError extends BaseError {\n  override name = 'BaseFeeScalarError'\n  constructor() {\n    super('`baseFeeMultiplier` must be greater than 1.')\n  }\n}\n\nexport type Eip1559FeesNotSupportedErrorType = Eip1559FeesNotSupportedError & {\n  name: 'Eip1559FeesNotSupportedError'\n}\nexport class Eip1559FeesNotSupportedError extends BaseError {\n  override name = 'Eip1559FeesNotSupportedError'\n  constructor() {\n    super('Chain does not support EIP-1559 fees.')\n  }\n}\n\nexport type MaxFeePerGasTooLowErrorType = MaxFeePerGasTooLowError & {\n  name: 'MaxFeePerGasTooLowError'\n}\nexport class MaxFeePerGasTooLowError extends BaseError {\n  override name = 'MaxFeePerGasTooLowError'\n  constructor({ maxPriorityFeePerGas }: { maxPriorityFeePerGas: bigint }) {\n    super(\n      `\\`maxFeePerGas\\` cannot be less than the \\`maxPriorityFeePerGas\\` (${formatGwei(\n        maxPriorityFeePerGas,\n      )} gwei).`,\n    )\n  }\n}\n","import { BaseError } from './base.js'\n\nexport type FilterTypeNotSupportedErrorType = FilterTypeNotSupportedError & {\n  name: 'FilterTypeNotSupportedError'\n}\nexport class FilterTypeNotSupportedError extends BaseError {\n  override name = 'FilterTypeNotSupportedError'\n  constructor(type: string) {\n    super(`Filter type \"${type}\" is not supported.`)\n  }\n}\n","import { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { BaseError } from './base.js'\n\n/**\n * geth:    https://github.com/ethereum/go-ethereum/blob/master/core/error.go\n *          https://github.com/ethereum/go-ethereum/blob/master/core/types/transaction.go#L34-L41\n *\n * erigon:  https://github.com/ledgerwatch/erigon/blob/master/core/error.go\n *          https://github.com/ledgerwatch/erigon/blob/master/core/types/transaction.go#L41-L46\n *\n * anvil:   https://github.com/foundry-rs/foundry/blob/master/anvil/src/eth/error.rs#L108\n */\nexport type ExecutionRevertedErrorType = ExecutionRevertedError & {\n  code: 3\n  name: 'ExecutionRevertedError'\n}\nexport class ExecutionRevertedError extends BaseError {\n  static code = 3\n  static nodeMessage = /execution reverted/\n\n  override name = 'ExecutionRevertedError'\n\n  constructor({\n    cause,\n    message,\n  }: { cause?: BaseError; message?: string } = {}) {\n    const reason = message\n      ?.replace('execution reverted: ', '')\n      ?.replace('execution reverted', '')\n    super(\n      `Execution reverted ${\n        reason ? `with reason: ${reason}` : 'for an unknown reason'\n      }.`,\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type FeeCapTooHighErrorType = FeeCapTooHighError & {\n  name: 'FeeCapTooHighError'\n}\nexport class FeeCapTooHighError extends BaseError {\n  static nodeMessage =\n    /max fee per gas higher than 2\\^256-1|fee cap higher than 2\\^256-1/\n  override name = 'FeeCapTooHigh'\n  constructor({\n    cause,\n    maxFeePerGas,\n  }: { cause?: BaseError; maxFeePerGas?: bigint } = {}) {\n    super(\n      `The fee cap (\\`maxFeePerGas\\`${\n        maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''\n      }) cannot be higher than the maximum allowed value (2^256-1).`,\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type FeeCapTooLowErrorType = FeeCapTooLowError & {\n  name: 'FeeCapTooLowError'\n}\nexport class FeeCapTooLowError extends BaseError {\n  static nodeMessage =\n    /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/\n  override name = 'FeeCapTooLow'\n  constructor({\n    cause,\n    maxFeePerGas,\n  }: { cause?: BaseError; maxFeePerGas?: bigint } = {}) {\n    super(\n      `The fee cap (\\`maxFeePerGas\\`${\n        maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)}` : ''\n      } gwei) cannot be lower than the block base fee.`,\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type NonceTooHighErrorType = NonceTooHighError & {\n  name: 'NonceTooHighError'\n}\nexport class NonceTooHighError extends BaseError {\n  static nodeMessage = /nonce too high/\n  override name = 'NonceTooHighError'\n  constructor({ cause, nonce }: { cause?: BaseError; nonce?: number } = {}) {\n    super(\n      `Nonce provided for the transaction ${\n        nonce ? `(${nonce}) ` : ''\n      }is higher than the next one expected.`,\n      { cause },\n    )\n  }\n}\n\nexport type NonceTooLowErrorType = NonceTooLowError & {\n  name: 'NonceTooLowError'\n}\nexport class NonceTooLowError extends BaseError {\n  static nodeMessage =\n    /nonce too low|transaction already imported|already known/\n  override name = 'NonceTooLowError'\n  constructor({ cause, nonce }: { cause?: BaseError; nonce?: number } = {}) {\n    super(\n      [\n        `Nonce provided for the transaction ${\n          nonce ? `(${nonce}) ` : ''\n        }is lower than the current nonce of the account.`,\n        'Try increasing the nonce or find the latest nonce with `getTransactionCount`.',\n      ].join('\\n'),\n      { cause },\n    )\n  }\n}\n\nexport type NonceMaxValueErrorType = NonceMaxValueError & {\n  name: 'NonceMaxValueError'\n}\nexport class NonceMaxValueError extends BaseError {\n  static nodeMessage = /nonce has max value/\n  override name = 'NonceMaxValueError'\n  constructor({ cause, nonce }: { cause?: BaseError; nonce?: number } = {}) {\n    super(\n      `Nonce provided for the transaction ${\n        nonce ? `(${nonce}) ` : ''\n      }exceeds the maximum allowed nonce.`,\n      { cause },\n    )\n  }\n}\n\nexport type InsufficientFundsErrorType = InsufficientFundsError & {\n  name: 'InsufficientFundsError'\n}\nexport class InsufficientFundsError extends BaseError {\n  static nodeMessage = /insufficient funds/\n  override name = 'InsufficientFundsError'\n  constructor({ cause }: { cause?: BaseError } = {}) {\n    super(\n      [\n        'The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account.',\n      ].join('\\n'),\n      {\n        cause,\n        metaMessages: [\n          'This error could arise when the account does not have enough funds to:',\n          ' - pay for the total gas fee,',\n          ' - pay for the value to send.',\n          ' ',\n          'The cost of the transaction is calculated as `gas * gas fee + value`, where:',\n          ' - `gas` is the amount of gas needed for transaction to execute,',\n          ' - `gas fee` is the gas fee,',\n          ' - `value` is the amount of ether to send to the recipient.',\n        ],\n      },\n    )\n  }\n}\n\nexport type IntrinsicGasTooHighErrorType = IntrinsicGasTooHighError & {\n  name: 'IntrinsicGasTooHighError'\n}\nexport class IntrinsicGasTooHighError extends BaseError {\n  static nodeMessage = /intrinsic gas too high|gas limit reached/\n  override name = 'IntrinsicGasTooHighError'\n  constructor({ cause, gas }: { cause?: BaseError; gas?: bigint } = {}) {\n    super(\n      `The amount of gas ${\n        gas ? `(${gas}) ` : ''\n      }provided for the transaction exceeds the limit allowed for the block.`,\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type IntrinsicGasTooLowErrorType = IntrinsicGasTooLowError & {\n  name: 'IntrinsicGasTooLowError'\n}\nexport class IntrinsicGasTooLowError extends BaseError {\n  static nodeMessage = /intrinsic gas too low/\n  override name = 'IntrinsicGasTooLowError'\n  constructor({ cause, gas }: { cause?: BaseError; gas?: bigint } = {}) {\n    super(\n      `The amount of gas ${\n        gas ? `(${gas}) ` : ''\n      }provided for the transaction is too low.`,\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type TransactionTypeNotSupportedErrorType =\n  TransactionTypeNotSupportedError & {\n    name: 'TransactionTypeNotSupportedError'\n  }\nexport class TransactionTypeNotSupportedError extends BaseError {\n  static nodeMessage = /transaction type not valid/\n  override name = 'TransactionTypeNotSupportedError'\n  constructor({ cause }: { cause?: BaseError }) {\n    super('The transaction type is not supported for this chain.', {\n      cause,\n    })\n  }\n}\n\nexport type TipAboveFeeCapErrorType = TipAboveFeeCapError & {\n  name: 'TipAboveFeeCapError'\n}\nexport class TipAboveFeeCapError extends BaseError {\n  static nodeMessage =\n    /max priority fee per gas higher than max fee per gas|tip higher than fee cap/\n  override name = 'TipAboveFeeCapError'\n  constructor({\n    cause,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n  }: {\n    cause?: BaseError\n    maxPriorityFeePerGas?: bigint\n    maxFeePerGas?: bigint\n  } = {}) {\n    super(\n      [\n        `The provided tip (\\`maxPriorityFeePerGas\\`${\n          maxPriorityFeePerGas\n            ? ` = ${formatGwei(maxPriorityFeePerGas)} gwei`\n            : ''\n        }) cannot be higher than the fee cap (\\`maxFeePerGas\\`${\n          maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''\n        }).`,\n      ].join('\\n'),\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type UnknownNodeErrorType = UnknownNodeError & {\n  name: 'UnknownNodeError'\n}\nexport class UnknownNodeError extends BaseError {\n  override name = 'UnknownNodeError'\n\n  constructor({ cause }: { cause?: BaseError }) {\n    super(`An error occurred while executing: ${cause?.shortMessage}`, {\n      cause,\n    })\n  }\n}\n","import { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport type HttpRequestErrorType = HttpRequestError & {\n  name: 'HttpRequestError'\n}\nexport class HttpRequestError extends BaseError {\n  override name = 'HttpRequestError'\n\n  body?: { [x: string]: unknown } | { [y: string]: unknown }[]\n  headers?: Headers\n  status?: number\n  url: string\n\n  constructor({\n    body,\n    details,\n    headers,\n    status,\n    url,\n  }: {\n    body?: { [x: string]: unknown } | { [y: string]: unknown }[]\n    details?: string\n    headers?: Headers\n    status?: number\n    url: string\n  }) {\n    super('HTTP request failed.', {\n      details,\n      metaMessages: [\n        status && `Status: ${status}`,\n        `URL: ${getUrl(url)}`,\n        body && `Request body: ${stringify(body)}`,\n      ].filter(Boolean) as string[],\n    })\n    this.body = body\n    this.headers = headers\n    this.status = status\n    this.url = url\n  }\n}\n\nexport type WebSocketRequestErrorType = WebSocketRequestError & {\n  name: 'WebSocketRequestError'\n}\nexport class WebSocketRequestError extends BaseError {\n  override name = 'WebSocketRequestError'\n\n  constructor({\n    body,\n    details,\n    url,\n  }: {\n    body: { [key: string]: unknown }\n    details: string\n    url: string\n  }) {\n    super('WebSocket request failed.', {\n      details,\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n    })\n  }\n}\n\nexport type RpcRequestErrorType = RpcRequestError & {\n  name: 'RpcRequestError'\n}\nexport class RpcRequestError extends BaseError {\n  override name = 'RpcRequestError'\n\n  code: number\n\n  constructor({\n    body,\n    error,\n    url,\n  }: {\n    body: { [x: string]: unknown } | { [y: string]: unknown }[]\n    error: { code: number; message: string }\n    url: string\n  }) {\n    super('RPC Request failed.', {\n      cause: error as any,\n      details: error.message,\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n    })\n    this.code = error.code\n  }\n}\n\nexport type TimeoutErrorType = TimeoutError & {\n  name: 'TimeoutError'\n}\nexport class TimeoutError extends BaseError {\n  override name = 'TimeoutError'\n\n  constructor({\n    body,\n    url,\n  }: {\n    body: { [x: string]: unknown } | { [y: string]: unknown }[]\n    url: string\n  }) {\n    super('The request took too long to respond.', {\n      details: 'The request timed out.',\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n    })\n  }\n}\n","import type { Prettify } from '../types/utils.js'\nimport { BaseError } from './base.js'\nimport { RpcRequestError } from './request.js'\n\nconst unknownErrorCode = -1\n\nexport type RpcErrorCode =\n  | -1\n  | -32700 // Parse error\n  | -32600 // Invalid request\n  | -32601 // Method not found\n  | -32602 // Invalid params\n  | -32603 // Internal error\n  | -32000 // Invalid input\n  | -32001 // Resource not found\n  | -32002 // Resource unavailable\n  | -32003 // Transaction rejected\n  | -32004 // Method not supported\n  | -32005 // Limit exceeded\n  | -32006 // JSON-RPC version not supported\n  | -32042 // Method not found\n\ntype RpcErrorOptions<TCode extends number = RpcErrorCode> = {\n  code?: TCode | (number & {})\n  docsPath?: string\n  metaMessages?: string[]\n  shortMessage: string\n}\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n *\n * - EIP https://eips.ethereum.org/EIPS/eip-1474\n */\nexport type RpcErrorType = RpcError & { name: 'RpcError' }\nexport class RpcError<TCode extends number = RpcErrorCode> extends BaseError {\n  override name = 'RpcError'\n\n  code: TCode | (number & {})\n\n  constructor(\n    cause: Error,\n    { code, docsPath, metaMessages, shortMessage }: RpcErrorOptions<TCode>,\n  ) {\n    super(shortMessage, {\n      cause,\n      docsPath,\n      metaMessages:\n        metaMessages || (cause as { metaMessages?: string[] })?.metaMessages,\n    })\n    this.name = cause.name\n    this.code = (\n      cause instanceof RpcRequestError ? cause.code : code ?? unknownErrorCode\n    ) as TCode\n  }\n}\n\nexport type ProviderRpcErrorCode =\n  | 4001 // User Rejected Request\n  | 4100 // Unauthorized\n  | 4200 // Unsupported Method\n  | 4900 // Disconnected\n  | 4901 // Chain Disconnected\n  | 4902 // Chain Not Recognized\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n *\n * - EIP https://eips.ethereum.org/EIPS/eip-1193\n */\nexport type ProviderRpcErrorType = ProviderRpcError & {\n  name: 'ProviderRpcError'\n}\nexport class ProviderRpcError<\n  T = undefined,\n> extends RpcError<ProviderRpcErrorCode> {\n  override name = 'ProviderRpcError'\n\n  data?: T\n\n  constructor(\n    cause: Error,\n    options: Prettify<\n      RpcErrorOptions<ProviderRpcErrorCode> & {\n        data?: T\n      }\n    >,\n  ) {\n    super(cause, options)\n\n    this.data = options.data\n  }\n}\n\n/**\n * Subclass for a \"Parse error\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type ParseRpcErrorType = ParseRpcError & {\n  code: -32700\n  name: 'ParseRpcError'\n}\nexport class ParseRpcError extends RpcError {\n  override name = 'ParseRpcError'\n  static code = -32700 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ParseRpcError.code,\n      shortMessage:\n        'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Invalid request\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InvalidRequestRpcErrorType = InvalidRequestRpcError & {\n  code: -32600\n  name: 'InvalidRequestRpcError'\n}\nexport class InvalidRequestRpcError extends RpcError {\n  override name = 'InvalidRequestRpcError'\n  static code = -32600 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InvalidRequestRpcError.code,\n      shortMessage: 'JSON is not a valid request object.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Method not found\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type MethodNotFoundRpcErrorType = MethodNotFoundRpcError & {\n  code: -32601\n  name: 'MethodNotFoundRpcError'\n}\nexport class MethodNotFoundRpcError extends RpcError {\n  override name = 'MethodNotFoundRpcError'\n  static code = -32601 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: MethodNotFoundRpcError.code,\n      shortMessage: 'The method does not exist / is not available.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Invalid params\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InvalidParamsRpcErrorType = InvalidParamsRpcError & {\n  code: -32602\n  name: 'InvalidParamsRpcError'\n}\nexport class InvalidParamsRpcError extends RpcError {\n  override name = 'InvalidParamsRpcError'\n  static code = -32602 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InvalidParamsRpcError.code,\n      shortMessage: [\n        'Invalid parameters were provided to the RPC method.',\n        'Double check you have provided the correct parameters.',\n      ].join('\\n'),\n    })\n  }\n}\n\n/**\n * Subclass for an \"Internal error\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InternalRpcErrorType = InternalRpcError & {\n  code: -32603\n  name: 'InternalRpcError'\n}\nexport class InternalRpcError extends RpcError {\n  override name = 'InternalRpcError'\n  static code = -32603 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InternalRpcError.code,\n      shortMessage: 'An internal error was received.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Invalid input\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InvalidInputRpcErrorType = InvalidInputRpcError & {\n  code: -32000\n  name: 'InvalidInputRpcError'\n}\nexport class InvalidInputRpcError extends RpcError {\n  override name = 'InvalidInputRpcError'\n  static code = -32000 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InvalidInputRpcError.code,\n      shortMessage: [\n        'Missing or invalid parameters.',\n        'Double check you have provided the correct parameters.',\n      ].join('\\n'),\n    })\n  }\n}\n\n/**\n * Subclass for a \"Resource not found\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type ResourceNotFoundRpcErrorType = ResourceNotFoundRpcError & {\n  code: -32001\n  name: 'ResourceNotFoundRpcError'\n}\nexport class ResourceNotFoundRpcError extends RpcError {\n  override name = 'ResourceNotFoundRpcError'\n  static code = -32001 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ResourceNotFoundRpcError.code,\n      shortMessage: 'Requested resource not found.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Resource unavailable\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type ResourceUnavailableRpcErrorType = ResourceUnavailableRpcError & {\n  code: -32002\n  name: 'ResourceUnavailableRpcError'\n}\nexport class ResourceUnavailableRpcError extends RpcError {\n  override name = 'ResourceUnavailableRpcError'\n  static code = -32002 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ResourceUnavailableRpcError.code,\n      shortMessage: 'Requested resource not available.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Transaction rejected\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type TransactionRejectedRpcErrorType = TransactionRejectedRpcError & {\n  code: -32003\n  name: 'TransactionRejectedRpcError'\n}\nexport class TransactionRejectedRpcError extends RpcError {\n  override name = 'TransactionRejectedRpcError'\n  static code = -32003 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: TransactionRejectedRpcError.code,\n      shortMessage: 'Transaction creation failed.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Method not supported\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type MethodNotSupportedRpcErrorType = MethodNotSupportedRpcError & {\n  code: -32004\n  name: 'MethodNotSupportedRpcError'\n}\nexport class MethodNotSupportedRpcError extends RpcError {\n  override name = 'MethodNotSupportedRpcError'\n  static code = -32004 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: MethodNotSupportedRpcError.code,\n      shortMessage: 'Method is not implemented.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Limit exceeded\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type LimitExceededRpcErrorType = LimitExceededRpcError & {\n  code: -32005\n  name: 'LimitExceededRpcError'\n}\nexport class LimitExceededRpcError extends RpcError {\n  override name = 'LimitExceededRpcError'\n  static code = -32005 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: LimitExceededRpcError.code,\n      shortMessage: 'Request exceeds defined limit.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"JSON-RPC version not supported\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type JsonRpcVersionUnsupportedErrorType =\n  JsonRpcVersionUnsupportedError & {\n    code: -32006\n    name: 'JsonRpcVersionUnsupportedError'\n  }\nexport class JsonRpcVersionUnsupportedError extends RpcError {\n  override name = 'JsonRpcVersionUnsupportedError'\n  static code = -32006 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: JsonRpcVersionUnsupportedError.code,\n      shortMessage: 'Version of JSON-RPC protocol is not supported.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"User Rejected Request\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type UserRejectedRequestErrorType = UserRejectedRequestError & {\n  code: 4001\n  name: 'UserRejectedRequestError'\n}\nexport class UserRejectedRequestError extends ProviderRpcError {\n  override name = 'UserRejectedRequestError'\n  static code = 4001 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: UserRejectedRequestError.code,\n      shortMessage: 'User rejected the request.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Unauthorized\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type UnauthorizedProviderErrorType = UnauthorizedProviderError & {\n  code: 4100\n  name: 'UnauthorizedProviderError'\n}\nexport class UnauthorizedProviderError extends ProviderRpcError {\n  override name = 'UnauthorizedProviderError'\n  static code = 4100 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: UnauthorizedProviderError.code,\n      shortMessage:\n        'The requested method and/or account has not been authorized by the user.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Unsupported Method\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type UnsupportedProviderMethodErrorType =\n  UnsupportedProviderMethodError & {\n    code: 4200\n    name: 'UnsupportedProviderMethodError'\n  }\nexport class UnsupportedProviderMethodError extends ProviderRpcError {\n  override name = 'UnsupportedProviderMethodError'\n  static code = 4200 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: UnsupportedProviderMethodError.code,\n      shortMessage: 'The Provider does not support the requested method.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Disconnected\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type ProviderDisconnectedErrorType = ProviderDisconnectedError & {\n  code: 4900\n  name: 'ProviderDisconnectedError'\n}\nexport class ProviderDisconnectedError extends ProviderRpcError {\n  override name = 'ProviderDisconnectedError'\n  static code = 4900 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ProviderDisconnectedError.code,\n      shortMessage: 'The Provider is disconnected from all chains.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Chain Disconnected\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type ChainDisconnectedErrorType = ChainDisconnectedError & {\n  code: 4901\n  name: 'ChainDisconnectedError'\n}\nexport class ChainDisconnectedError extends ProviderRpcError {\n  override name = 'ChainDisconnectedError'\n  static code = 4901 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ChainDisconnectedError.code,\n      shortMessage: 'The Provider is not connected to the requested chain.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Switch Chain\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type SwitchChainErrorType = SwitchChainError & {\n  code: 4902\n  name: 'SwitchChainError'\n}\nexport class SwitchChainError extends ProviderRpcError {\n  override name = 'SwitchChainError'\n  static code = 4902 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: SwitchChainError.code,\n      shortMessage: 'An error occurred when attempting to switch chain.',\n    })\n  }\n}\n\n/**\n * Subclass for an unknown RPC error.\n */\nexport type UnknownRpcErrorType = UnknownRpcError & {\n  name: 'UnknownRpcError'\n}\nexport class UnknownRpcError extends RpcError {\n  override name = 'UnknownRpcError'\n\n  constructor(cause: Error) {\n    super(cause, {\n      shortMessage: 'An unknown RPC error occurred.',\n    })\n  }\n}\n","import type { Account } from '../accounts/types.js'\nimport type { SendTransactionParameters } from '../actions/wallet/sendTransaction.js'\nimport type { BlockTag } from '../types/block.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hash, Hex } from '../types/misc.js'\nimport type { TransactionType } from '../types/transaction.js'\nimport { formatEther } from '../utils/unit/formatEther.js'\nimport { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { BaseError } from './base.js'\n\nexport function prettyPrint(\n  args: Record<string, bigint | number | string | undefined | false | unknown>,\n) {\n  const entries = Object.entries(args)\n    .map(([key, value]) => {\n      if (value === undefined || value === false) return null\n      return [key, value]\n    })\n    .filter(Boolean) as [string, string][]\n  const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0)\n  return entries\n    .map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`)\n    .join('\\n')\n}\n\nexport type FeeConflictErrorType = FeeConflictError & {\n  name: 'FeeConflictError'\n}\nexport class FeeConflictError extends BaseError {\n  override name = 'FeeConflictError'\n  constructor() {\n    super(\n      [\n        'Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.',\n        'Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others.',\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type InvalidLegacyVErrorType = InvalidLegacyVError & {\n  name: 'InvalidLegacyVError'\n}\nexport class InvalidLegacyVError extends BaseError {\n  override name = 'InvalidLegacyVError'\n\n  constructor({ v }: { v: bigint }) {\n    super(`Invalid \\`v\\` value \"${v}\". Expected 27 or 28.`)\n  }\n}\n\nexport type InvalidSerializableTransactionErrorType =\n  InvalidSerializableTransactionError & {\n    name: 'InvalidSerializableTransactionError'\n  }\nexport class InvalidSerializableTransactionError extends BaseError {\n  override name = 'InvalidSerializableTransactionError'\n\n  constructor({ transaction }: { transaction: Record<string, unknown> }) {\n    super('Cannot infer a transaction type from provided transaction.', {\n      metaMessages: [\n        'Provided Transaction:',\n        '{',\n        prettyPrint(transaction),\n        '}',\n        '',\n        'To infer the type, either provide:',\n        '- a `type` to the Transaction, or',\n        '- an EIP-1559 Transaction with `maxFeePerGas`, or',\n        '- an EIP-2930 Transaction with `gasPrice` & `accessList`, or',\n        '- a Legacy Transaction with `gasPrice`',\n      ],\n    })\n  }\n}\n\nexport type InvalidSerializedTransactionTypeErrorType =\n  InvalidSerializedTransactionTypeError & {\n    name: 'InvalidSerializedTransactionTypeError'\n  }\nexport class InvalidSerializedTransactionTypeError extends BaseError {\n  override name = 'InvalidSerializedTransactionType'\n\n  serializedType: Hex\n\n  constructor({ serializedType }: { serializedType: Hex }) {\n    super(`Serialized transaction type \"${serializedType}\" is invalid.`)\n\n    this.serializedType = serializedType\n  }\n}\n\nexport type InvalidSerializedTransactionErrorType =\n  InvalidSerializedTransactionError & {\n    name: 'InvalidSerializedTransactionError'\n  }\nexport class InvalidSerializedTransactionError extends BaseError {\n  override name = 'InvalidSerializedTransactionError'\n\n  serializedTransaction: Hex\n  type: TransactionType\n\n  constructor({\n    attributes,\n    serializedTransaction,\n    type,\n  }: {\n    attributes: Record<string, unknown>\n    serializedTransaction: Hex\n    type: TransactionType\n  }) {\n    const missing = Object.entries(attributes)\n      .map(([key, value]) => (typeof value === 'undefined' ? key : undefined))\n      .filter(Boolean)\n    super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\n      metaMessages: [\n        `Serialized Transaction: \"${serializedTransaction}\"`,\n        missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : '',\n      ].filter(Boolean),\n    })\n\n    this.serializedTransaction = serializedTransaction\n    this.type = type\n  }\n}\n\nexport type InvalidStorageKeySizeErrorType = InvalidStorageKeySizeError & {\n  name: 'InvalidStorageKeySizeError'\n}\nexport class InvalidStorageKeySizeError extends BaseError {\n  override name = 'InvalidStorageKeySizeError'\n\n  constructor({ storageKey }: { storageKey: Hex }) {\n    super(\n      `Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${Math.floor(\n        (storageKey.length - 2) / 2,\n      )} bytes.`,\n    )\n  }\n}\n\nexport type TransactionExecutionErrorType = TransactionExecutionError & {\n  name: 'TransactionExecutionError'\n}\nexport class TransactionExecutionError extends BaseError {\n  override cause: BaseError\n\n  override name = 'TransactionExecutionError'\n\n  constructor(\n    cause: BaseError,\n    {\n      account,\n      docsPath,\n      chain,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    }: Omit<SendTransactionParameters, 'account' | 'chain'> & {\n      account: Account\n      chain?: Chain\n      docsPath?: string\n    },\n  ) {\n    const prettyArgs = prettyPrint({\n      chain: chain && `${chain?.name} (id: ${chain?.id})`,\n      from: account?.address,\n      to,\n      value:\n        typeof value !== 'undefined' &&\n        `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice:\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas:\n        typeof maxFeePerGas !== 'undefined' &&\n        `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas:\n        typeof maxPriorityFeePerGas !== 'undefined' &&\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce,\n    })\n\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n        'Request Arguments:',\n        prettyArgs,\n      ].filter(Boolean) as string[],\n    })\n    this.cause = cause\n  }\n}\n\nexport type TransactionNotFoundErrorType = TransactionNotFoundError & {\n  name: 'TransactionNotFoundError'\n}\nexport class TransactionNotFoundError extends BaseError {\n  override name = 'TransactionNotFoundError'\n  constructor({\n    blockHash,\n    blockNumber,\n    blockTag,\n    hash,\n    index,\n  }: {\n    blockHash?: Hash\n    blockNumber?: bigint\n    blockTag?: BlockTag\n    hash?: Hash\n    index?: number\n  }) {\n    let identifier = 'Transaction'\n    if (blockTag && index !== undefined)\n      identifier = `Transaction at block time \"${blockTag}\" at index \"${index}\"`\n    if (blockHash && index !== undefined)\n      identifier = `Transaction at block hash \"${blockHash}\" at index \"${index}\"`\n    if (blockNumber && index !== undefined)\n      identifier = `Transaction at block number \"${blockNumber}\" at index \"${index}\"`\n    if (hash) identifier = `Transaction with hash \"${hash}\"`\n    super(`${identifier} could not be found.`)\n  }\n}\n\nexport type TransactionReceiptNotFoundErrorType =\n  TransactionReceiptNotFoundError & {\n    name: 'TransactionReceiptNotFoundError'\n  }\nexport class TransactionReceiptNotFoundError extends BaseError {\n  override name = 'TransactionReceiptNotFoundError'\n  constructor({ hash }: { hash: Hash }) {\n    super(\n      `Transaction receipt with hash \"${hash}\" could not be found. The Transaction may not be processed on a block yet.`,\n    )\n  }\n}\n\nexport type WaitForTransactionReceiptTimeoutErrorType =\n  WaitForTransactionReceiptTimeoutError & {\n    name: 'WaitForTransactionReceiptTimeoutError'\n  }\nexport class WaitForTransactionReceiptTimeoutError extends BaseError {\n  override name = 'WaitForTransactionReceiptTimeoutError'\n  constructor({ hash }: { hash: Hash }) {\n    super(\n      `Timed out while waiting for transaction with hash \"${hash}\" to be confirmed.`,\n    )\n  }\n}\n","import { BaseError } from './base.js'\n\nexport type UrlRequiredErrorType = UrlRequiredError & {\n  name: 'UrlRequiredError'\n}\nexport class UrlRequiredError extends BaseError {\n  constructor() {\n    super(\n      'No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.',\n      {\n        docsPath: '/docs/clients/intro',\n      },\n    )\n  }\n}\n","import type { Address } from 'abitype'\n\nimport { version } from './version.js'\n\nexport type ErrorType<name extends string = 'Error'> = Error & { name: name }\n\nexport const getContractAddress = (address: Address) => address\nexport const getUrl = (url: string) => url\nexport const getVersion = () => `viem@${version}`\n","export const version = '1.21.3'\n","export {\n  type Abi,\n  type Address,\n  type Narrow,\n  type ParseAbi,\n  type ParseAbiItem,\n  type ParseAbiParameter,\n  type ParseAbiParameters,\n  type ResolvedConfig,\n  type TypedData,\n  type TypedDataDomain,\n  type TypedDataParameter,\n  CircularReferenceError,\n  InvalidAbiParameterError,\n  InvalidAbiParametersError,\n  InvalidAbiItemError,\n  InvalidAbiTypeParameterError,\n  InvalidFunctionModifierError,\n  InvalidModifierError,\n  InvalidParameterError,\n  InvalidParenthesisError,\n  InvalidSignatureError,\n  InvalidStructSignatureError,\n  SolidityProtectedKeywordError,\n  UnknownTypeError,\n  UnknownSignatureError,\n  parseAbi,\n  parseAbiItem,\n  parseAbiParameter,\n  parseAbiParameters,\n} from 'abitype'\n\nexport {\n  getContract,\n  type GetContractErrorType,\n  type GetContractParameters,\n  type GetContractReturnType,\n} from './actions/getContract.js'\nexport {\n  type AddChainErrorType,\n  type AddChainParameters,\n} from './actions/wallet/addChain.js'\nexport {\n  type CallErrorType,\n  type CallParameters,\n  type CallReturnType,\n} from './actions/public/call.js'\nexport type {\n  CreateBlockFilterErrorType,\n  CreateBlockFilterReturnType,\n} from './actions/public/createBlockFilter.js'\nexport type {\n  CreateContractEventFilterErrorType,\n  CreateContractEventFilterParameters,\n  CreateContractEventFilterReturnType,\n} from './actions/public/createContractEventFilter.js'\nexport type {\n  CreateEventFilterErrorType,\n  CreateEventFilterParameters,\n  CreateEventFilterReturnType,\n} from './actions/public/createEventFilter.js'\nexport type {\n  CreatePendingTransactionFilterErrorType,\n  CreatePendingTransactionFilterReturnType,\n} from './actions/public/createPendingTransactionFilter.js'\nexport type {\n  DeployContractErrorType,\n  DeployContractParameters,\n  DeployContractReturnType,\n} from './actions/wallet/deployContract.js'\nexport type {\n  DropTransactionErrorType,\n  DropTransactionParameters,\n} from './actions/test/dropTransaction.js'\nexport type {\n  GetAutomineErrorType,\n  GetAutomineReturnType,\n} from './actions/test/getAutomine.js'\nexport type {\n  EstimateContractGasErrorType,\n  EstimateContractGasParameters,\n  EstimateContractGasReturnType,\n} from './actions/public/estimateContractGas.js'\nexport type {\n  EstimateGasErrorType,\n  EstimateGasParameters,\n  EstimateGasReturnType,\n} from './actions/public/estimateGas.js'\nexport type {\n  EstimateFeesPerGasErrorType,\n  EstimateFeesPerGasParameters,\n  EstimateFeesPerGasReturnType,\n} from './actions/public/estimateFeesPerGas.js'\nexport type {\n  EstimateMaxPriorityFeePerGasErrorType,\n  EstimateMaxPriorityFeePerGasParameters,\n  EstimateMaxPriorityFeePerGasReturnType,\n} from './actions/public/estimateMaxPriorityFeePerGas.js'\nexport type {\n  GetAddressesErrorType,\n  GetAddressesReturnType,\n} from './actions/wallet/getAddresses.js'\nexport type {\n  GetBalanceErrorType,\n  GetBalanceParameters,\n  GetBalanceReturnType,\n} from './actions/public/getBalance.js'\nexport type {\n  GetBlockNumberErrorType,\n  GetBlockNumberParameters,\n  GetBlockNumberReturnType,\n} from './actions/public/getBlockNumber.js'\nexport type {\n  GetBlockErrorType,\n  GetBlockParameters,\n  GetBlockReturnType,\n} from './actions/public/getBlock.js'\nexport type {\n  GetBlockTransactionCountErrorType,\n  GetBlockTransactionCountParameters,\n  GetBlockTransactionCountReturnType,\n} from './actions/public/getBlockTransactionCount.js'\nexport type {\n  GetBytecodeErrorType,\n  GetBytecodeParameters,\n  GetBytecodeReturnType,\n} from './actions/public/getBytecode.js'\nexport type {\n  GetChainIdErrorType,\n  GetChainIdReturnType,\n} from './actions/public/getChainId.js'\nexport type {\n  GetEnsAddressErrorType,\n  GetEnsAddressParameters,\n  GetEnsAddressReturnType,\n} from './actions/ens/getEnsAddress.js'\nexport type {\n  GetEnsNameErrorType,\n  GetEnsNameParameters,\n  GetEnsNameReturnType,\n} from './actions/ens/getEnsName.js'\nexport type {\n  GetEnsResolverErrorType,\n  GetEnsResolverParameters,\n  GetEnsResolverReturnType,\n} from './actions/ens/getEnsResolver.js'\nexport type {\n  GetFeeHistoryErrorType,\n  GetFeeHistoryParameters,\n  GetFeeHistoryReturnType,\n} from './actions/public/getFeeHistory.js'\nexport type {\n  GetFilterChangesErrorType,\n  GetFilterChangesParameters,\n  GetFilterChangesReturnType,\n} from './actions/public/getFilterChanges.js'\nexport type {\n  GetFilterLogsErrorType,\n  GetFilterLogsParameters,\n  GetFilterLogsReturnType,\n} from './actions/public/getFilterLogs.js'\nexport type {\n  GetGasPriceErrorType,\n  GetGasPriceReturnType,\n} from './actions/public/getGasPrice.js'\nexport type {\n  GetLogsErrorType,\n  GetLogsParameters,\n  GetLogsReturnType,\n} from './actions/public/getLogs.js'\nexport type {\n  GetPermissionsErrorType,\n  GetPermissionsReturnType,\n} from './actions/wallet/getPermissions.js'\nexport type {\n  GetStorageAtErrorType,\n  GetStorageAtParameters,\n  GetStorageAtReturnType,\n} from './actions/public/getStorageAt.js'\nexport type {\n  GetTransactionConfirmationsErrorType,\n  GetTransactionConfirmationsParameters,\n  GetTransactionConfirmationsReturnType,\n} from './actions/public/getTransactionConfirmations.js'\nexport type {\n  GetTransactionCountErrorType,\n  GetTransactionCountParameters,\n  GetTransactionCountReturnType,\n} from './actions/public/getTransactionCount.js'\nexport type {\n  GetTransactionErrorType,\n  GetTransactionParameters,\n  GetTransactionReturnType,\n} from './actions/public/getTransaction.js'\nexport type {\n  GetTransactionReceiptErrorType,\n  GetTransactionReceiptParameters,\n  GetTransactionReceiptReturnType,\n} from './actions/public/getTransactionReceipt.js'\nexport type {\n  ImpersonateAccountErrorType,\n  ImpersonateAccountParameters,\n} from './actions/test/impersonateAccount.js'\nexport type {\n  IncreaseTimeErrorType,\n  IncreaseTimeParameters,\n} from './actions/test/increaseTime.js'\nexport type { MineErrorType, MineParameters } from './actions/test/mine.js'\nexport type {\n  MulticallErrorType,\n  MulticallParameters,\n  MulticallReturnType,\n} from './actions/public/multicall.js'\nexport type {\n  OnBlock,\n  OnBlockParameter,\n  WatchBlocksErrorType,\n  WatchBlocksParameters,\n  WatchBlocksReturnType,\n} from './actions/public/watchBlocks.js'\nexport type {\n  OnBlockNumberFn,\n  OnBlockNumberParameter,\n  WatchBlockNumberErrorType,\n  WatchBlockNumberParameters,\n  WatchBlockNumberReturnType,\n} from './actions/public/watchBlockNumber.js'\nexport type {\n  WatchEventOnLogsFn,\n  /** @deprecated - use `WatchEventOnLogsFn` instead. */\n  WatchEventOnLogsFn as OnLogFn,\n  WatchEventOnLogsParameter,\n  /** @deprecated - use `WatchEventOnLogsParameter` instead. */\n  WatchEventOnLogsParameter as OnLogParameter,\n  WatchEventErrorType,\n  WatchEventParameters,\n  WatchEventReturnType,\n} from './actions/public/watchEvent.js'\nexport type {\n  OnTransactionsFn,\n  OnTransactionsParameter,\n  WatchPendingTransactionsErrorType,\n  WatchPendingTransactionsParameters,\n  WatchPendingTransactionsReturnType,\n} from './actions/public/watchPendingTransactions.js'\nexport type {\n  ReadContractErrorType,\n  ReadContractParameters,\n  ReadContractReturnType,\n} from './actions/public/readContract.js'\nexport type {\n  ReplacementReason,\n  ReplacementReturnType,\n  WaitForTransactionReceiptErrorType,\n  WaitForTransactionReceiptParameters,\n  WaitForTransactionReceiptReturnType,\n} from './actions/public/waitForTransactionReceipt.js'\nexport type {\n  RequestAddressesErrorType,\n  RequestAddressesReturnType,\n} from './actions/wallet/requestAddresses.js'\nexport type {\n  RequestPermissionsErrorType,\n  RequestPermissionsReturnType,\n  RequestPermissionsParameters,\n} from './actions/wallet/requestPermissions.js'\nexport type {\n  GetTxpoolContentErrorType,\n  GetTxpoolContentReturnType,\n} from './actions/test/getTxpoolContent.js'\nexport type {\n  GetTxpoolStatusErrorType,\n  GetTxpoolStatusReturnType,\n} from './actions/test/getTxpoolStatus.js'\nexport type {\n  InspectTxpoolErrorType,\n  InspectTxpoolReturnType,\n} from './actions/test/inspectTxpool.js'\nexport type { ResetErrorType, ResetParameters } from './actions/test/reset.js'\nexport type {\n  RevertErrorType,\n  RevertParameters,\n} from './actions/test/revert.js'\nexport type {\n  SendTransactionErrorType,\n  SendTransactionParameters,\n  SendTransactionReturnType,\n} from './actions/wallet/sendTransaction.js'\nexport type {\n  PrepareTransactionRequestErrorType,\n  PrepareTransactionRequestParameters,\n  PrepareTransactionRequestReturnType,\n  /** @deprecated import `prepareTransactionRequest` from `viem/actions` instead. */\n  prepareTransactionRequest as prepareRequest,\n} from './actions/wallet/prepareTransactionRequest.js'\nexport type {\n  SendUnsignedTransactionErrorType,\n  SendUnsignedTransactionParameters,\n  SendUnsignedTransactionReturnType,\n} from './actions/test/sendUnsignedTransaction.js'\nexport type {\n  SetBalanceErrorType,\n  SetBalanceParameters,\n} from './actions/test/setBalance.js'\nexport type {\n  SetBlockGasLimitErrorType,\n  SetBlockGasLimitParameters,\n} from './actions/test/setBlockGasLimit.js'\nexport type {\n  SetBlockTimestampIntervalErrorType,\n  SetBlockTimestampIntervalParameters,\n} from './actions/test/setBlockTimestampInterval.js'\nexport type {\n  SetCodeErrorType,\n  SetCodeParameters,\n} from './actions/test/setCode.js'\nexport type {\n  SetCoinbaseErrorType,\n  SetCoinbaseParameters,\n} from './actions/test/setCoinbase.js'\nexport type {\n  SetIntervalMiningErrorType,\n  SetIntervalMiningParameters,\n} from './actions/test/setIntervalMining.js'\nexport type {\n  SetMinGasPriceErrorType,\n  SetMinGasPriceParameters,\n} from './actions/test/setMinGasPrice.js'\nexport type {\n  SetNextBlockBaseFeePerGasErrorType,\n  SetNextBlockBaseFeePerGasParameters,\n} from './actions/test/setNextBlockBaseFeePerGas.js'\nexport type {\n  SetNextBlockTimestampErrorType,\n  SetNextBlockTimestampParameters,\n} from './actions/test/setNextBlockTimestamp.js'\nexport type {\n  SetNonceErrorType,\n  SetNonceParameters,\n} from './actions/test/setNonce.js'\nexport type {\n  SetStorageAtErrorType,\n  SetStorageAtParameters,\n} from './actions/test/setStorageAt.js'\nexport type {\n  SignMessageErrorType,\n  SignMessageParameters,\n  SignMessageReturnType,\n} from './actions/wallet/signMessage.js'\nexport type {\n  SignTypedDataErrorType,\n  SignTypedDataParameters,\n  SignTypedDataReturnType,\n} from './actions/wallet/signTypedData.js'\nexport type {\n  SimulateContractErrorType,\n  SimulateContractParameters,\n  SimulateContractReturnType,\n} from './actions/public/simulateContract.js'\nexport type {\n  StopImpersonatingAccountErrorType,\n  StopImpersonatingAccountParameters,\n} from './actions/test/stopImpersonatingAccount.js'\nexport type {\n  SwitchChainErrorType,\n  SwitchChainParameters,\n} from './actions/wallet/switchChain.js'\nexport type {\n  UninstallFilterErrorType,\n  UninstallFilterParameters,\n  UninstallFilterReturnType,\n} from './actions/public/uninstallFilter.js'\nexport type {\n  WatchAssetErrorType,\n  WatchAssetParameters,\n  WatchAssetReturnType,\n} from './actions/wallet/watchAsset.js'\nexport type {\n  VerifyHashErrorType,\n  VerifyHashParameters,\n  VerifyHashReturnType,\n} from './actions/public/verifyHash.js'\nexport type {\n  WatchContractEventOnLogsParameter,\n  WatchContractEventErrorType,\n  WatchContractEventParameters,\n  WatchContractEventReturnType,\n} from './actions/public/watchContractEvent.js'\nexport type {\n  WriteContractErrorType,\n  WriteContractParameters,\n  WriteContractReturnType,\n} from './actions/wallet/writeContract.js'\nexport type {\n  Chain,\n  ChainContract,\n  ChainFees,\n  ChainFormatter,\n  /** @deprecated use `ChainFormatter` instead. */\n  ChainFormatter as Formatter,\n  ChainFormatters,\n  /** @deprecated use `ChainFormatters` instead. */\n  ChainFormatters as Formatters,\n  ChainSerializers,\n  /** @deprecated use `ChainSerializers` instead. */\n  ChainSerializers as Serializers,\n  ExtractChainFormatterExclude,\n  /** @deprecated use `ExtractChainFormatterExclude` instead. */\n  ExtractChainFormatterExclude as ExtractFormatterExclude,\n  ExtractChainFormatterParameters,\n  /** @deprecated use `ExtractChainFormatterParameters` instead. */\n  ExtractChainFormatterParameters as ExtractFormatterParameters,\n  ExtractChainFormatterReturnType,\n  /** @deprecated use `ExtractChainFormatterReturnType` instead. */\n  ExtractChainFormatterReturnType as ExtractFormatterReturnType,\n} from './types/chain.js'\nexport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  type MulticallBatchOptions,\n  createClient,\n} from './clients/createClient.js'\nexport {\n  type CustomTransport,\n  type CustomTransportConfig,\n  type CustomTransportErrorType,\n  custom,\n} from './clients/transports/custom.js'\nexport {\n  type FallbackTransport,\n  type FallbackTransportConfig,\n  type FallbackTransportErrorType,\n  fallback,\n} from './clients/transports/fallback.js'\nexport {\n  type HttpTransport,\n  type HttpTransportConfig,\n  type HttpTransportErrorType,\n  http,\n} from './clients/transports/http.js'\nexport {\n  type PublicClient,\n  type PublicClientConfig,\n  type CreatePublicClientErrorType,\n  createPublicClient,\n} from './clients/createPublicClient.js'\nexport {\n  type TestClient,\n  type TestClientConfig,\n  type CreateTestClientErrorType,\n  createTestClient,\n} from './clients/createTestClient.js'\nexport {\n  type PublicActions,\n  publicActions,\n} from './clients/decorators/public.js'\nexport {\n  type TestActions,\n  testActions,\n} from './clients/decorators/test.js'\nexport {\n  type WalletActions,\n  walletActions,\n} from './clients/decorators/wallet.js'\nexport {\n  type Transport,\n  type TransportConfig,\n  type CreateTransportErrorType,\n  createTransport,\n} from './clients/transports/createTransport.js'\nexport {\n  type WalletClient,\n  type WalletClientConfig,\n  type CreateWalletClientErrorType,\n  createWalletClient,\n} from './clients/createWalletClient.js'\nexport {\n  type WebSocketTransport,\n  type WebSocketTransportConfig,\n  type WebSocketTransportErrorType,\n  webSocket,\n} from './clients/transports/webSocket.js'\nexport { multicall3Abi } from './constants/abis.js'\nexport { zeroAddress } from './constants/address.js'\nexport { etherUnits, gweiUnits, weiUnits } from './constants/unit.js'\nexport {\n  maxInt8,\n  maxInt16,\n  maxInt24,\n  maxInt32,\n  maxInt40,\n  maxInt48,\n  maxInt56,\n  maxInt64,\n  maxInt72,\n  maxInt80,\n  maxInt88,\n  maxInt96,\n  maxInt104,\n  maxInt112,\n  maxInt120,\n  maxInt128,\n  maxInt136,\n  maxInt144,\n  maxInt152,\n  maxInt160,\n  maxInt168,\n  maxInt176,\n  maxInt184,\n  maxInt192,\n  maxInt200,\n  maxInt208,\n  maxInt216,\n  maxInt224,\n  maxInt232,\n  maxInt240,\n  maxInt248,\n  maxInt256,\n  maxUint8,\n  maxUint16,\n  maxUint24,\n  maxUint32,\n  maxUint40,\n  maxUint48,\n  maxUint56,\n  maxUint64,\n  maxUint72,\n  maxUint80,\n  maxUint88,\n  maxUint96,\n  maxUint104,\n  maxUint112,\n  maxUint120,\n  maxUint128,\n  maxUint136,\n  maxUint144,\n  maxUint152,\n  maxUint160,\n  maxUint168,\n  maxUint176,\n  maxUint184,\n  maxUint192,\n  maxUint200,\n  maxUint208,\n  maxUint216,\n  maxUint224,\n  maxUint232,\n  maxUint240,\n  maxUint248,\n  maxUint256,\n  minInt8,\n  minInt16,\n  minInt24,\n  minInt32,\n  minInt40,\n  minInt48,\n  minInt56,\n  minInt64,\n  minInt72,\n  minInt80,\n  minInt88,\n  minInt96,\n  minInt104,\n  minInt112,\n  minInt120,\n  minInt128,\n  minInt136,\n  minInt144,\n  minInt152,\n  minInt160,\n  minInt168,\n  minInt176,\n  minInt184,\n  minInt192,\n  minInt200,\n  minInt208,\n  minInt216,\n  minInt224,\n  minInt232,\n  minInt240,\n  minInt248,\n  minInt256,\n} from './constants/number.js'\nexport { zeroHash } from './constants/bytes.js'\nexport { presignMessagePrefix } from './constants/strings.js'\nexport {\n  AbiConstructorNotFoundError,\n  type AbiConstructorNotFoundErrorType,\n  AbiConstructorParamsNotFoundError,\n  type AbiConstructorParamsNotFoundErrorType,\n  AbiDecodingDataSizeInvalidError,\n  type AbiDecodingDataSizeInvalidErrorType,\n  AbiDecodingDataSizeTooSmallError,\n  type AbiDecodingDataSizeTooSmallErrorType,\n  AbiDecodingZeroDataError,\n  type AbiDecodingZeroDataErrorType,\n  AbiEncodingArrayLengthMismatchError,\n  type AbiEncodingArrayLengthMismatchErrorType,\n  AbiEncodingLengthMismatchError,\n  type AbiEncodingLengthMismatchErrorType,\n  AbiEncodingBytesSizeMismatchError,\n  type AbiEncodingBytesSizeMismatchErrorType,\n  AbiErrorInputsNotFoundError,\n  type AbiErrorInputsNotFoundErrorType,\n  AbiErrorNotFoundError,\n  type AbiErrorNotFoundErrorType,\n  AbiErrorSignatureNotFoundError,\n  type AbiErrorSignatureNotFoundErrorType,\n  AbiEventNotFoundError,\n  type AbiEventNotFoundErrorType,\n  AbiEventSignatureEmptyTopicsError,\n  type AbiEventSignatureEmptyTopicsErrorType,\n  AbiEventSignatureNotFoundError,\n  type AbiEventSignatureNotFoundErrorType,\n  AbiFunctionNotFoundError,\n  type AbiFunctionNotFoundErrorType,\n  AbiFunctionOutputsNotFoundError,\n  type AbiFunctionOutputsNotFoundErrorType,\n  AbiFunctionSignatureNotFoundError,\n  type AbiFunctionSignatureNotFoundErrorType,\n  BytesSizeMismatchError,\n  type BytesSizeMismatchErrorType,\n  DecodeLogDataMismatch,\n  type DecodeLogDataMismatchErrorType,\n  DecodeLogTopicsMismatch,\n  type DecodeLogTopicsMismatchErrorType,\n  InvalidAbiDecodingTypeError,\n  type InvalidAbiDecodingTypeErrorType,\n  InvalidAbiEncodingTypeError,\n  type InvalidAbiEncodingTypeErrorType,\n  InvalidArrayError,\n  type InvalidArrayErrorType,\n  InvalidDefinitionTypeError,\n  type InvalidDefinitionTypeErrorType,\n  UnsupportedPackedAbiType,\n  type UnsupportedPackedAbiTypeErrorType,\n} from './errors/abi.js'\nexport { BaseError, type BaseErrorType } from './errors/base.js'\nexport {\n  BlockNotFoundError,\n  type BlockNotFoundErrorType,\n} from './errors/block.js'\nexport {\n  CallExecutionError,\n  type CallExecutionErrorType,\n  ContractFunctionExecutionError,\n  type ContractFunctionExecutionErrorType,\n  ContractFunctionRevertedError,\n  type ContractFunctionRevertedErrorType,\n  ContractFunctionZeroDataError,\n  type ContractFunctionZeroDataErrorType,\n  RawContractError,\n  type RawContractErrorType,\n} from './errors/contract.js'\nexport {\n  BaseFeeScalarError,\n  type BaseFeeScalarErrorType,\n  Eip1559FeesNotSupportedError,\n  type Eip1559FeesNotSupportedErrorType,\n  MaxFeePerGasTooLowError,\n  type MaxFeePerGasTooLowErrorType,\n} from './errors/fee.js'\nexport {\n  ChainDisconnectedError,\n  type ChainDisconnectedErrorType,\n  InternalRpcError,\n  type InternalRpcErrorType,\n  InvalidInputRpcError,\n  type InvalidInputRpcErrorType,\n  InvalidParamsRpcError,\n  type InvalidParamsRpcErrorType,\n  InvalidRequestRpcError,\n  type InvalidRequestRpcErrorType,\n  JsonRpcVersionUnsupportedError,\n  type JsonRpcVersionUnsupportedErrorType,\n  LimitExceededRpcError,\n  type LimitExceededRpcErrorType,\n  MethodNotFoundRpcError,\n  type MethodNotFoundRpcErrorType,\n  MethodNotSupportedRpcError,\n  type MethodNotSupportedRpcErrorType,\n  ParseRpcError,\n  type ParseRpcErrorType,\n  ProviderDisconnectedError,\n  type ProviderDisconnectedErrorType,\n  ProviderRpcError,\n  type ProviderRpcErrorCode,\n  type ProviderRpcErrorType,\n  ResourceNotFoundRpcError,\n  type ResourceNotFoundRpcErrorType,\n  ResourceUnavailableRpcError,\n  type ResourceUnavailableRpcErrorType,\n  RpcError,\n  type RpcErrorType,\n  type RpcErrorCode,\n  SwitchChainError,\n  TransactionRejectedRpcError,\n  type TransactionRejectedRpcErrorType,\n  UnauthorizedProviderError,\n  type UnauthorizedProviderErrorType,\n  UnknownRpcError,\n  type UnknownRpcErrorType,\n  UnsupportedProviderMethodError,\n  type UnsupportedProviderMethodErrorType,\n  UserRejectedRequestError,\n  type UserRejectedRequestErrorType,\n} from './errors/rpc.js'\nexport {\n  ChainDoesNotSupportContract,\n  type ChainDoesNotSupportContractErrorType,\n  ChainMismatchError,\n  type ChainMismatchErrorType,\n  ChainNotFoundError,\n  type ChainNotFoundErrorType,\n  ClientChainNotConfiguredError,\n  type ClientChainNotConfiguredErrorType,\n  InvalidChainIdError,\n  type InvalidChainIdErrorType,\n} from './errors/chain.js'\nexport {\n  DataLengthTooLongError,\n  type DataLengthTooLongErrorType,\n  DataLengthTooShortError,\n  type DataLengthTooShortErrorType,\n  InvalidBytesBooleanError,\n  type InvalidBytesBooleanErrorType,\n  IntegerOutOfRangeError,\n  type IntegerOutOfRangeErrorType,\n  InvalidHexBooleanError,\n  type InvalidHexBooleanErrorType,\n  InvalidHexValueError,\n  type InvalidHexValueErrorType,\n  OffsetOutOfBoundsError,\n  type OffsetOutOfBoundsErrorType,\n  SizeOverflowError,\n  type SizeOverflowErrorType,\n} from './errors/encoding.js'\nexport {\n  type EnsAvatarInvalidMetadataError,\n  EnsAvatarUriResolutionError,\n  type EnsAvatarInvalidMetadataErrorType,\n  EnsAvatarInvalidNftUriError,\n  type EnsAvatarInvalidNftUriErrorType,\n  EnsAvatarUnsupportedNamespaceError,\n  type EnsAvatarUnsupportedNamespaceErrorType,\n  type EnsAvatarUriResolutionErrorType,\n} from './errors/ens.js'\nexport {\n  EstimateGasExecutionError,\n  type EstimateGasExecutionErrorType,\n} from './errors/estimateGas.js'\nexport {\n  ExecutionRevertedError,\n  type ExecutionRevertedErrorType,\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  FeeCapTooLowError,\n  type FeeCapTooLowErrorType,\n  InsufficientFundsError,\n  type InsufficientFundsErrorType,\n  IntrinsicGasTooHighError,\n  type IntrinsicGasTooHighErrorType,\n  IntrinsicGasTooLowError,\n  type IntrinsicGasTooLowErrorType,\n  NonceMaxValueError,\n  type NonceMaxValueErrorType,\n  NonceTooHighError,\n  type NonceTooHighErrorType,\n  NonceTooLowError,\n  type NonceTooLowErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n  TransactionTypeNotSupportedError,\n  type TransactionTypeNotSupportedErrorType,\n  UnknownNodeError,\n  type UnknownNodeErrorType,\n} from './errors/node.js'\nexport {\n  FilterTypeNotSupportedError,\n  type FilterTypeNotSupportedErrorType,\n} from './errors/log.js'\nexport {\n  HttpRequestError,\n  type HttpRequestErrorType,\n  RpcRequestError,\n  type RpcRequestErrorType,\n  TimeoutError,\n  type TimeoutErrorType,\n  WebSocketRequestError,\n  type WebSocketRequestErrorType,\n} from './errors/request.js'\nexport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from './errors/address.js'\nexport {\n  FeeConflictError,\n  type FeeConflictErrorType,\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n  InvalidSerializableTransactionError,\n  type InvalidSerializableTransactionErrorType,\n  InvalidSerializedTransactionError,\n  type InvalidSerializedTransactionErrorType,\n  InvalidSerializedTransactionTypeError,\n  type InvalidSerializedTransactionTypeErrorType,\n  InvalidStorageKeySizeError,\n  type InvalidStorageKeySizeErrorType,\n  TransactionExecutionError,\n  type TransactionExecutionErrorType,\n  TransactionNotFoundError,\n  type TransactionNotFoundErrorType,\n  TransactionReceiptNotFoundError,\n  type TransactionReceiptNotFoundErrorType,\n  WaitForTransactionReceiptTimeoutError,\n  type WaitForTransactionReceiptTimeoutErrorType,\n} from './errors/transaction.js'\nexport {\n  SizeExceedsPaddingSizeError,\n  type SizeExceedsPaddingSizeErrorType,\n  SliceOffsetOutOfBoundsError,\n  type SliceOffsetOutOfBoundsErrorType,\n} from './errors/data.js'\nexport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from './errors/transport.js'\nexport type {\n  AbiItem,\n  ContractFunctionConfig,\n  ContractFunctionResult,\n  GetConstructorArgs,\n  GetErrorArgs,\n  GetEventArgs,\n  GetEventArgsFromTopics,\n  GetFunctionArgs,\n  GetValue,\n  InferErrorName,\n  InferEventName,\n  InferFunctionName,\n  InferItemName,\n} from './types/contract.js'\nexport type {\n  AccessList,\n  Transaction,\n  TransactionBase,\n  TransactionEIP1559,\n  TransactionEIP2930,\n  TransactionLegacy,\n  TransactionReceipt,\n  TransactionRequest,\n  TransactionRequestBase,\n  TransactionRequestEIP1559,\n  TransactionRequestEIP2930,\n  TransactionRequestLegacy,\n  TransactionSerializable,\n  TransactionSerializableBase,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedLegacy,\n  TransactionType,\n} from './types/transaction.js'\nexport type {\n  Account,\n  AccountSource,\n  CustomSource,\n  HDAccount,\n  HDOptions,\n  JsonRpcAccount,\n  LocalAccount,\n  PrivateKeyAccount,\n} from './accounts/types.js'\nexport type { AssetGateway, AssetGatewayUrls } from './types/ens.js'\nexport type {\n  Block,\n  BlockIdentifier,\n  BlockNumber,\n  BlockTag,\n  Uncle,\n} from './types/block.js'\nexport type {\n  ByteArray,\n  Hash,\n  Hex,\n  LogTopic,\n  Signature,\n  CompactSignature,\n  SignableMessage,\n} from './types/misc.js'\nexport type { GetChain } from './types/chain.js'\nexport type {\n  AddEthereumChainParameter,\n  EIP1193EventMap,\n  EIP1193Events,\n  EIP1193Parameters,\n  EIP1193Provider,\n  EIP1193RequestFn,\n  EIP1474Methods,\n  ProviderRpcError as EIP1193ProviderRpcError,\n  ProviderConnectInfo,\n  ProviderMessage,\n  PublicRpcSchema,\n  NetworkSync,\n  RpcSchema,\n  RpcSchemaOverride,\n  TestRpcSchema,\n  WatchAssetParams,\n  WalletPermissionCaveat,\n  WalletPermission,\n  WalletRpcSchema,\n} from './types/eip1193.js'\nexport type {\n  FeeHistory,\n  FeeValues,\n  FeeValuesEIP1559,\n  FeeValuesLegacy,\n  FeeValuesType,\n} from './types/fee.js'\nexport type { Filter } from './types/filter.js'\nexport type {\n  GetTypedDataDomain,\n  GetTypedDataMessage,\n  GetTypedDataPrimaryType,\n  GetTypedDataTypes,\n  TypedDataDefinition,\n} from './types/typedData.js'\nexport type { GetTransportConfig } from './types/transport.js'\nexport type { HDKey } from '@scure/bip32'\nexport type { Log } from './types/log.js'\nexport type {\n  MulticallContract,\n  MulticallContracts,\n  MulticallResult,\n  MulticallResults,\n} from './types/multicall.js'\nexport type { ParseAccount } from './types/account.js'\nexport type {\n  RpcBlock,\n  RpcBlockIdentifier,\n  RpcBlockNumber,\n  RpcFeeHistory,\n  RpcFeeValues,\n  RpcLog,\n  RpcTransaction,\n  RpcTransactionReceipt,\n  RpcTransactionRequest,\n  RpcUncle,\n} from './types/rpc.js'\nexport type { Withdrawal } from './types/withdrawal.js'\nexport { labelhash, type LabelhashErrorType } from './utils/ens/labelhash.js'\nexport { namehash, type NamehashErrorType } from './utils/ens/namehash.js'\nexport {\n  type FormattedBlock,\n  defineBlock,\n  type DefineBlockErrorType,\n  formatBlock,\n  type FormatBlockErrorType,\n} from './utils/formatters/block.js'\nexport { formatLog, type FormatLogErrorType } from './utils/formatters/log.js'\nexport {\n  type DecodeAbiParametersErrorType,\n  type DecodeAbiParametersReturnType,\n  decodeAbiParameters,\n} from './utils/abi/decodeAbiParameters.js'\nexport {\n  type DecodeDeployDataErrorType,\n  type DecodeDeployDataParameters,\n  type DecodeDeployDataReturnType,\n  decodeDeployData,\n} from './utils/abi/decodeDeployData.js'\nexport {\n  type DecodeErrorResultErrorType,\n  type DecodeErrorResultParameters,\n  type DecodeErrorResultReturnType,\n  decodeErrorResult,\n} from './utils/abi/decodeErrorResult.js'\nexport {\n  type DecodeEventLogErrorType,\n  type DecodeEventLogParameters,\n  type DecodeEventLogReturnType,\n  decodeEventLog,\n} from './utils/abi/decodeEventLog.js'\nexport {\n  type DecodeFunctionDataErrorType,\n  type DecodeFunctionDataParameters,\n  decodeFunctionData,\n} from './utils/abi/decodeFunctionData.js'\nexport {\n  type DecodeFunctionResultErrorType,\n  type DecodeFunctionResultParameters,\n  type DecodeFunctionResultReturnType,\n  decodeFunctionResult,\n} from './utils/abi/decodeFunctionResult.js'\nexport {\n  type EncodeAbiParametersErrorType,\n  type EncodeAbiParametersReturnType,\n  encodeAbiParameters,\n} from './utils/abi/encodeAbiParameters.js'\nexport {\n  type EncodeDeployDataErrorType,\n  type EncodeDeployDataParameters,\n  encodeDeployData,\n} from './utils/abi/encodeDeployData.js'\nexport {\n  type EncodeErrorResultErrorType,\n  type EncodeErrorResultParameters,\n  encodeErrorResult,\n} from './utils/abi/encodeErrorResult.js'\nexport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from './utils/abi/encodeEventTopics.js'\nexport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from './utils/abi/encodeFunctionData.js'\nexport {\n  type EncodeFunctionResultErrorType,\n  type EncodeFunctionResultParameters,\n  encodeFunctionResult,\n} from './utils/abi/encodeFunctionResult.js'\nexport {\n  type FormattedTransaction,\n  defineTransaction,\n  type DefineTransactionErrorType,\n  formatTransaction,\n  type FormatTransactionErrorType,\n  transactionType,\n} from './utils/formatters/transaction.js'\nexport {\n  type FormattedTransactionReceipt,\n  defineTransactionReceipt,\n  type DefineTransactionReceiptErrorType,\n  formatTransactionReceipt,\n  type FormatTransactionReceiptErrorType,\n} from './utils/formatters/transactionReceipt.js'\nexport {\n  type FormattedTransactionRequest,\n  defineTransactionRequest,\n  type DefineTransactionRequestErrorType,\n  formatTransactionRequest,\n  type FormatTransactionRequestErrorType,\n  rpcTransactionType,\n} from './utils/formatters/transactionRequest.js'\nexport {\n  type GetAbiItemErrorType,\n  type GetAbiItemParameters,\n  getAbiItem,\n} from './utils/abi/getAbiItem.js'\nexport {\n  type GetContractAddressOptions,\n  type GetCreate2AddressOptions,\n  type GetCreate2AddressErrorType,\n  type GetCreateAddressOptions,\n  type GetCreateAddressErrorType,\n  getContractAddress,\n  getCreate2Address,\n  getCreateAddress,\n} from './utils/address/getContractAddress.js'\nexport {\n  type GetSerializedTransactionType,\n  type GetSerializedTransactionTypeErrorType,\n  getSerializedTransactionType,\n} from './utils/transaction/getSerializedTransactionType.js'\nexport {\n  type GetTransactionType,\n  type GetTransationTypeErrorType,\n  getTransactionType,\n} from './utils/transaction/getTransactionType.js'\nexport {\n  type HashDomainErrorType,\n  type HashTypedDataErrorType,\n  type HashTypedDataParameters,\n  type HashTypedDataReturnType,\n  hashDomain,\n  hashTypedData,\n} from './utils/signature/hashTypedData.js'\nexport {\n  type CompactSignatureToSignatureErrorType,\n  compactSignatureToSignature,\n} from './utils/signature/compactSignatureToSignature.js'\nexport {\n  type HexToCompactSignatureErrorType,\n  hexToCompactSignature,\n} from './utils/signature/hexToCompactSignature.js'\nexport {\n  type HexToSignatureErrorType,\n  hexToSignature,\n} from './utils/signature/hexToSignature.js'\nexport {\n  type RecoverAddressErrorType,\n  type RecoverAddressParameters,\n  type RecoverAddressReturnType,\n  recoverAddress,\n} from './utils/signature/recoverAddress.js'\nexport {\n  type RecoverMessageAddressErrorType,\n  type RecoverMessageAddressParameters,\n  type RecoverMessageAddressReturnType,\n  recoverMessageAddress,\n} from './utils/signature/recoverMessageAddress.js'\nexport {\n  type RecoverPublicKeyErrorType,\n  type RecoverPublicKeyParameters,\n  type RecoverPublicKeyReturnType,\n  recoverPublicKey,\n} from './utils/signature/recoverPublicKey.js'\nexport {\n  type RecoverTypedDataAddressErrorType,\n  type RecoverTypedDataAddressParameters,\n  type RecoverTypedDataAddressReturnType,\n  recoverTypedDataAddress,\n} from './utils/signature/recoverTypedDataAddress.js'\nexport {\n  type SignatureToCompactSignatureErrorType,\n  signatureToCompactSignature,\n} from './utils/signature/signatureToCompactSignature.js'\nexport {\n  type CompactSignatureToHexErrorType,\n  compactSignatureToHex,\n} from './utils/signature/compactSignatureToHex.js'\nexport {\n  type SignatureToHexErrorType,\n  signatureToHex,\n} from './utils/signature/signatureToHex.js'\nexport {\n  bytesToRlp,\n  type BytesToRlpErrorType,\n  hexToRlp,\n  type HexToRlpErrorType,\n  toRlp,\n  type ToRlpErrorType,\n  type ToRlpReturnType,\n} from './utils/encoding/toRlp.js'\nexport {\n  type VerifyMessageErrorType,\n  type VerifyMessageParameters,\n  type VerifyMessageReturnType,\n  verifyMessage,\n} from './utils/signature/verifyMessage.js'\nexport {\n  type VerifyTypedDataErrorType,\n  type VerifyTypedDataParameters,\n  type VerifyTypedDataReturnType,\n  verifyTypedData,\n} from './utils/signature/verifyTypedData.js'\nexport {\n  type AssertRequestErrorType,\n  assertRequest,\n} from './utils/transaction/assertRequest.js'\nexport {\n  type AssertTransactionEIP1559ErrorType,\n  assertTransactionEIP1559,\n  type AssertTransactionEIP2930ErrorType,\n  assertTransactionEIP2930,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionLegacy,\n} from './utils/transaction/assertTransaction.js'\nexport {\n  type BoolToBytesErrorType,\n  type BoolToBytesOpts,\n  boolToBytes,\n  type HexToBytesErrorType,\n  type HexToBytesOpts,\n  hexToBytes,\n  type NumberToBytesErrorType,\n  numberToBytes,\n  type StringToBytesErrorType,\n  type StringToBytesOpts,\n  stringToBytes,\n  type ToBytesErrorType,\n  type ToBytesParameters,\n  toBytes,\n} from './utils/encoding/toBytes.js'\nexport {\n  type BoolToHexErrorType,\n  type BoolToHexOpts,\n  boolToHex,\n  type BytesToHexErrorType,\n  type BytesToHexOpts,\n  bytesToHex,\n  type NumberToHexErrorType,\n  type NumberToHexOpts,\n  numberToHex,\n  type StringToHexErrorType,\n  type StringToHexOpts,\n  stringToHex,\n  type ToHexErrorType,\n  type ToHexParameters,\n  toHex,\n} from './utils/encoding/toHex.js'\nexport {\n  type BytesToBigIntErrorType,\n  type BytesToBigIntOpts,\n  bytesToBigInt,\n  /** @deprecated - use `bytesToBigInt` */\n  bytesToBigInt as bytesToBigint,\n  type BytesToBoolErrorType,\n  type BytesToBoolOpts,\n  bytesToBool,\n  type BytesToNumberErrorType,\n  type BytesToNumberOpts,\n  bytesToNumber,\n  type BytesToStringErrorType,\n  type BytesToStringOpts,\n  bytesToString,\n  type FromBytesErrorType,\n  type FromBytesParameters,\n  fromBytes,\n} from './utils/encoding/fromBytes.js'\nexport {\n  type CcipFetchErrorType,\n  ccipFetch,\n  type OffchainLookupErrorType,\n  offchainLookup,\n  offchainLookupAbiItem,\n  offchainLookupSignature,\n} from './utils/ccip.js'\nexport {\n  type ConcatBytesErrorType,\n  type ConcatErrorType,\n  type ConcatHexErrorType,\n  type ConcatReturnType,\n  concat,\n  concatBytes,\n  concatHex,\n} from './utils/data/concat.js'\nexport {\n  type AssertCurrentChainErrorType,\n  type AssertCurrentChainParameters,\n  assertCurrentChain,\n} from './utils/chain/assertCurrentChain.js'\nexport { defineChain } from './utils/chain/defineChain.js'\nexport {\n  type ExtractChainErrorType,\n  type ExtractChainParameters,\n  type ExtractChainReturnType,\n  extractChain,\n} from './utils/chain/extractChain.js'\nexport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from './utils/chain/getChainContractAddress.js'\nexport {\n  type EncodePackedErrorType,\n  encodePacked,\n} from './utils/abi/encodePacked.js'\nexport {\n  type FormatEtherErrorType,\n  formatEther,\n} from './utils/unit/formatEther.js'\nexport {\n  type FormatGweiErrorType,\n  formatGwei,\n} from './utils/unit/formatGwei.js'\nexport {\n  type FormatUnitsErrorType,\n  formatUnits,\n} from './utils/unit/formatUnits.js'\nexport {\n  type FromHexErrorType,\n  fromHex,\n  type HexToBigIntErrorType,\n  hexToBigInt,\n  type HexToBoolErrorType,\n  hexToBool,\n  type HexToNumberErrorType,\n  hexToNumber,\n  type HexToStringErrorType,\n  hexToString,\n} from './utils/encoding/fromHex.js'\nexport {\n  type FromRlpErrorType,\n  type FromRlpReturnType,\n  fromRlp,\n} from './utils/encoding/fromRlp.js'\nexport {\n  type ChecksumAddressErrorType,\n  type GetAddressErrorType,\n  checksumAddress,\n  getAddress,\n} from './utils/address/getAddress.js'\nexport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from './utils/errors/getContractError.js'\nexport {\n  type GetEventSelectorErrorType,\n  getEventSelector,\n} from './utils/hash/getEventSelector.js'\nexport {\n  type GetEventSignatureErrorType,\n  getEventSignature,\n} from './utils/hash/getEventSignature.js'\nexport {\n  type GetFunctionSelectorErrorType,\n  getFunctionSelector,\n} from './utils/hash/getFunctionSelector.js'\nexport {\n  type GetFunctionSignatureErrorType,\n  getFunctionSignature,\n} from './utils/hash/getFunctionSignature.js'\nexport {\n  type HashMessageErrorType,\n  hashMessage,\n} from './utils/signature/hashMessage.js'\nexport {\n  type IsAddressErrorType,\n  isAddress,\n} from './utils/address/isAddress.js'\nexport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from './utils/address/isAddressEqual.js'\nexport { type IsBytesErrorType, isBytes } from './utils/data/isBytes.js'\nexport { type IsHashErrorType, isHash } from './utils/hash/isHash.js'\nexport { type IsHexErrorType, isHex } from './utils/data/isHex.js'\nexport { type Keccak256ErrorType, keccak256 } from './utils/hash/keccak256.js'\nexport { type Sha256ErrorType, sha256 } from './utils/hash/sha256.js'\nexport { type Ripemd160ErrorType, ripemd160 } from './utils/hash/ripemd160.js'\nexport {\n  type PadBytesErrorType,\n  type PadErrorType,\n  type PadHexErrorType,\n  type PadReturnType,\n  pad,\n  padBytes,\n  padHex,\n} from './utils/data/pad.js'\nexport {\n  type ParseEtherErrorType,\n  parseEther,\n} from './utils/unit/parseEther.js'\nexport { type ParseGweiErrorType, parseGwei } from './utils/unit/parseGwei.js'\nexport {\n  type ParseTransactionErrorType,\n  type ParseTransactionReturnType,\n  parseTransaction,\n} from './utils/transaction/parseTransaction.js'\nexport {\n  type ParseUnitsErrorType,\n  parseUnits,\n} from './utils/unit/parseUnits.js'\nexport {\n  type SerializeAccessListErrorType,\n  serializeAccessList,\n} from './utils/transaction/serializeAccessList.js'\nexport {\n  serializeTransaction,\n  type SerializeTransactionErrorType,\n  type SerializedTransactionReturnType,\n  type SerializeTransactionFn,\n} from './utils/transaction/serializeTransaction.js'\nexport { type SizeErrorType, size } from './utils/data/size.js'\nexport {\n  type SliceBytesErrorType,\n  type SliceErrorType,\n  type SliceHexErrorType,\n  slice,\n  sliceBytes,\n  sliceHex,\n} from './utils/data/slice.js'\nexport { type StringifyErrorType, stringify } from './utils/stringify.js'\nexport {\n  type TrimErrorType,\n  type TrimReturnType,\n  trim,\n} from './utils/data/trim.js'\nexport {\n  type DomainSeparatorErrorType,\n  type GetTypesForEIP712DomainErrorType,\n  type ValidateTypedDataErrorType,\n  validateTypedData,\n  domainSeparator,\n  getTypesForEIP712Domain,\n} from './utils/typedData.js'\n","import type {\n  AbiParameter,\n  AbiParameterToPrimitiveType,\n  AbiParametersToPrimitiveTypes,\n} from 'abitype'\n\nimport {\n  AbiDecodingDataSizeTooSmallError,\n  type AbiDecodingDataSizeTooSmallErrorType,\n  AbiDecodingZeroDataError,\n  type AbiDecodingZeroDataErrorType,\n  InvalidAbiDecodingTypeError,\n  type InvalidAbiDecodingTypeErrorType,\n} from '../../errors/abi.js'\nimport type { Hex } from '../../types/misc.js'\nimport {\n  type ChecksumAddressErrorType,\n  checksumAddress,\n} from '../address/getAddress.js'\nimport { type SizeErrorType, size } from '../data/size.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport { type TrimErrorType, trim } from '../data/trim.js'\nimport {\n  type HexToBigIntErrorType,\n  type HexToBoolErrorType,\n  type HexToNumberErrorType,\n  type HexToStringErrorType,\n  hexToBigInt,\n  hexToBool,\n  hexToNumber,\n  hexToString,\n} from '../encoding/fromHex.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type GetArrayComponentsErrorType,\n  getArrayComponents,\n} from './encodeAbiParameters.js'\n\nexport type DecodeAbiParametersReturnType<\n  TParams extends\n    | readonly AbiParameter[]\n    | readonly unknown[] = readonly AbiParameter[],\n> = AbiParametersToPrimitiveTypes<\n  TParams extends readonly AbiParameter[] ? TParams : AbiParameter[]\n>\n\nexport type DecodeAbiParametersErrorType =\n  | AbiDecodingDataSizeTooSmallErrorType\n  | AbiDecodingZeroDataErrorType\n  | DecodeParamsErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function decodeAbiParameters<\n  const TParams extends readonly AbiParameter[] | readonly unknown[],\n>(params: TParams, data: Hex): DecodeAbiParametersReturnType<TParams> {\n  if (data === '0x' && (params as unknown[]).length > 0)\n    throw new AbiDecodingZeroDataError()\n  if (size(data) && size(data) < 32)\n    throw new AbiDecodingDataSizeTooSmallError({\n      data,\n      params: params as readonly AbiParameter[],\n      size: size(data),\n    })\n  return decodeParams({\n    data,\n    params: params as readonly AbiParameter[],\n  }) as unknown as DecodeAbiParametersReturnType<TParams>\n}\n\n////////////////////////////////////////////////////////////////////\n\ntype TupleAbiParameter = AbiParameter & { components: readonly AbiParameter[] }\n\ntype DecodeParamsErrorType = DecodeParamErrorType | SizeErrorType | ErrorType\n\nfunction decodeParams<const TParams extends readonly AbiParameter[]>({\n  data,\n  params,\n}: { data: Hex; params: TParams }) {\n  const decodedValues: unknown[] = []\n  let position = 0\n\n  for (let i = 0; i < params.length; i++) {\n    if (position >= size(data))\n      throw new AbiDecodingDataSizeTooSmallError({\n        data,\n        params,\n        size: size(data),\n      })\n\n    const param = params[i]\n    const { consumed, value } = decodeParam({ data, param, position })\n    decodedValues.push(value)\n    // Step across the data by the amount of data consumed by this parameter.\n    position += consumed\n  }\n\n  return decodedValues as unknown as AbiParametersToPrimitiveTypes<TParams>\n}\n\ntype DecodeParamErrorType =\n  | DecodeArrayErrorType\n  | DecodeTupleErrorType\n  | DecodeStringErrorType\n  | DecodeBytesErrorType\n  | DecodeNumberErrorType\n  | DecodeAddressErrorType\n  | DecodeBoolErrorType\n  | InvalidAbiDecodingTypeErrorType\n  | ErrorType\n\nfunction decodeParam({\n  data,\n  param,\n  position,\n}: { data: Hex; param: AbiParameter; position: number }): {\n  consumed: number\n  value: any\n} {\n  const arrayComponents = getArrayComponents(param.type)\n  if (arrayComponents) {\n    const [length, type] = arrayComponents\n    return decodeArray(data, {\n      length,\n      param: { ...param, type: type } as AbiParameter,\n      position,\n    })\n  }\n  if (param.type === 'tuple') {\n    return decodeTuple(data, { param: param as TupleAbiParameter, position })\n  }\n  if (param.type === 'string') {\n    return decodeString(data, { position })\n  }\n  if (param.type.startsWith('bytes')) {\n    return decodeBytes(data, { param, position })\n  }\n\n  const value = slice(data, position, position + 32, { strict: true }) as Hex\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    return decodeNumber(value, { param })\n  }\n  if (param.type === 'address') {\n    return decodeAddress(value)\n  }\n  if (param.type === 'bool') {\n    return decodeBool(value)\n  }\n  throw new InvalidAbiDecodingTypeError(param.type, {\n    docsPath: '/docs/contract/decodeAbiParameters',\n  })\n}\n\n////////////////////////////////////////////////////////////////////\n\ntype DecodeAddressErrorType =\n  | ChecksumAddressErrorType\n  | SliceErrorType\n  | ErrorType\n\nfunction decodeAddress(value: Hex) {\n  return { consumed: 32, value: checksumAddress(slice(value, -20)) }\n}\n\ntype DecodeArrayErrorType = HexToNumberErrorType | SliceErrorType | ErrorType\n\nfunction decodeArray<const TParam extends AbiParameter>(\n  data: Hex,\n  {\n    param,\n    length,\n    position,\n  }: {\n    param: TParam\n    length: number | null\n    position: number\n  },\n) {\n  // If the length of the array is not known in advance (dynamic array),\n  // we will need to decode the offset of the array data.\n  if (!length) {\n    // Get the offset of the array data.\n    const offset = hexToNumber(\n      slice(data, position, position + 32, { strict: true }),\n    )\n    // Get the length of the array from the offset.\n    const length = hexToNumber(\n      slice(data, offset, offset + 32, { strict: true }),\n    )\n\n    let consumed = 0\n    const value: AbiParameterToPrimitiveType<TParam>[] = []\n    for (let i = 0; i < length; ++i) {\n      const decodedChild = decodeParam({\n        data: slice(data, offset + 32),\n        param,\n        position: consumed,\n      })\n      consumed += decodedChild.consumed\n      value.push(decodedChild.value)\n    }\n    return { value, consumed: 32 }\n  }\n\n  // If the length of the array is known in advance,\n  // and the length of an element deeply nested in the array is not known,\n  // we need to decode the offset of the array data.\n  if (hasDynamicChild(param)) {\n    // Get the child type of the array.\n    const arrayComponents = getArrayComponents(param.type)\n    // If the child type is not known, the array is dynamic.\n    const dynamicChild = !arrayComponents?.[0]\n\n    let consumed = 0\n    const value: AbiParameterToPrimitiveType<TParam>[] = []\n    for (let i = 0; i < length; ++i) {\n      const offset = hexToNumber(\n        slice(data, position, position + 32, { strict: true }),\n      )\n      const decodedChild = decodeParam({\n        data: slice(data, offset),\n        param,\n        position: dynamicChild ? consumed : i * 32,\n      })\n      consumed += decodedChild.consumed\n      value.push(decodedChild.value)\n    }\n    return { value, consumed: 32 }\n  }\n\n  // If the length of the array is known in advance,\n  // and the length of each element in the array is known,\n  // the array data is encoded contiguously after the array.\n  let consumed = 0\n  const value: AbiParameterToPrimitiveType<TParam>[] = []\n  for (let i = 0; i < length; ++i) {\n    const decodedChild = decodeParam({\n      data,\n      param,\n      position: position + consumed,\n    })\n    consumed += decodedChild.consumed\n    value.push(decodedChild.value)\n  }\n  return { value, consumed }\n}\n\ntype DecodeBoolErrorType = HexToBoolErrorType | ErrorType\n\nfunction decodeBool(value: Hex) {\n  return { consumed: 32, value: hexToBool(value) }\n}\n\ntype DecodeBytesErrorType = HexToNumberErrorType | SliceErrorType | ErrorType\n\nfunction decodeBytes<const TParam extends AbiParameter>(\n  data: Hex,\n  { param, position }: { param: TParam; position: number },\n) {\n  const [_, size] = param.type.split('bytes')\n  if (!size) {\n    // If we don't have a size, we're dealing with a dynamic-size array\n    // so we need to read the offset of the data part first.\n    const offset = hexToNumber(\n      slice(data, position, position + 32, { strict: true }),\n    )\n    const length = hexToNumber(\n      slice(data, offset, offset + 32, { strict: true }),\n    )\n    // If there is no length, we have zero data.\n    if (length === 0) return { consumed: 32, value: '0x' }\n    const value = slice(data, offset + 32, offset + 32 + length, {\n      strict: true,\n    })\n    return { consumed: 32, value }\n  }\n\n  const value = slice(data, position, position + parseInt(size), {\n    strict: true,\n  })\n  return { consumed: 32, value }\n}\n\ntype DecodeNumberErrorType =\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | ErrorType\n\nfunction decodeNumber<const TParam extends AbiParameter>(\n  value: Hex,\n  { param }: { param: TParam },\n) {\n  const signed = param.type.startsWith('int')\n  const size = parseInt(param.type.split('int')[1] || '256')\n  return {\n    consumed: 32,\n    value:\n      size > 48\n        ? hexToBigInt(value, { signed })\n        : hexToNumber(value, { signed }),\n  }\n}\n\ntype DecodeStringErrorType =\n  | HexToNumberErrorType\n  | HexToStringErrorType\n  | SliceErrorType\n  | TrimErrorType\n  | ErrorType\n\nfunction decodeString(data: Hex, { position }: { position: number }) {\n  const offset = hexToNumber(\n    slice(data, position, position + 32, { strict: true }),\n  )\n  const length = hexToNumber(slice(data, offset, offset + 32, { strict: true }))\n  // If there is no length, we have zero data (empty string).\n  if (length === 0) return { consumed: 32, value: '' }\n  const value = hexToString(\n    trim(slice(data, offset + 32, offset + 32 + length, { strict: true })),\n  )\n  return { consumed: 32, value }\n}\n\ntype DecodeTupleErrorType =\n  | HasDynamicChildErrorType\n  | HexToNumberErrorType\n  | SliceErrorType\n  | ErrorType\n\nfunction decodeTuple<\n  const TParam extends AbiParameter & { components: readonly AbiParameter[] },\n>(data: Hex, { param, position }: { param: TParam; position: number }) {\n  // Tuples can have unnamed components (i.e. they are arrays), so we must\n  // determine whether the tuple is named or unnamed. In the case of a named\n  // tuple, the value will be an object where each property is the name of the\n  // component. In the case of an unnamed tuple, the value will be an array.\n  const hasUnnamedChild =\n    param.components.length === 0 || param.components.some(({ name }) => !name)\n\n  // Initialize the value to an object or an array, depending on whether the\n  // tuple is named or unnamed.\n  const value: any = hasUnnamedChild ? [] : {}\n  let consumed = 0\n\n  // If the tuple has a dynamic child, we must first decode the offset to the\n  // tuple data.\n  if (hasDynamicChild(param)) {\n    const offset = hexToNumber(\n      slice(data, position, position + 32, { strict: true }),\n    )\n    // Decode each component of the tuple, starting at the offset.\n    for (let i = 0; i < param.components.length; ++i) {\n      const component = param.components[i]\n      const decodedChild = decodeParam({\n        data: slice(data, offset),\n        param: component,\n        position: consumed,\n      })\n      consumed += decodedChild.consumed\n      value[hasUnnamedChild ? i : component?.name!] = decodedChild.value\n    }\n    return { consumed: 32, value }\n  }\n\n  // If the tuple has static children, we can just decode each component\n  // in sequence.\n  for (let i = 0; i < param.components.length; ++i) {\n    const component = param.components[i]\n    const decodedChild = decodeParam({\n      data,\n      param: component,\n      position: position + consumed,\n    })\n    consumed += decodedChild.consumed\n    value[hasUnnamedChild ? i : component?.name!] = decodedChild.value\n  }\n  return { consumed, value }\n}\n\ntype HasDynamicChildErrorType = GetArrayComponentsErrorType | ErrorType\n\nfunction hasDynamicChild(param: AbiParameter) {\n  const { type } = param\n  if (type === 'string') return true\n  if (type === 'bytes') return true\n  if (type.endsWith('[]')) return true\n\n  if (type === 'tuple') return (param as any).components?.some(hasDynamicChild)\n\n  const arrayComponents = getArrayComponents(param.type)\n  if (\n    arrayComponents &&\n    hasDynamicChild({ ...param, type: arrayComponents[1] } as AbiParameter)\n  )\n    return true\n\n  return false\n}\n","import type { Abi } from 'abitype'\n\nimport {\n  AbiConstructorNotFoundError,\n  type AbiConstructorNotFoundErrorType,\n  AbiConstructorParamsNotFoundError,\n  type AbiConstructorParamsNotFoundErrorType,\n} from '../../errors/abi.js'\nimport type { GetConstructorArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\n\nconst docsPath = '/docs/contract/decodeDeployData'\n\nexport type DecodeDeployDataParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n> = {\n  abi: TAbi\n  bytecode: Hex\n  data: Hex\n}\n\nexport type DecodeDeployDataReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n> = {\n  bytecode: Hex\n} & GetConstructorArgs<TAbi>\n\nexport type DecodeDeployDataErrorType =\n  | AbiConstructorNotFoundErrorType\n  | AbiConstructorParamsNotFoundErrorType\n  | DecodeAbiParametersErrorType\n  | ErrorType\n\nexport function decodeDeployData<const TAbi extends Abi | readonly unknown[]>({\n  abi,\n  bytecode,\n  data,\n}: DecodeDeployDataParameters<TAbi>): DecodeDeployDataReturnType<TAbi> {\n  if (data === bytecode) return { bytecode } as DecodeDeployDataReturnType<TAbi>\n\n  const description = (abi as Abi).find(\n    (x) => 'type' in x && x.type === 'constructor',\n  )\n  if (!description) throw new AbiConstructorNotFoundError({ docsPath })\n  if (!('inputs' in description))\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n  if (!description.inputs || description.inputs.length === 0)\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n\n  const args = decodeAbiParameters(\n    description.inputs,\n    `0x${data.replace(bytecode, '')}`,\n  )\n  return { args, bytecode } as unknown as DecodeDeployDataReturnType<TAbi>\n}\n","import type { Abi, ExtractAbiError, ExtractAbiErrorNames } from 'abitype'\n\nimport { solidityError, solidityPanic } from '../../constants/solidity.js'\nimport {\n  AbiDecodingZeroDataError,\n  type AbiDecodingZeroDataErrorType,\n  AbiErrorSignatureNotFoundError,\n  type AbiErrorSignatureNotFoundErrorType,\n} from '../../errors/abi.js'\nimport type { AbiItem, GetErrorArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport { slice } from '../data/slice.js'\nimport {\n  type GetFunctionSelectorErrorType,\n  getFunctionSelector,\n} from '../hash/getFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\n\nexport type DecodeErrorResultParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n> = { abi?: TAbi; data: Hex }\n\nexport type DecodeErrorResultReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  _ErrorNames extends string = TAbi extends Abi\n    ? Abi extends TAbi\n      ? string\n      : ExtractAbiErrorNames<TAbi>\n    : string,\n> = {\n  [TName in _ErrorNames]: {\n    abiItem: TAbi extends Abi ? ExtractAbiError<TAbi, TName> : AbiItem\n    args: GetErrorArgs<TAbi, TName>['args']\n    errorName: TName\n  }\n}[_ErrorNames]\n\nexport type DecodeErrorResultErrorType =\n  | AbiDecodingZeroDataErrorType\n  | AbiErrorSignatureNotFoundErrorType\n  | DecodeAbiParametersErrorType\n  | FormatAbiItemErrorType\n  | GetFunctionSelectorErrorType\n  | ErrorType\n\nexport function decodeErrorResult<const TAbi extends Abi | readonly unknown[]>({\n  abi,\n  data,\n}: DecodeErrorResultParameters<TAbi>): DecodeErrorResultReturnType<TAbi> {\n  const signature = slice(data, 0, 4)\n  if (signature === '0x') throw new AbiDecodingZeroDataError()\n\n  const abi_ = [...((abi as Abi) || []), solidityError, solidityPanic]\n  const abiItem = abi_.find(\n    (x) =>\n      x.type === 'error' && signature === getFunctionSelector(formatAbiItem(x)),\n  )\n  if (!abiItem)\n    throw new AbiErrorSignatureNotFoundError(signature, {\n      docsPath: '/docs/contract/decodeErrorResult',\n    })\n  return {\n    abiItem,\n    args: ('inputs' in abiItem && abiItem.inputs && abiItem.inputs.length > 0\n      ? decodeAbiParameters(abiItem.inputs, slice(data, 4))\n      : undefined) as readonly unknown[] | undefined,\n    errorName: (abiItem as { name: string }).name,\n  } as DecodeErrorResultReturnType<TAbi>\n}\n","import type { Abi, AbiParameter, ExtractAbiEventNames } from 'abitype'\n\nimport {\n  AbiDecodingDataSizeTooSmallError,\n  type AbiDecodingDataSizeTooSmallErrorType,\n  AbiEventSignatureEmptyTopicsError,\n  type AbiEventSignatureEmptyTopicsErrorType,\n  AbiEventSignatureNotFoundError,\n  type AbiEventSignatureNotFoundErrorType,\n  DecodeLogDataMismatch,\n  type DecodeLogDataMismatchErrorType,\n  DecodeLogTopicsMismatch,\n  type DecodeLogTopicsMismatchErrorType,\n} from '../../errors/abi.js'\nimport type {\n  EventDefinition,\n  GetEventArgsFromTopics,\n  InferEventName,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type GetEventSelectorErrorType,\n  getEventSelector,\n} from '../hash/getEventSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\n\nexport type DecodeEventLogParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TEventName extends string | undefined = string,\n  TTopics extends Hex[] = Hex[],\n  TData extends Hex | undefined = undefined,\n  TStrict extends boolean = true,\n> = {\n  abi: TAbi\n  data?: TData\n  eventName?: InferEventName<TAbi, TEventName>\n  strict?: TStrict\n  topics: [signature: Hex, ...args: TTopics] | []\n}\n\nexport type DecodeEventLogReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TEventName extends string | undefined = string,\n  TTopics extends Hex[] = Hex[],\n  TData extends Hex | undefined = undefined,\n  TStrict extends boolean = true,\n  _EventNames extends string = TAbi extends Abi\n    ? Abi extends TAbi\n      ? string\n      : ExtractAbiEventNames<TAbi>\n    : string,\n> = TEventName extends _EventNames[number]\n  ? Prettify<\n      {\n        eventName: TEventName\n      } & GetEventArgsFromTopics<TAbi, TEventName, TTopics, TData, TStrict>\n    >\n  : {\n      [TName in _EventNames]: Prettify<\n        {\n          eventName: TName\n        } & GetEventArgsFromTopics<TAbi, TName, TTopics, TData, TStrict>\n      >\n    }[_EventNames]\n\nexport type DecodeEventLogErrorType =\n  | AbiDecodingDataSizeTooSmallErrorType\n  | AbiEventSignatureEmptyTopicsErrorType\n  | AbiEventSignatureNotFoundErrorType\n  | DecodeAbiParametersErrorType\n  | DecodeLogTopicsMismatchErrorType\n  | DecodeLogDataMismatchErrorType\n  | FormatAbiItemErrorType\n  | GetEventSelectorErrorType\n  | ErrorType\n\nconst docsPath = '/docs/contract/decodeEventLog'\n\nexport function decodeEventLog<\n  const TAbi extends Abi | readonly unknown[],\n  TEventName extends string | undefined = undefined,\n  TTopics extends Hex[] = Hex[],\n  TData extends Hex | undefined = undefined,\n  TStrict extends boolean = true,\n>({\n  abi,\n  data,\n  strict: strict_,\n  topics,\n}: DecodeEventLogParameters<\n  TAbi,\n  TEventName,\n  TTopics,\n  TData,\n  TStrict\n>): DecodeEventLogReturnType<TAbi, TEventName, TTopics, TData, TStrict> {\n  const strict = strict_ ?? true\n  const [signature, ...argTopics] = topics\n  if (!signature)\n    throw new AbiEventSignatureEmptyTopicsError({\n      docsPath,\n    })\n  const abiItem = (abi as Abi).find(\n    (x) =>\n      x.type === 'event' &&\n      signature === getEventSelector(formatAbiItem(x) as EventDefinition),\n  )\n  if (!(abiItem && 'name' in abiItem) || abiItem.type !== 'event')\n    throw new AbiEventSignatureNotFoundError(signature, {\n      docsPath,\n    })\n\n  const { name, inputs } = abiItem\n  const isUnnamed = inputs?.some((x) => !('name' in x && x.name))\n\n  let args: any = isUnnamed ? [] : {}\n\n  // Decode topics (indexed args).\n  const indexedInputs = inputs.filter((x) => 'indexed' in x && x.indexed)\n  for (let i = 0; i < indexedInputs.length; i++) {\n    const param = indexedInputs[i]\n    const topic = argTopics[i]\n    if (!topic)\n      throw new DecodeLogTopicsMismatch({\n        abiItem,\n        param: param as AbiParameter & { indexed: boolean },\n      })\n    args[param.name || i] = decodeTopic({ param, value: topic })\n  }\n\n  // Decode data (non-indexed args).\n  const nonIndexedInputs = inputs.filter((x) => !('indexed' in x && x.indexed))\n  if (nonIndexedInputs.length > 0) {\n    if (data && data !== '0x') {\n      try {\n        const decodedData = decodeAbiParameters(nonIndexedInputs, data)\n        if (decodedData) {\n          if (isUnnamed) args = [...args, ...decodedData]\n          else {\n            for (let i = 0; i < nonIndexedInputs.length; i++) {\n              args[nonIndexedInputs[i].name!] = decodedData[i]\n            }\n          }\n        }\n      } catch (err) {\n        if (strict) {\n          if (err instanceof AbiDecodingDataSizeTooSmallError)\n            throw new DecodeLogDataMismatch({\n              abiItem,\n              data: err.data,\n              params: err.params,\n              size: err.size,\n            })\n          throw err\n        }\n      }\n    } else if (strict) {\n      throw new DecodeLogDataMismatch({\n        abiItem,\n        data: '0x',\n        params: nonIndexedInputs,\n        size: 0,\n      })\n    }\n  }\n\n  return {\n    eventName: name,\n    args: Object.values(args).length > 0 ? args : undefined,\n  } as unknown as DecodeEventLogReturnType<\n    TAbi,\n    TEventName,\n    TTopics,\n    TData,\n    TStrict\n  >\n}\n\nfunction decodeTopic({ param, value }: { param: AbiParameter; value: Hex }) {\n  if (\n    param.type === 'string' ||\n    param.type === 'bytes' ||\n    param.type === 'tuple' ||\n    param.type.match(/^(.*)\\[(\\d+)?\\]$/)\n  )\n    return value\n  const decodedArg = decodeAbiParameters([param], value) || []\n  return decodedArg[0]\n}\n","import type { Abi, ExtractAbiFunctionNames } from 'abitype'\n\nimport { AbiFunctionSignatureNotFoundError } from '../../errors/abi.js'\nimport type { GetFunctionArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport {\n  type GetFunctionSelectorErrorType,\n  getFunctionSelector,\n} from '../hash/getFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\n\nexport type DecodeFunctionDataParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n> = {\n  abi: TAbi\n  data: Hex\n}\n\nexport type DecodeFunctionDataReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  _FunctionNames extends string = TAbi extends Abi\n    ? Abi extends TAbi\n      ? string\n      : ExtractAbiFunctionNames<TAbi>\n    : string,\n> = {\n  [TName in _FunctionNames]: {\n    args: GetFunctionArgs<TAbi, TName>['args']\n    functionName: TName\n  }\n}[_FunctionNames]\n\nexport type DecodeFunctionDataErrorType =\n  | AbiFunctionSignatureNotFoundError\n  | DecodeAbiParametersErrorType\n  | FormatAbiItemErrorType\n  | GetFunctionSelectorErrorType\n  | SliceErrorType\n  | ErrorType\n\nexport function decodeFunctionData<TAbi extends Abi | readonly unknown[]>({\n  abi,\n  data,\n}: DecodeFunctionDataParameters<TAbi>) {\n  const signature = slice(data, 0, 4)\n  const description = (abi as Abi).find(\n    (x) =>\n      x.type === 'function' &&\n      signature === getFunctionSelector(formatAbiItem(x)),\n  )\n  if (!description)\n    throw new AbiFunctionSignatureNotFoundError(signature, {\n      docsPath: '/docs/contract/decodeFunctionData',\n    })\n  return {\n    functionName: (description as { name: string }).name,\n    args: ('inputs' in description &&\n    description.inputs &&\n    description.inputs.length > 0\n      ? decodeAbiParameters(description.inputs, slice(data, 4))\n      : undefined) as readonly unknown[] | undefined,\n  } as DecodeFunctionDataReturnType<TAbi>\n}\n","import type { Abi, ExtractAbiFunctionNames } from 'abitype'\n\nimport {\n  AbiFunctionNotFoundError,\n  type AbiFunctionNotFoundErrorType,\n  AbiFunctionOutputsNotFoundError,\n  type AbiFunctionOutputsNotFoundErrorType,\n} from '../../errors/abi.js'\nimport type {\n  AbiItem,\n  ContractFunctionResult,\n  GetFunctionArgs,\n  InferFunctionName,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\nimport {\n  type GetAbiItemErrorType,\n  type GetAbiItemParameters,\n  getAbiItem,\n} from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/decodeFunctionResult'\n\nexport type DecodeFunctionResultParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string | undefined = string,\n  _FunctionName = InferFunctionName<TAbi, TFunctionName>,\n> = {\n  functionName?: _FunctionName\n  data: Hex\n} & (TFunctionName extends string\n  ? { abi: TAbi } & Partial<GetFunctionArgs<TAbi, TFunctionName>>\n  : _FunctionName extends string\n    ? { abi: [TAbi[number]] } & Partial<GetFunctionArgs<TAbi, _FunctionName>>\n    : never)\n\nexport type DecodeFunctionResultReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string | undefined = string,\n  _FunctionName extends string = TAbi extends Abi\n    ? Abi extends TAbi\n      ? string\n      : ExtractAbiFunctionNames<TAbi>[number]\n    : string,\n> = TFunctionName extends string\n  ? ContractFunctionResult<TAbi, TFunctionName>\n  : ContractFunctionResult<TAbi, _FunctionName>\n\nexport type DecodeFunctionResultErrorType =\n  | AbiFunctionNotFoundErrorType\n  | AbiFunctionOutputsNotFoundErrorType\n  | DecodeAbiParametersErrorType\n  | GetAbiItemErrorType\n  | ErrorType\n\nexport function decodeFunctionResult<\n  const TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string | undefined = undefined,\n>({\n  abi,\n  args,\n  functionName,\n  data,\n}: DecodeFunctionResultParameters<\n  TAbi,\n  TFunctionName\n>): DecodeFunctionResultReturnType<TAbi, TFunctionName> {\n  let abiItem = abi[0] as AbiItem\n  if (functionName) {\n    abiItem = getAbiItem({\n      abi,\n      args,\n      name: functionName,\n    } as GetAbiItemParameters)\n    if (!abiItem) throw new AbiFunctionNotFoundError(functionName, { docsPath })\n  }\n\n  if (abiItem.type !== 'function')\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\n  if (!abiItem.outputs)\n    throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath })\n\n  const values = decodeAbiParameters(abiItem.outputs, data)\n  if (values && values.length > 1) return values as any\n  if (values && values.length === 1) return values[0] as any\n  return undefined as any\n}\n","import type {\n  AbiParameter,\n  AbiParameterToPrimitiveType,\n  AbiParametersToPrimitiveTypes,\n} from 'abitype'\n\nimport {\n  AbiEncodingArrayLengthMismatchError,\n  type AbiEncodingArrayLengthMismatchErrorType,\n  AbiEncodingBytesSizeMismatchError,\n  type AbiEncodingBytesSizeMismatchErrorType,\n  AbiEncodingLengthMismatchError,\n  type AbiEncodingLengthMismatchErrorType,\n  InvalidAbiEncodingTypeError,\n  type InvalidAbiEncodingTypeErrorType,\n  InvalidArrayError,\n  type InvalidArrayErrorType,\n} from '../../errors/abi.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { type PadHexErrorType, padHex } from '../data/pad.js'\nimport { type SizeErrorType, size } from '../data/size.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport {\n  type BoolToHexErrorType,\n  type NumberToHexErrorType,\n  type StringToHexErrorType,\n  boolToHex,\n  numberToHex,\n  stringToHex,\n} from '../encoding/toHex.js'\n\nexport type EncodeAbiParametersReturnType = Hex\n\nexport type EncodeAbiParametersErrorType =\n  | AbiEncodingLengthMismatchErrorType\n  | PrepareParamsErrorType\n  | EncodeParamsErrorType\n  | ErrorType\n\n/**\n * @description Encodes a list of primitive values into an ABI-encoded hex value.\n */\nexport function encodeAbiParameters<\n  const TParams extends readonly AbiParameter[] | readonly unknown[],\n>(\n  params: TParams,\n  values: TParams extends readonly AbiParameter[]\n    ? AbiParametersToPrimitiveTypes<TParams>\n    : never,\n): EncodeAbiParametersReturnType {\n  if (params.length !== values.length)\n    throw new AbiEncodingLengthMismatchError({\n      expectedLength: params.length as number,\n      givenLength: values.length,\n    })\n  // Prepare the parameters to determine dynamic types to encode.\n  const preparedParams = prepareParams({\n    params: params as readonly AbiParameter[],\n    values,\n  })\n  const data = encodeParams(preparedParams)\n  if (data.length === 0) return '0x'\n  return data\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype PreparedParam = { dynamic: boolean; encoded: Hex }\n\ntype TupleAbiParameter = AbiParameter & { components: readonly AbiParameter[] }\ntype Tuple = AbiParameterToPrimitiveType<TupleAbiParameter>\n\nexport type PrepareParamsErrorType = ErrorType\n\nfunction prepareParams<const TParams extends readonly AbiParameter[]>({\n  params,\n  values,\n}: {\n  params: TParams\n  values: AbiParametersToPrimitiveTypes<TParams>\n}) {\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < params.length; i++) {\n    preparedParams.push(prepareParam({ param: params[i], value: values[i] }))\n  }\n  return preparedParams\n}\n\nexport type PrepareParamErrorType =\n  | GetArrayComponentsErrorType\n  | InvalidAbiEncodingTypeErrorType\n  | ErrorType\n\nfunction prepareParam<const TParam extends AbiParameter>({\n  param,\n  value,\n}: {\n  param: TParam\n  value: AbiParameterToPrimitiveType<TParam>\n}): PreparedParam {\n  const arrayComponents = getArrayComponents(param.type)\n  if (arrayComponents) {\n    const [length, type] = arrayComponents\n    return encodeArray(value, { length, param: { ...param, type } })\n  }\n  if (param.type === 'tuple') {\n    return encodeTuple(value as unknown as Tuple, {\n      param: param as TupleAbiParameter,\n    })\n  }\n  if (param.type === 'address') {\n    return encodeAddress(value as unknown as Hex)\n  }\n  if (param.type === 'bool') {\n    return encodeBool(value as unknown as boolean)\n  }\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    const signed = param.type.startsWith('int')\n    return encodeNumber(value as unknown as number, { signed })\n  }\n  if (param.type.startsWith('bytes')) {\n    return encodeBytes(value as unknown as Hex, { param })\n  }\n  if (param.type === 'string') {\n    return encodeString(value as unknown as string)\n  }\n  throw new InvalidAbiEncodingTypeError(param.type, {\n    docsPath: '/docs/contract/encodeAbiParameters',\n  })\n}\n\n/////////////////////////////////////////////////////////////////\n\nexport type EncodeParamsErrorType =\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction encodeParams(preparedParams: PreparedParam[]): Hex {\n  // 1. Compute the size of the static part of the parameters.\n  let staticSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) staticSize += 32\n    else staticSize += size(encoded)\n  }\n\n  // 2. Split the parameters into static and dynamic parts.\n  const staticParams: Hex[] = []\n  const dynamicParams: Hex[] = []\n  let dynamicSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) {\n      staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }))\n      dynamicParams.push(encoded)\n      dynamicSize += size(encoded)\n    } else {\n      staticParams.push(encoded)\n    }\n  }\n\n  // 3. Concatenate static and dynamic parts.\n  return concat([...staticParams, ...dynamicParams])\n}\n\n/////////////////////////////////////////////////////////////////\n\nexport type EncodeAddressErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nfunction encodeAddress(value: Hex): PreparedParam {\n  if (!isAddress(value)) throw new InvalidAddressError({ address: value })\n  return { dynamic: false, encoded: padHex(value.toLowerCase() as Hex) }\n}\n\nexport type EncodeArrayErrorType =\n  | AbiEncodingArrayLengthMismatchErrorType\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  | InvalidArrayErrorType\n  | NumberToHexErrorType\n  | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeArray<const TParam extends AbiParameter>(\n  value: AbiParameterToPrimitiveType<TParam>,\n  {\n    length,\n    param,\n  }: {\n    length: number | null\n    param: TParam\n  },\n): PreparedParam {\n  const dynamic = length === null\n\n  if (!Array.isArray(value)) throw new InvalidArrayError(value)\n  if (!dynamic && value.length !== length)\n    throw new AbiEncodingArrayLengthMismatchError({\n      expectedLength: length!,\n      givenLength: value.length,\n      type: `${param.type}[${length}]`,\n    })\n\n  let dynamicChild = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < value.length; i++) {\n    const preparedParam = prepareParam({ param, value: value[i] })\n    if (preparedParam.dynamic) dynamicChild = true\n    preparedParams.push(preparedParam)\n  }\n\n  if (dynamic || dynamicChild) {\n    const data = encodeParams(preparedParams)\n    if (dynamic) {\n      const length = numberToHex(preparedParams.length, { size: 32 })\n      return {\n        dynamic: true,\n        encoded: preparedParams.length > 0 ? concat([length, data]) : length,\n      }\n    }\n    if (dynamicChild) return { dynamic: true, encoded: data }\n  }\n  return {\n    dynamic: false,\n    encoded: concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\nexport type EncodeBytesErrorType =\n  | AbiEncodingBytesSizeMismatchErrorType\n  | ConcatErrorType\n  | PadHexErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction encodeBytes<const TParam extends AbiParameter>(\n  value: Hex,\n  { param }: { param: TParam },\n): PreparedParam {\n  const [, paramSize] = param.type.split('bytes')\n  const bytesSize = size(value)\n  if (!paramSize) {\n    let value_ = value\n    // If the size is not divisible by 32 bytes, pad the end\n    // with empty bytes to the ceiling 32 bytes.\n    if (bytesSize % 32 !== 0)\n      value_ = padHex(value_, {\n        dir: 'right',\n        size: Math.ceil((value.length - 2) / 2 / 32) * 32,\n      })\n    return {\n      dynamic: true,\n      encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_]),\n    }\n  }\n  if (bytesSize !== parseInt(paramSize))\n    throw new AbiEncodingBytesSizeMismatchError({\n      expectedSize: parseInt(paramSize),\n      value,\n    })\n  return { dynamic: false, encoded: padHex(value, { dir: 'right' }) }\n}\n\nexport type EncodeBoolErrorType =\n  | PadHexErrorType\n  | BoolToHexErrorType\n  | ErrorType\n\nfunction encodeBool(value: boolean): PreparedParam {\n  return { dynamic: false, encoded: padHex(boolToHex(value)) }\n}\n\nexport type EncodeNumberErrorType = NumberToHexErrorType | ErrorType\n\nfunction encodeNumber(\n  value: number,\n  { signed }: { signed: boolean },\n): PreparedParam {\n  return {\n    dynamic: false,\n    encoded: numberToHex(value, {\n      size: 32,\n      signed,\n    }),\n  }\n}\n\nexport type EncodeStringErrorType =\n  | ConcatErrorType\n  | NumberToHexErrorType\n  | PadHexErrorType\n  | SizeErrorType\n  | SliceErrorType\n  | StringToHexErrorType\n  | ErrorType\n\nfunction encodeString(value: string): PreparedParam {\n  const hexValue = stringToHex(value)\n  const partsLength = Math.ceil(size(hexValue) / 32)\n  const parts: Hex[] = []\n  for (let i = 0; i < partsLength; i++) {\n    parts.push(\n      padHex(slice(hexValue, i * 32, (i + 1) * 32), {\n        dir: 'right',\n      }),\n    )\n  }\n  return {\n    dynamic: true,\n    encoded: concat([\n      padHex(numberToHex(size(hexValue), { size: 32 })),\n      ...parts,\n    ]),\n  }\n}\n\nexport type EncodeTupleErrorType =\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeTuple<\n  const TParam extends AbiParameter & { components: readonly AbiParameter[] },\n>(\n  value: AbiParameterToPrimitiveType<TParam>,\n  { param }: { param: TParam },\n): PreparedParam {\n  let dynamic = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < param.components.length; i++) {\n    const param_ = param.components[i]\n    const index = Array.isArray(value) ? i : param_.name\n    const preparedParam = prepareParam({\n      param: param_,\n      value: (value as any)[index!] as readonly unknown[],\n    })\n    preparedParams.push(preparedParam)\n    if (preparedParam.dynamic) dynamic = true\n  }\n  return {\n    dynamic,\n    encoded: dynamic\n      ? encodeParams(preparedParams)\n      : concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\nexport type GetArrayComponentsErrorType = ErrorType\n\nexport function getArrayComponents(\n  type: string,\n): [length: number | null, innerType: string] | undefined {\n  const matches = type.match(/^(.*)\\[(\\d+)?\\]$/)\n  return matches\n    ? // Return `null` if the array is dynamic.\n      [matches[2] ? Number(matches[2]) : null, matches[1]]\n    : undefined\n}\n","import type { Abi } from 'abitype'\n\nimport {\n  AbiConstructorNotFoundError,\n  type AbiConstructorNotFoundErrorType,\n  AbiConstructorParamsNotFoundError,\n} from '../../errors/abi.js'\nimport type { GetConstructorArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\n\nconst docsPath = '/docs/contract/encodeDeployData'\n\nexport type EncodeDeployDataParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n> = {\n  abi: TAbi\n  bytecode: Hex\n} & GetConstructorArgs<TAbi>\n\nexport type EncodeDeployDataErrorType =\n  | AbiConstructorNotFoundErrorType\n  | ConcatHexErrorType\n  | EncodeAbiParametersErrorType\n  | ErrorType\n\nexport function encodeDeployData<const TAbi extends Abi | readonly unknown[]>({\n  abi,\n  args,\n  bytecode,\n}: EncodeDeployDataParameters<TAbi>) {\n  if (!args || args.length === 0) return bytecode\n\n  const description = (abi as Abi).find(\n    (x) => 'type' in x && x.type === 'constructor',\n  )\n  if (!description) throw new AbiConstructorNotFoundError({ docsPath })\n  if (!('inputs' in description))\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n  if (!description.inputs || description.inputs.length === 0)\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n\n  const data = encodeAbiParameters(\n    description.inputs,\n    args as readonly unknown[],\n  )\n  return concatHex([bytecode, data!])\n}\n","import type { Abi } from 'abitype'\n\nimport {\n  AbiErrorInputsNotFoundError,\n  AbiErrorNotFoundError,\n} from '../../errors/abi.js'\nimport type {\n  AbiItem,\n  GetErrorArgs,\n  InferErrorName,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport {\n  type GetFunctionSelectorErrorType,\n  getFunctionSelector,\n} from '../hash/getFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\nimport {\n  type GetAbiItemErrorType,\n  type GetAbiItemParameters,\n  getAbiItem,\n} from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/encodeErrorResult'\n\nexport type EncodeErrorResultParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TErrorName extends string | undefined = string,\n  _ErrorName = InferErrorName<TAbi, TErrorName>,\n> = {\n  errorName?: _ErrorName\n} & (TErrorName extends string\n  ? { abi: TAbi } & GetErrorArgs<TAbi, TErrorName>\n  : _ErrorName extends string\n    ? { abi: [TAbi[number]] } & GetErrorArgs<TAbi, _ErrorName>\n    : never)\n\nexport type EncodeErrorResultErrorType =\n  | GetAbiItemErrorType\n  | FormatAbiItemErrorType\n  | GetFunctionSelectorErrorType\n  | EncodeAbiParametersErrorType\n  | ConcatHexErrorType\n  | ErrorType\n\nexport function encodeErrorResult<\n  const TAbi extends Abi | readonly unknown[],\n  TErrorName extends string | undefined = undefined,\n>({ abi, errorName, args }: EncodeErrorResultParameters<TAbi, TErrorName>) {\n  let abiItem = abi[0] as AbiItem\n  if (errorName) {\n    abiItem = getAbiItem({\n      abi,\n      args,\n      name: errorName,\n    } as GetAbiItemParameters)\n    if (!abiItem) throw new AbiErrorNotFoundError(errorName, { docsPath })\n  }\n\n  if (abiItem.type !== 'error')\n    throw new AbiErrorNotFoundError(undefined, { docsPath })\n\n  const definition = formatAbiItem(abiItem)\n  const signature = getFunctionSelector(definition)\n\n  let data: Hex = '0x'\n  if (args && (args as readonly unknown[]).length > 0) {\n    if (!abiItem.inputs)\n      throw new AbiErrorInputsNotFoundError(abiItem.name, { docsPath })\n    data = encodeAbiParameters(abiItem.inputs, args as readonly unknown[])\n  }\n  return concatHex([signature, data])\n}\n","import type { Abi, AbiParameter, AbiParameterToPrimitiveType } from 'abitype'\n\nimport {\n  AbiEventNotFoundError,\n  type AbiEventNotFoundErrorType,\n} from '../../errors/abi.js'\nimport {\n  FilterTypeNotSupportedError,\n  type FilterTypeNotSupportedErrorType,\n} from '../../errors/log.js'\nimport type {\n  AbiItem,\n  EventDefinition,\n  GetEventArgs,\n  InferEventName,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport {\n  type GetEventSelectorErrorType,\n  getEventSelector,\n} from '../hash/getEventSelector.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\nimport { type GetAbiItemParameters, getAbiItem } from './getAbiItem.js'\n\nexport type EncodeEventTopicsParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TEventName extends string | undefined = string,\n  _EventName = InferEventName<TAbi, TEventName>,\n> = {\n  eventName?: _EventName\n} & (TEventName extends string\n  ? { abi: TAbi; args?: GetEventArgs<TAbi, TEventName> }\n  : _EventName extends string\n    ? { abi: [TAbi[number]]; args?: GetEventArgs<TAbi, _EventName> }\n    : never)\n\nexport type EncodeEventTopicsErrorType =\n  | AbiEventNotFoundErrorType\n  | EncodeArgErrorType\n  | FormatAbiItemErrorType\n  | GetEventSelectorErrorType\n  | ErrorType\n\nexport function encodeEventTopics<\n  const TAbi extends Abi | readonly unknown[],\n  TEventName extends string | undefined = undefined,\n>({ abi, eventName, args }: EncodeEventTopicsParameters<TAbi, TEventName>) {\n  let abiItem = abi[0] as AbiItem\n  if (eventName) {\n    abiItem = getAbiItem({\n      abi,\n      args,\n      name: eventName,\n    } as GetAbiItemParameters)\n    if (!abiItem)\n      throw new AbiEventNotFoundError(eventName, {\n        docsPath: '/docs/contract/encodeEventTopics',\n      })\n  }\n\n  if (abiItem.type !== 'event')\n    throw new AbiEventNotFoundError(undefined, {\n      docsPath: '/docs/contract/encodeEventTopics',\n    })\n\n  const definition = formatAbiItem(abiItem)\n  const signature = getEventSelector(definition as EventDefinition)\n\n  let topics: Hex[] = []\n  if (args && 'inputs' in abiItem) {\n    const indexedInputs = abiItem.inputs?.filter(\n      (param) => 'indexed' in param && param.indexed,\n    )\n    const args_ = Array.isArray(args)\n      ? args\n      : Object.values(args).length > 0\n        ? indexedInputs?.map((x: any) => (args as any)[x.name]) ?? []\n        : []\n\n    if (args_.length > 0) {\n      topics =\n        indexedInputs?.map((param, i) =>\n          Array.isArray(args_[i])\n            ? args_[i].map((_: any, j: number) =>\n                encodeArg({ param, value: args_[i][j] }),\n              )\n            : args_[i]\n              ? encodeArg({ param, value: args_[i] })\n              : null,\n        ) ?? []\n    }\n  }\n  return [signature, ...topics]\n}\n\nexport type EncodeArgErrorType =\n  | Keccak256ErrorType\n  | ToBytesErrorType\n  | EncodeAbiParametersErrorType\n  | FilterTypeNotSupportedErrorType\n  | ErrorType\n\nfunction encodeArg({\n  param,\n  value,\n}: { param: AbiParameter; value: AbiParameterToPrimitiveType<AbiParameter> }) {\n  if (param.type === 'string' || param.type === 'bytes')\n    return keccak256(toBytes(value as string))\n  if (param.type === 'tuple' || param.type.match(/^(.*)\\[(\\d+)?\\]$/))\n    throw new FilterTypeNotSupportedError(param.type)\n  return encodeAbiParameters([param], [value])\n}\n","import type { Abi } from 'abitype'\n\nimport {\n  AbiFunctionNotFoundError,\n  type AbiFunctionNotFoundErrorType,\n} from '../../errors/abi.js'\nimport type {\n  AbiItem,\n  GetFunctionArgs,\n  InferFunctionName,\n} from '../../types/contract.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport {\n  type GetFunctionSelectorErrorType,\n  getFunctionSelector,\n} from '../hash/getFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\nimport {\n  type GetAbiItemErrorType,\n  type GetAbiItemParameters,\n  getAbiItem,\n} from './getAbiItem.js'\n\nexport type EncodeFunctionDataParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string | undefined = string,\n  _FunctionName = InferFunctionName<TAbi, TFunctionName>,\n> = {\n  functionName?: _FunctionName\n} & (TFunctionName extends string\n  ? { abi: TAbi } & GetFunctionArgs<TAbi, TFunctionName>\n  : _FunctionName extends string\n    ? { abi: [TAbi[number]] } & GetFunctionArgs<TAbi, _FunctionName>\n    : never)\n\nexport type EncodeFunctionDataErrorType =\n  | AbiFunctionNotFoundErrorType\n  | ConcatHexErrorType\n  | EncodeAbiParametersErrorType\n  | FormatAbiItemErrorType\n  | GetAbiItemErrorType\n  | GetFunctionSelectorErrorType\n  | ErrorType\n\nexport function encodeFunctionData<\n  const TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string | undefined = undefined,\n>({\n  abi,\n  args,\n  functionName,\n}: EncodeFunctionDataParameters<TAbi, TFunctionName>) {\n  let abiItem = abi[0] as AbiItem\n  if (functionName) {\n    abiItem = getAbiItem({\n      abi,\n      args,\n      name: functionName,\n    } as GetAbiItemParameters)\n    if (!abiItem)\n      throw new AbiFunctionNotFoundError(functionName, {\n        docsPath: '/docs/contract/encodeFunctionData',\n      })\n  }\n\n  if (abiItem.type !== 'function')\n    throw new AbiFunctionNotFoundError(undefined, {\n      docsPath: '/docs/contract/encodeFunctionData',\n    })\n\n  const definition = formatAbiItem(abiItem)\n  const signature = getFunctionSelector(definition)\n  const data =\n    'inputs' in abiItem && abiItem.inputs\n      ? encodeAbiParameters(abiItem.inputs, (args ?? []) as readonly unknown[])\n      : undefined\n  return concatHex([signature, data ?? '0x'])\n}\n","import type { Abi } from 'abitype'\n\nimport {\n  AbiFunctionNotFoundError,\n  AbiFunctionOutputsNotFoundError,\n} from '../../errors/abi.js'\nimport type {\n  AbiItem,\n  ContractFunctionResult,\n  InferFunctionName,\n} from '../../types/contract.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\nimport {\n  type GetAbiItemErrorType,\n  type GetAbiItemParameters,\n  getAbiItem,\n} from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/encodeFunctionResult'\n\nexport type EncodeFunctionResultParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string | undefined = string,\n  _FunctionName = InferFunctionName<TAbi, TFunctionName>,\n> = {\n  functionName?: _FunctionName\n} & (TFunctionName extends string\n  ? { abi: TAbi; result?: ContractFunctionResult<TAbi, TFunctionName> }\n  : _FunctionName extends string\n    ? {\n        abi: [TAbi[number]]\n        result?: ContractFunctionResult<TAbi, _FunctionName>\n      }\n    : never)\n\nexport type EncodeFunctionResultErrorType =\n  | AbiFunctionOutputsNotFoundError\n  | AbiFunctionNotFoundError\n  | EncodeAbiParametersErrorType\n  | GetAbiItemErrorType\n  | ErrorType\n\nexport function encodeFunctionResult<\n  const TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string | undefined = undefined,\n>({\n  abi,\n  functionName,\n  result,\n}: EncodeFunctionResultParameters<TAbi, TFunctionName>) {\n  let abiItem = abi[0] as AbiItem\n  if (functionName) {\n    abiItem = getAbiItem({\n      abi,\n      name: functionName,\n    } as GetAbiItemParameters)\n    if (!abiItem)\n      throw new AbiFunctionNotFoundError(functionName, {\n        docsPath: '/docs/contract/encodeFunctionResult',\n      })\n  }\n\n  if (abiItem.type !== 'function')\n    throw new AbiFunctionNotFoundError(undefined, {\n      docsPath: '/docs/contract/encodeFunctionResult',\n    })\n\n  if (!abiItem.outputs)\n    throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath })\n\n  let values = Array.isArray(result) ? result : [result]\n  if (abiItem.outputs.length === 0 && !values[0]) values = []\n\n  return encodeAbiParameters(abiItem.outputs, values)\n}\n","import type {\n  AbiParameterToPrimitiveType,\n  AbiType,\n  Address,\n  SolidityAddress,\n  SolidityArrayWithoutTuple,\n  SolidityBool,\n  SolidityBytes,\n  SolidityInt,\n  SolidityString,\n} from 'abitype'\n\nimport {\n  AbiEncodingLengthMismatchError,\n  type AbiEncodingLengthMismatchErrorType,\n  BytesSizeMismatchError,\n  type BytesSizeMismatchErrorType,\n  UnsupportedPackedAbiType,\n} from '../../errors/abi.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\nimport {\n  type BoolToHexErrorType,\n  type NumberToHexErrorType,\n  type StringToHexErrorType,\n  boolToHex,\n  numberToHex,\n  stringToHex,\n} from '../encoding/toHex.js'\nimport { arrayRegex, bytesRegex, integerRegex } from '../regex.js'\n\ntype PackedAbiType =\n  | SolidityAddress\n  | SolidityBool\n  | SolidityBytes\n  | SolidityInt\n  | SolidityString\n  | SolidityArrayWithoutTuple\n\ntype EncodePackedValues<\n  TPackedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\n> = {\n  [K in keyof TPackedAbiTypes]: TPackedAbiTypes[K] extends AbiType\n    ? AbiParameterToPrimitiveType<{ type: TPackedAbiTypes[K] }>\n    : unknown\n}\n\nexport type EncodePackedErrorType =\n  | AbiEncodingLengthMismatchErrorType\n  | ConcatHexErrorType\n  | EncodeErrorType\n  | ErrorType\n\nexport function encodePacked<\n  const TPackedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\n>(types: TPackedAbiTypes, values: EncodePackedValues<TPackedAbiTypes>): Hex {\n  if (types.length !== values.length)\n    throw new AbiEncodingLengthMismatchError({\n      expectedLength: types.length as number,\n      givenLength: values.length as number,\n    })\n\n  const data: Hex[] = []\n  for (let i = 0; i < (types as unknown[]).length; i++) {\n    const type = types[i]\n    const value = values[i]\n    data.push(encode(type, value))\n  }\n  return concatHex(data)\n}\n\ntype EncodeErrorType =\n  | BoolToHexErrorType\n  | BytesSizeMismatchErrorType\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | PadErrorType\n  | StringToHexErrorType\n  | UnsupportedPackedAbiType\n  | ErrorType\n\nfunction encode<const TPackedAbiType extends PackedAbiType | unknown>(\n  type: TPackedAbiType,\n  value: EncodePackedValues<[TPackedAbiType]>[0],\n  isArray = false,\n): Hex {\n  if (type === 'address') {\n    const address = value as Address\n    if (!isAddress(address)) throw new InvalidAddressError({ address })\n    return pad(address.toLowerCase() as Hex, {\n      size: isArray ? 32 : null,\n    }) as Address\n  }\n  if (type === 'string') return stringToHex(value as string)\n  if (type === 'bytes') return value as Hex\n  if (type === 'bool')\n    return pad(boolToHex(value as boolean), { size: isArray ? 32 : 1 })\n\n  const intMatch = (type as string).match(integerRegex)\n  if (intMatch) {\n    const [_type, baseType, bits = '256'] = intMatch\n    const size = parseInt(bits) / 8\n    return numberToHex(value as number, {\n      size: isArray ? 32 : size,\n      signed: baseType === 'int',\n    })\n  }\n\n  const bytesMatch = (type as string).match(bytesRegex)\n  if (bytesMatch) {\n    const [_type, size] = bytesMatch\n    if (parseInt(size) !== ((value as Hex).length - 2) / 2)\n      throw new BytesSizeMismatchError({\n        expectedSize: parseInt(size),\n        givenSize: ((value as Hex).length - 2) / 2,\n      })\n    return pad(value as Hex, { dir: 'right', size: isArray ? 32 : null }) as Hex\n  }\n\n  const arrayMatch = (type as string).match(arrayRegex)\n  if (arrayMatch && Array.isArray(value)) {\n    const [_type, childType] = arrayMatch\n    const data: Hex[] = []\n    for (let i = 0; i < value.length; i++) {\n      data.push(encode(childType, value[i], true))\n    }\n    if (data.length === 0) return '0x'\n    return concatHex(data)\n  }\n\n  throw new UnsupportedPackedAbiType(type)\n}\n","import type { AbiParameter } from 'abitype'\n\nimport {\n  InvalidDefinitionTypeError,\n  type InvalidDefinitionTypeErrorType,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { AbiItem } from '../../types/contract.js'\n\nexport type FormatAbiItemErrorType =\n  | FormatAbiParamsErrorType\n  | InvalidDefinitionTypeErrorType\n  | ErrorType\n\nexport function formatAbiItem(\n  abiItem: AbiItem,\n  { includeName = false }: { includeName?: boolean } = {},\n) {\n  if (\n    abiItem.type !== 'function' &&\n    abiItem.type !== 'event' &&\n    abiItem.type !== 'error'\n  )\n    throw new InvalidDefinitionTypeError(abiItem.type)\n\n  return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`\n}\n\nexport type FormatAbiParamsErrorType = ErrorType\n\nexport function formatAbiParams(\n  params: readonly AbiParameter[] | undefined,\n  { includeName = false }: { includeName?: boolean } = {},\n): string {\n  if (!params) return ''\n  return params\n    .map((param) => formatAbiParam(param, { includeName }))\n    .join(includeName ? ', ' : ',')\n}\n\nexport type FormatAbiParamErrorType = ErrorType\n\nfunction formatAbiParam(\n  param: AbiParameter,\n  { includeName }: { includeName: boolean },\n): string {\n  if (param.type.startsWith('tuple')) {\n    return `(${formatAbiParams(\n      (param as unknown as { components: AbiParameter[] }).components,\n      { includeName },\n    )})${param.type.slice('tuple'.length)}`\n  }\n  return param.type + (includeName && param.name ? ` ${param.name}` : '')\n}\n","import type { AbiParameter } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { AbiItem } from '../../types/contract.js'\nimport { stringify } from '../stringify.js'\n\nexport type FormatAbiItemWithArgsErrorType = ErrorType\n\nexport function formatAbiItemWithArgs({\n  abiItem,\n  args,\n  includeFunctionName = true,\n  includeName = false,\n}: {\n  abiItem: AbiItem\n  args: readonly unknown[]\n  includeFunctionName?: boolean\n  includeName?: boolean\n}) {\n  if (!('name' in abiItem)) return\n  if (!('inputs' in abiItem)) return\n  if (!abiItem.inputs) return\n  return `${includeFunctionName ? abiItem.name : ''}(${abiItem.inputs\n    .map(\n      (input: AbiParameter, i: number) =>\n        `${includeName && input.name ? `${input.name}: ` : ''}${\n          typeof args[i] === 'object' ? stringify(args[i]) : args[i]\n        }`,\n    )\n    .join(', ')})`\n}\n","import { type Abi, type AbiParameter, type Address } from 'abitype'\n\nimport { AbiItemAmbiguityError } from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  AbiItem,\n  GetFunctionArgs,\n  InferItemName,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\nimport { getEventSelector } from '../../utils/hash/getEventSelector.js'\nimport {\n  type GetFunctionSelectorErrorType,\n  getFunctionSelector,\n} from '../../utils/hash/getFunctionSelector.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\n\nexport type GetAbiItemParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TItemName extends string = string,\n> = {\n  abi: TAbi\n  name: InferItemName<TAbi, TItemName> | Hex\n} & Partial<GetFunctionArgs<TAbi, TItemName>>\n\nexport type GetAbiItemReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TItemName extends string = string,\n> = Extract<\n  TAbi[number],\n  {\n    name: TItemName\n  }\n>\n\nexport type GetAbiItemErrorType =\n  | IsArgOfTypeErrorType\n  | IsHexErrorType\n  | GetFunctionSelectorErrorType\n  | ErrorType\n\nexport function getAbiItem<\n  const TAbi extends Abi | readonly unknown[],\n  TItemName extends string,\n>({\n  abi,\n  args = [],\n  name,\n}: GetAbiItemParameters<TAbi, TItemName>): GetAbiItemReturnType<\n  TAbi,\n  TItemName\n> {\n  const isSelector = isHex(name, { strict: false })\n\n  const abiItems = (abi as Abi).filter((abiItem) => {\n    if (isSelector) {\n      if (abiItem.type === 'function')\n        return getFunctionSelector(abiItem) === name\n      if (abiItem.type === 'event') return getEventSelector(abiItem) === name\n      return false\n    }\n    return 'name' in abiItem && abiItem.name === name\n  })\n\n  if (abiItems.length === 0) return undefined as any\n  if (abiItems.length === 1) return abiItems[0] as any\n\n  let matchedAbiItem: AbiItem | undefined = undefined\n  for (const abiItem of abiItems) {\n    if (!('inputs' in abiItem)) continue\n    if (!args || args.length === 0) {\n      if (!abiItem.inputs || abiItem.inputs.length === 0) return abiItem as any\n      continue\n    }\n    if (!abiItem.inputs) continue\n    if (abiItem.inputs.length === 0) continue\n    if (abiItem.inputs.length !== args.length) continue\n    const matched = (args as readonly unknown[]).every((arg, index) => {\n      const abiParameter = 'inputs' in abiItem && abiItem.inputs![index]\n      if (!abiParameter) return false\n      return isArgOfType(arg, abiParameter as AbiParameter)\n    })\n    if (matched) {\n      // Check for ambiguity against already matched parameters (e.g. `address` vs `bytes20`).\n      if (\n        matchedAbiItem &&\n        'inputs' in matchedAbiItem &&\n        matchedAbiItem.inputs\n      ) {\n        const ambiguousTypes = getAmbiguousTypes(\n          abiItem.inputs,\n          matchedAbiItem.inputs,\n          args as readonly unknown[],\n        )\n        if (ambiguousTypes)\n          throw new AbiItemAmbiguityError(\n            {\n              abiItem,\n              type: ambiguousTypes[0],\n            },\n            {\n              abiItem: matchedAbiItem,\n              type: ambiguousTypes[1],\n            },\n          )\n      }\n\n      matchedAbiItem = abiItem\n    }\n  }\n\n  if (matchedAbiItem)\n    return matchedAbiItem as GetAbiItemReturnType<TAbi, TItemName>\n  return abiItems[0] as GetAbiItemReturnType<TAbi, TItemName>\n}\n\nexport type IsArgOfTypeErrorType = IsAddressErrorType | ErrorType\n\nexport function isArgOfType(arg: unknown, abiParameter: AbiParameter): boolean {\n  const argType = typeof arg\n  const abiParameterType = abiParameter.type\n  switch (abiParameterType) {\n    case 'address':\n      return isAddress(arg as Address)\n    case 'bool':\n      return argType === 'boolean'\n    case 'function':\n      return argType === 'string'\n    case 'string':\n      return argType === 'string'\n    default: {\n      if (abiParameterType === 'tuple' && 'components' in abiParameter)\n        return Object.values(abiParameter.components).every(\n          (component, index) => {\n            return isArgOfType(\n              Object.values(arg as unknown[] | Record<string, unknown>)[index],\n              component as AbiParameter,\n            )\n          },\n        )\n\n      // `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n      // https://regexr.com/6v8hp\n      if (\n        /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(\n          abiParameterType,\n        )\n      )\n        return argType === 'number' || argType === 'bigint'\n\n      // `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n      // https://regexr.com/6va55\n      if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\n        return argType === 'string' || arg instanceof Uint8Array\n\n      // fixed-length (`<type>[M]`) and dynamic (`<type>[]`) arrays\n      // https://regexr.com/6va6i\n      if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n        return (\n          Array.isArray(arg) &&\n          arg.every((x: unknown) =>\n            isArgOfType(x, {\n              ...abiParameter,\n              // Pop off `[]` or `[M]` from end of type\n              type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, ''),\n            } as AbiParameter),\n          )\n        )\n      }\n\n      return false\n    }\n  }\n}\n\nexport function getAmbiguousTypes(\n  sourceParameters: readonly AbiParameter[],\n  targetParameters: readonly AbiParameter[],\n  args: readonly unknown[],\n): AbiParameter['type'][] | undefined {\n  for (const parameterIndex in sourceParameters) {\n    const sourceParameter = sourceParameters[parameterIndex]\n    const targetParameter = targetParameters[parameterIndex]\n\n    if (\n      sourceParameter.type === 'tuple' &&\n      targetParameter.type === 'tuple' &&\n      'components' in sourceParameter &&\n      'components' in targetParameter\n    )\n      return getAmbiguousTypes(\n        sourceParameter.components,\n        targetParameter.components,\n        (args as any)[parameterIndex],\n      )\n\n    const types = [sourceParameter.type, targetParameter.type]\n\n    const ambiguous = (() => {\n      if (types.includes('address') && types.includes('bytes20')) return true\n      if (types.includes('address') && types.includes('string'))\n        return isAddress(args[parameterIndex] as Address)\n      if (types.includes('address') && types.includes('bytes'))\n        return isAddress(args[parameterIndex] as Address)\n      return false\n    })()\n\n    if (ambiguous) return types\n  }\n\n  return\n}\n","// Tree-shaking doesn't work well when we import from an index entrypoint. We don't\n// want to bundle libs like `@noble/curves`, etc within the `/accounts` entrypoint\n// as that will dramatically increase bundle size. So we export the modules directly.\nexport { parseAccount } from '../accounts/utils/parseAccount.js'\nexport { publicKeyToAddress } from '../accounts/utils/publicKeyToAddress.js'\n","import type { Address } from 'abitype'\n\nimport { InvalidAddressError } from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { type IsAddressErrorType, isAddress } from './isAddress.js'\n\nexport type ChecksumAddressErrorType =\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\nexport function checksumAddress(address_: Address, chainId?: number): Address {\n  const hexAddress = chainId\n    ? `${chainId}${address_.toLowerCase()}`\n    : address_.substring(2).toLowerCase()\n  const hash = keccak256(stringToBytes(hexAddress), 'bytes')\n\n  const address = (\n    chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress\n  ).split('')\n  for (let i = 0; i < 40; i += 2) {\n    if (hash[i >> 1] >> 4 >= 8 && address[i]) {\n      address[i] = address[i].toUpperCase()\n    }\n    if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\n      address[i + 1] = address[i + 1].toUpperCase()\n    }\n  }\n\n  return `0x${address.join('')}`\n}\n\nexport type GetAddressErrorType =\n  | ChecksumAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nexport function getAddress(address: string, chainId?: number): Address {\n  if (!isAddress(address)) throw new InvalidAddressError({ address })\n  return checksumAddress(address, chainId)\n}\n","import type { Address } from 'abitype'\n\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { type IsBytesErrorType, isBytes } from '../data/isBytes.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type GetAddressErrorType, getAddress } from './getAddress.js'\n\nexport type GetCreateAddressOptions = {\n  from: Address\n  nonce: bigint\n}\n\nexport type GetCreate2AddressOptions =\n  | {\n      bytecode: ByteArray | Hex\n      from: Address\n      salt: ByteArray | Hex\n    }\n  | {\n      bytecodeHash: ByteArray | Hex\n      from: Address\n      salt: ByteArray | Hex\n    }\n\nexport type GetContractAddressOptions =\n  | ({\n      opcode?: 'CREATE'\n    } & GetCreateAddressOptions)\n  | ({ opcode: 'CREATE2' } & GetCreate2AddressOptions)\n\nexport function getContractAddress(opts: GetContractAddressOptions) {\n  if (opts.opcode === 'CREATE2') return getCreate2Address(opts)\n  return getCreateAddress(opts)\n}\n\nexport type GetCreateAddressErrorType =\n  | Keccak256ErrorType\n  | GetAddressErrorType\n  | ToBytesErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nexport function getCreateAddress(opts: GetCreateAddressOptions) {\n  const from = toBytes(getAddress(opts.from))\n\n  let nonce = toBytes(opts.nonce)\n  if (nonce[0] === 0) nonce = new Uint8Array([])\n\n  return getAddress(\n    `0x${keccak256(toRlp([from, nonce], 'bytes')).slice(26)}` as Address,\n  )\n}\n\nexport type GetCreate2AddressErrorType =\n  | ConcatErrorType\n  | Keccak256ErrorType\n  | GetAddressErrorType\n  | IsBytesErrorType\n  | PadErrorType\n  | SliceErrorType\n  | ToBytesErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nexport function getCreate2Address(opts: GetCreate2AddressOptions) {\n  const from = toBytes(getAddress(opts.from))\n  const salt = pad(isBytes(opts.salt) ? opts.salt : toBytes(opts.salt), {\n    size: 32,\n  })\n\n  const bytecodeHash = (() => {\n    if ('bytecodeHash' in opts) {\n      if (isBytes(opts.bytecodeHash)) return opts.bytecodeHash\n      return toBytes(opts.bytecodeHash)\n    }\n    return keccak256(opts.bytecode, 'bytes')\n  })()\n\n  return getAddress(\n    slice(keccak256(concat([toBytes('0xff'), from, salt, bytecodeHash])), 12),\n  )\n}\n","import type { Address } from 'abitype'\nimport type { ErrorType } from '../../errors/utils.js'\n\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/\n\nexport type IsAddressErrorType = ErrorType\n\nexport function isAddress(address: string): address is Address {\n  return addressRegex.test(address)\n}\n","import type { Address } from 'abitype'\n\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { isAddress } from './isAddress.js'\n\nexport type IsAddressEqualReturnType = boolean\nexport type IsAddressEqualErrorType = InvalidAddressErrorType | ErrorType\n\nexport function isAddressEqual(a: Address, b: Address) {\n  if (!isAddress(a)) throw new InvalidAddressError({ address: a })\n  if (!isAddress(b)) throw new InvalidAddressError({ address: b })\n  return a.toLowerCase() === b.toLowerCase()\n}\n","import { BaseError } from '../errors/base.js'\nimport {\n  HttpRequestError,\n  type HttpRequestErrorType,\n  type RpcRequestErrorType,\n  type TimeoutErrorType,\n  type WebSocketRequestErrorType,\n} from '../errors/request.js'\nimport {\n  ChainDisconnectedError,\n  type ChainDisconnectedErrorType,\n  InternalRpcError,\n  type InternalRpcErrorType,\n  InvalidInputRpcError,\n  type InvalidInputRpcErrorType,\n  InvalidParamsRpcError,\n  type InvalidParamsRpcErrorType,\n  InvalidRequestRpcError,\n  type InvalidRequestRpcErrorType,\n  JsonRpcVersionUnsupportedError,\n  type JsonRpcVersionUnsupportedErrorType,\n  LimitExceededRpcError,\n  type LimitExceededRpcErrorType,\n  MethodNotFoundRpcError,\n  type MethodNotFoundRpcErrorType,\n  MethodNotSupportedRpcError,\n  type MethodNotSupportedRpcErrorType,\n  ParseRpcError,\n  type ParseRpcErrorType,\n  ProviderDisconnectedError,\n  type ProviderDisconnectedErrorType,\n  type ProviderRpcErrorCode,\n  ResourceNotFoundRpcError,\n  type ResourceNotFoundRpcErrorType,\n  ResourceUnavailableRpcError,\n  type ResourceUnavailableRpcErrorType,\n  type RpcError,\n  type RpcErrorCode,\n  type RpcErrorType,\n  SwitchChainError,\n  type SwitchChainErrorType,\n  TransactionRejectedRpcError,\n  type TransactionRejectedRpcErrorType,\n  UnauthorizedProviderError,\n  type UnauthorizedProviderErrorType,\n  UnknownRpcError,\n  type UnknownRpcErrorType,\n  UnsupportedProviderMethodError,\n  type UnsupportedProviderMethodErrorType,\n  UserRejectedRequestError,\n  type UserRejectedRequestErrorType,\n} from '../errors/rpc.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { CreateBatchSchedulerErrorType } from './promise/createBatchScheduler.js'\nimport { type WithRetryErrorType, withRetry } from './promise/withRetry.js'\nimport type { GetSocketErrorType } from './rpc.js'\n\nexport type IsDeterministicErrorType = ErrorType\n\nexport const isDeterministicError = (error: Error) => {\n  if ('code' in error)\n    return (\n      error.code !== -1 &&\n      error.code !== -32004 &&\n      error.code !== -32005 &&\n      error.code !== -32042 &&\n      error.code !== -32603\n    )\n  if (error instanceof HttpRequestError && error.status)\n    return (\n      error.status !== 403 &&\n      error.status !== 408 &&\n      error.status !== 413 &&\n      error.status !== 429 &&\n      error.status !== 500 &&\n      error.status !== 502 &&\n      error.status !== 503 &&\n      error.status !== 504\n    )\n  return false\n}\n\nexport type RequestErrorType =\n  | ChainDisconnectedErrorType\n  | CreateBatchSchedulerErrorType\n  | HttpRequestErrorType\n  | InternalRpcErrorType\n  | InvalidInputRpcErrorType\n  | InvalidParamsRpcErrorType\n  | InvalidRequestRpcErrorType\n  | GetSocketErrorType\n  | JsonRpcVersionUnsupportedErrorType\n  | LimitExceededRpcErrorType\n  | MethodNotFoundRpcErrorType\n  | MethodNotSupportedRpcErrorType\n  | ParseRpcErrorType\n  | ProviderDisconnectedErrorType\n  | ResourceNotFoundRpcErrorType\n  | ResourceUnavailableRpcErrorType\n  | RpcErrorType\n  | RpcRequestErrorType\n  | SwitchChainErrorType\n  | TimeoutErrorType\n  | TransactionRejectedRpcErrorType\n  | UnauthorizedProviderErrorType\n  | UnknownRpcErrorType\n  | UnsupportedProviderMethodErrorType\n  | UserRejectedRequestErrorType\n  | WebSocketRequestErrorType\n  | WithRetryErrorType\n  | ErrorType\n\nexport function buildRequest<TRequest extends (args: any) => Promise<any>>(\n  request: TRequest,\n  {\n    retryDelay = 150,\n    retryCount = 3,\n  }: {\n    // The base delay (in ms) between retries.\n    retryDelay?: number\n    // The max number of times to retry.\n    retryCount?: number\n  } = {},\n) {\n  return (async (args: any) =>\n    withRetry(\n      async () => {\n        try {\n          return await request(args)\n        } catch (err_) {\n          const err = err_ as unknown as RpcError<\n            RpcErrorCode | ProviderRpcErrorCode\n          >\n          switch (err.code) {\n            // -32700\n            case ParseRpcError.code:\n              throw new ParseRpcError(err)\n            // -32600\n            case InvalidRequestRpcError.code:\n              throw new InvalidRequestRpcError(err)\n            // -32601\n            case MethodNotFoundRpcError.code:\n              throw new MethodNotFoundRpcError(err)\n            // -32602\n            case InvalidParamsRpcError.code:\n              throw new InvalidParamsRpcError(err)\n            // -32603\n            case InternalRpcError.code:\n              throw new InternalRpcError(err)\n            // -32000\n            case InvalidInputRpcError.code:\n              throw new InvalidInputRpcError(err)\n            // -32001\n            case ResourceNotFoundRpcError.code:\n              throw new ResourceNotFoundRpcError(err)\n            // -32002\n            case ResourceUnavailableRpcError.code:\n              throw new ResourceUnavailableRpcError(err)\n            // -32003\n            case TransactionRejectedRpcError.code:\n              throw new TransactionRejectedRpcError(err)\n            // -32004\n            case MethodNotSupportedRpcError.code:\n              throw new MethodNotSupportedRpcError(err)\n            // -32005\n            case LimitExceededRpcError.code:\n              throw new LimitExceededRpcError(err)\n            // -32006\n            case JsonRpcVersionUnsupportedError.code:\n              throw new JsonRpcVersionUnsupportedError(err)\n            // 4001\n            case UserRejectedRequestError.code:\n              throw new UserRejectedRequestError(err)\n            // 4100\n            case UnauthorizedProviderError.code:\n              throw new UnauthorizedProviderError(err)\n            // 4200\n            case UnsupportedProviderMethodError.code:\n              throw new UnsupportedProviderMethodError(err)\n            // 4900\n            case ProviderDisconnectedError.code:\n              throw new ProviderDisconnectedError(err)\n            // 4901\n            case ChainDisconnectedError.code:\n              throw new ChainDisconnectedError(err)\n            // 4902\n            case SwitchChainError.code:\n              throw new SwitchChainError(err)\n            // CAIP-25: User Rejected Error\n            // https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes#rejected-caip-25\n            case 5000:\n              throw new UserRejectedRequestError(err)\n            default:\n              if (err_ instanceof BaseError) throw err_\n              throw new UnknownRpcError(err as Error)\n          }\n        }\n      },\n      {\n        delay: ({ count, error }) => {\n          // If we find a Retry-After header, let's retry after the given time.\n          if (error && error instanceof HttpRequestError) {\n            const retryAfter = error?.headers?.get('Retry-After')\n            if (retryAfter?.match(/\\d/)) return parseInt(retryAfter) * 1000\n          }\n\n          // Otherwise, let's retry with an exponential backoff.\n          return ~~(1 << count) * retryDelay\n        },\n        retryCount,\n        shouldRetry: ({ error }) => !isDeterministicError(error),\n      },\n    )) as TRequest\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { type CallParameters, call } from '../actions/public/call.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport { type BaseError } from '../errors/base.js'\nimport {\n  OffchainLookupError,\n  OffchainLookupResponseMalformedError,\n  OffchainLookupSenderMismatchError,\n} from '../errors/ccip.js'\nimport { HttpRequestError } from '../errors/request.js'\nimport type { Chain } from '../types/chain.js'\nimport type { GetErrorArgs } from '../types/contract.js'\nimport type { Hex } from '../types/misc.js'\n\nimport type { Client } from '../clients/createClient.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport { decodeErrorResult } from './abi/decodeErrorResult.js'\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js'\nimport { isAddressEqual } from './address/isAddressEqual.js'\nimport { concat } from './data/concat.js'\nimport { isHex } from './data/isHex.js'\nimport { stringify } from './stringify.js'\n\nexport const offchainLookupSignature = '0x556f1830'\nexport const offchainLookupAbiItem = {\n  name: 'OffchainLookup',\n  type: 'error',\n  inputs: [\n    {\n      name: 'sender',\n      type: 'address',\n    },\n    {\n      name: 'urls',\n      type: 'string[]',\n    },\n    {\n      name: 'callData',\n      type: 'bytes',\n    },\n    {\n      name: 'callbackFunction',\n      type: 'bytes4',\n    },\n    {\n      name: 'extraData',\n      type: 'bytes',\n    },\n  ],\n} as const satisfies Abi[number]\n\nexport type OffchainLookupErrorType = ErrorType\n\nexport async function offchainLookup<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    data,\n    to,\n  }: Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n    data: Hex\n    to: Address\n  },\n): Promise<Hex> {\n  const { args } = decodeErrorResult({\n    data,\n    abi: [offchainLookupAbiItem],\n  }) as unknown as GetErrorArgs<\n    [typeof offchainLookupAbiItem],\n    'OffchainLookup'\n  >\n  const [sender, urls, callData, callbackSelector, extraData] = args\n\n  try {\n    if (!isAddressEqual(to, sender))\n      throw new OffchainLookupSenderMismatchError({ sender, to })\n\n    const result = await ccipFetch({ data: callData, sender, urls })\n\n    const { data: data_ } = await call(client, {\n      blockNumber,\n      blockTag,\n      data: concat([\n        callbackSelector,\n        encodeAbiParameters(\n          [{ type: 'bytes' }, { type: 'bytes' }],\n          [result, extraData],\n        ),\n      ]),\n      to,\n    } as CallParameters)\n\n    return data_!\n  } catch (err) {\n    throw new OffchainLookupError({\n      callbackSelector,\n      cause: err as BaseError,\n      data,\n      extraData,\n      sender,\n      urls,\n    })\n  }\n}\n\nexport type CcipFetchErrorType = ErrorType\n\nexport async function ccipFetch({\n  data,\n  sender,\n  urls,\n}: { data: Hex; sender: Address; urls: readonly string[] }) {\n  let error = new Error('An unknown error occurred.')\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const method = url.includes('{data}') ? 'GET' : 'POST'\n    const body = method === 'POST' ? { data, sender } : undefined\n\n    try {\n      const response = await fetch(\n        url.replace('{sender}', sender).replace('{data}', data),\n        {\n          body: JSON.stringify(body),\n          method,\n        },\n      )\n\n      let result\n      if (\n        response.headers.get('Content-Type')?.startsWith('application/json')\n      ) {\n        result = (await response.json()).data\n      } else {\n        result = (await response.text()) as any\n      }\n\n      if (!response.ok) {\n        error = new HttpRequestError({\n          body,\n          details: result?.error\n            ? stringify(result.error)\n            : response.statusText,\n          headers: response.headers,\n          status: response.status,\n          url,\n        })\n        continue\n      }\n\n      if (!isHex(result)) {\n        error = new OffchainLookupResponseMalformedError({\n          result,\n          url,\n        })\n        continue\n      }\n\n      return result\n    } catch (err) {\n      error = new HttpRequestError({\n        body,\n        details: (err as Error).message,\n        url,\n      })\n    }\n  }\n\n  throw error\n}\n","import {\n  ChainMismatchError,\n  type ChainMismatchErrorType,\n  ChainNotFoundError,\n  type ChainNotFoundErrorType,\n} from '../../errors/chain.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nexport type AssertCurrentChainParameters = {\n  chain?: Chain\n  currentChainId: number\n}\n\nexport type AssertCurrentChainErrorType =\n  | ChainNotFoundErrorType\n  | ChainMismatchErrorType\n  | ErrorType\n\nexport function assertCurrentChain({\n  chain,\n  currentChainId,\n}: AssertCurrentChainParameters): void {\n  if (!chain) throw new ChainNotFoundError()\n  if (currentChainId !== chain.id)\n    throw new ChainMismatchError({ chain, currentChainId })\n}\n","import type { Chain, ChainConfig, ChainFormatters } from '../../types/chain.js'\nimport type { Assign } from '../../types/utils.js'\n\nexport function defineChain<\n  const chain extends Chain,\n  formatters extends ChainFormatters | undefined = undefined,\n>(\n  chain: chain,\n  config: ChainConfig<formatters> = {},\n): Assign<chain, ChainConfig<formatters>> {\n  const {\n    fees = chain.fees,\n    formatters = chain.formatters,\n    serializers = chain.serializers,\n  } = config\n  return {\n    ...chain,\n    fees,\n    formatters,\n    serializers,\n  } as unknown as Assign<chain, ChainConfig<formatters>>\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Chain, ExtractChain } from '../../types/chain.js'\n\nexport type ExtractChainParameters<\n  chains extends readonly Chain[],\n  chainId extends chains[number]['id'],\n> = {\n  chains: chains\n  id: chainId | chains[number]['id']\n}\n\nexport type ExtractChainReturnType<\n  chains extends readonly Chain[],\n  chainId extends chains[number]['id'],\n> = ExtractChain<chains, chainId>\n\nexport type ExtractChainErrorType = ErrorType\n\nexport function extractChain<\n  const chains extends readonly Chain[],\n  chainId extends chains[number]['id'],\n>({\n  chains,\n  id,\n}: ExtractChainParameters<chains, chainId>): ExtractChainReturnType<\n  chains,\n  chainId\n> {\n  return chains.find((chain) => chain.id === id) as ExtractChainReturnType<\n    chains,\n    chainId\n  >\n}\n","import {\n  ChainDoesNotSupportContract,\n  type ChainDoesNotSupportContractErrorType,\n} from '../../errors/chain.js'\nimport type { Chain, ChainContract } from '../../types/chain.js'\n\nexport type GetChainContractAddressErrorType =\n  ChainDoesNotSupportContractErrorType\n\nexport function getChainContractAddress({\n  blockNumber,\n  chain,\n  contract: name,\n}: {\n  blockNumber?: bigint\n  chain: Chain\n  contract: string\n}) {\n  const contract = (chain?.contracts as Record<string, ChainContract>)?.[name]\n  if (!contract)\n    throw new ChainDoesNotSupportContract({\n      chain,\n      contract: { name },\n    })\n\n  if (\n    blockNumber &&\n    contract.blockCreated &&\n    contract.blockCreated > blockNumber\n  )\n    throw new ChainDoesNotSupportContract({\n      blockNumber,\n      chain,\n      contract: {\n        name,\n        blockCreated: contract.blockCreated,\n      },\n    })\n\n  return contract.address\n}\n","import type { ErrorType } from '../../errors/utils.js'\n\nconst paramsRegex = /((function|event)\\s)?(.*)(\\((.*)\\))/\n\nexport type ExtractFunctionPartsErrorType = ErrorType\n\n/** @deprecated – use `parseAbiItem` from `abitype`. */\nexport function extractFunctionParts(def: string) {\n  const parts = def.match(paramsRegex)\n  const type = parts?.[2] || undefined\n  const name = parts?.[3]\n  const params = parts?.[5] || undefined\n  return { type, name, params }\n}\n\nexport type ExtractFunctionNameErrorType = ErrorType\n\n/** @deprecated – use `parseAbiItem` from `abitype`. */\nexport function extractFunctionName(def: string) {\n  return extractFunctionParts(def).name\n}\n\nexport type ExtractFunctionParamsErrorType = ErrorType\n\n/** @deprecated – use `parseAbiItem` from `abitype`. */\nexport function extractFunctionParams(def: string) {\n  const params = extractFunctionParts(def).params\n  const splitParams = params?.split(',').map((x) => x.trim().split(' '))\n  return splitParams?.map((param) => ({\n    type: param[0],\n    name: param[1] === 'indexed' ? param[2] : param[1],\n    ...(param[1] === 'indexed' ? { indexed: true } : {}),\n  }))\n}\n\nexport type ExtractFunctionTypeErrorType = ErrorType\n\n/** @deprecated – use `parseAbiItem` from `abitype`. */\nexport function extractFunctionType(def: string) {\n  return extractFunctionParts(def).type\n}\n","import {\n  NegativeOffsetError,\n  PositionOutOfBoundsError,\n} from '../errors/cursor.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ByteArray } from '../types/misc.js'\n\nexport type Cursor = {\n  bytes: ByteArray\n  dataView: DataView\n  position: number\n  assertPosition(position: number): void\n  decrementPosition(offset: number): void\n  incrementPosition(offset: number): void\n  inspectByte(position?: number): ByteArray[number]\n  inspectBytes(length: number, position?: number): ByteArray\n  inspectUint8(position?: number): number\n  inspectUint16(position?: number): number\n  inspectUint24(position?: number): number\n  inspectUint32(position?: number): number\n  pushByte(byte: ByteArray[number]): void\n  pushBytes(bytes: ByteArray): void\n  pushUint8(value: number): void\n  pushUint16(value: number): void\n  pushUint24(value: number): void\n  pushUint32(value: number): void\n  readByte(): ByteArray[number]\n  readBytes(length: number): ByteArray\n  readUint8(): number\n  readUint16(): number\n  readUint24(): number\n  readUint32(): number\n  setPosition(position: number): void\n}\n\nexport type CreateCursorErrorType = ErrorType\n\nexport type CursorErrorType =\n  | CursorAssertPositionErrorType\n  | CursorDecrementPositionErrorType\n  | CursorIncrementPositionErrorType\n  | ErrorType\n\nexport type CursorAssertPositionErrorType = PositionOutOfBoundsError | ErrorType\n\nexport type CursorDecrementPositionErrorType = NegativeOffsetError | ErrorType\n\nexport type CursorIncrementPositionErrorType = NegativeOffsetError | ErrorType\n\nconst staticCursor: Cursor = {\n  bytes: new Uint8Array(),\n  dataView: new DataView(new ArrayBuffer(0)),\n  position: 0,\n  assertPosition(position) {\n    if (position < 0 || position > this.bytes.length - 1)\n      throw new PositionOutOfBoundsError({\n        length: this.bytes.length,\n        position,\n      })\n  },\n  decrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({ offset })\n    const position = this.position - offset\n    this.assertPosition(position)\n    this.position = position\n  },\n  incrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({ offset })\n    const position = this.position + offset\n    this.assertPosition(position)\n    this.position = position\n  },\n  inspectByte(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position)\n    return this.bytes[position]\n  },\n  inspectBytes(length, position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + length - 1)\n    return this.bytes.subarray(position, position + length)\n  },\n  inspectUint8(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position)\n    return this.bytes[position]\n  },\n  inspectUint16(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 1)\n    return this.dataView.getUint16(position)\n  },\n  inspectUint24(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 2)\n    return (\n      (this.dataView.getUint16(position) << 8) +\n      this.dataView.getUint8(position + 2)\n    )\n  },\n  inspectUint32(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 3)\n    return this.dataView.getUint32(position)\n  },\n  pushByte(byte: ByteArray[number]) {\n    this.assertPosition(this.position)\n    this.bytes[this.position] = byte\n    this.position++\n  },\n  pushBytes(bytes: ByteArray) {\n    this.assertPosition(this.position + bytes.length - 1)\n    this.bytes.set(bytes, this.position)\n    this.position += bytes.length\n  },\n  pushUint8(value: number) {\n    this.assertPosition(this.position)\n    this.bytes[this.position] = value\n    this.position++\n  },\n  pushUint16(value: number) {\n    this.assertPosition(this.position + 1)\n    this.dataView.setUint16(this.position, value)\n    this.position += 2\n  },\n  pushUint24(value: number) {\n    this.assertPosition(this.position + 2)\n    this.dataView.setUint16(this.position, value >> 8)\n    this.dataView.setUint8(this.position + 2, value & ~4294967040)\n    this.position += 3\n  },\n  pushUint32(value: number) {\n    this.assertPosition(this.position + 3)\n    this.dataView.setUint32(this.position, value)\n    this.position += 4\n  },\n  readByte() {\n    const value = this.inspectByte()\n    this.position++\n    return value\n  },\n  readBytes(length) {\n    const value = this.inspectBytes(length)\n    this.position += length\n    return value\n  },\n  readUint8() {\n    const value = this.inspectUint8()\n    this.position += 1\n    return value\n  },\n  readUint16() {\n    const value = this.inspectUint16()\n    this.position += 2\n    return value\n  },\n  readUint24() {\n    const value = this.inspectUint24()\n    this.position += 3\n    return value\n  },\n  readUint32() {\n    const value = this.inspectUint32()\n    this.position += 4\n    return value\n  },\n  setPosition(position) {\n    this.assertPosition(position)\n    this.position = position\n  },\n}\n\nexport function createCursor(bytes: ByteArray): Cursor {\n  const cursor = Object.create(staticCursor)\n  cursor.bytes = bytes\n  cursor.dataView = new DataView(\n    bytes.buffer,\n    bytes.byteOffset,\n    bytes.byteLength,\n  )\n  return cursor\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nexport type ConcatReturnType<TValue extends Hex | ByteArray> =\n  TValue extends Hex ? Hex : ByteArray\n\nexport type ConcatErrorType =\n  | ConcatBytesErrorType\n  | ConcatHexErrorType\n  | ErrorType\n\nexport function concat<TValue extends Hex | ByteArray>(\n  values: readonly TValue[],\n): ConcatReturnType<TValue> {\n  if (typeof values[0] === 'string')\n    return concatHex(values as readonly Hex[]) as ConcatReturnType<TValue>\n  return concatBytes(values as readonly ByteArray[]) as ConcatReturnType<TValue>\n}\n\nexport type ConcatBytesErrorType = ErrorType\n\nexport function concatBytes(values: readonly ByteArray[]): ByteArray {\n  let length = 0\n  for (const arr of values) {\n    length += arr.length\n  }\n  const result = new Uint8Array(length)\n  let offset = 0\n  for (const arr of values) {\n    result.set(arr, offset)\n    offset += arr.length\n  }\n  return result\n}\n\nexport type ConcatHexErrorType = ErrorType\n\nexport function concatHex(values: readonly Hex[]): Hex {\n  return `0x${(values as Hex[]).reduce(\n    (acc, x) => acc + x.replace('0x', ''),\n    '',\n  )}`\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray } from '../../types/misc.js'\n\nexport type IsBytesErrorType = ErrorType\n\nexport function isBytes(value: unknown): value is ByteArray {\n  if (!value) return false\n  if (typeof value !== 'object') return false\n  if (!('BYTES_PER_ELEMENT' in value)) return false\n  return (\n    value.BYTES_PER_ELEMENT === 1 && value.constructor.name === 'Uint8Array'\n  )\n}\n","import { equalBytes } from '@noble/curves/abstract/utils'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type IsHexErrorType, isHex } from './isHex.js'\n\nexport type IsBytesEqualErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function isBytesEqual(a_: ByteArray | Hex, b_: ByteArray | Hex) {\n  const a = isHex(a_) ? toBytes(a_) : a_\n  const b = isHex(b_) ? toBytes(b_) : b_\n  return equalBytes(a, b)\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\n\nexport type IsHexErrorType = ErrorType\n\nexport function isHex(\n  value: unknown,\n  { strict = true }: { strict?: boolean } = {},\n): value is Hex {\n  if (!value) return false\n  if (typeof value !== 'string') return false\n  return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith('0x')\n}\n","import {\n  SizeExceedsPaddingSizeError,\n  type SizeExceedsPaddingSizeErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\ntype PadOptions = {\n  dir?: 'left' | 'right'\n  size?: number | null\n}\nexport type PadReturnType<TValue extends ByteArray | Hex> = TValue extends Hex\n  ? Hex\n  : ByteArray\n\nexport type PadErrorType = PadHexErrorType | PadBytesErrorType | ErrorType\n\nexport function pad<TValue extends ByteArray | Hex>(\n  hexOrBytes: TValue,\n  { dir, size = 32 }: PadOptions = {},\n): PadReturnType<TValue> {\n  if (typeof hexOrBytes === 'string')\n    return padHex(hexOrBytes, { dir, size }) as PadReturnType<TValue>\n  return padBytes(hexOrBytes, { dir, size }) as PadReturnType<TValue>\n}\n\nexport type PadHexErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padHex(hex_: Hex, { dir, size = 32 }: PadOptions = {}) {\n  if (size === null) return hex_\n  const hex = hex_.replace('0x', '')\n  if (hex.length > size * 2)\n    throw new SizeExceedsPaddingSizeError({\n      size: Math.ceil(hex.length / 2),\n      targetSize: size,\n      type: 'hex',\n    })\n\n  return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](\n    size * 2,\n    '0',\n  )}` as Hex\n}\n\nexport type PadBytesErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padBytes(\n  bytes: ByteArray,\n  { dir, size = 32 }: PadOptions = {},\n) {\n  if (size === null) return bytes\n  if (bytes.length > size)\n    throw new SizeExceedsPaddingSizeError({\n      size: bytes.length,\n      targetSize: size,\n      type: 'bytes',\n    })\n  const paddedBytes = new Uint8Array(size)\n  for (let i = 0; i < size; i++) {\n    const padEnd = dir === 'right'\n    paddedBytes[padEnd ? i : size - i - 1] =\n      bytes[padEnd ? i : bytes.length - i - 1]\n  }\n  return paddedBytes\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\n\nexport type SizeErrorType = IsHexErrorType | ErrorType\n\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */\nexport function size(value: Hex | ByteArray) {\n  if (isHex(value, { strict: false })) return Math.ceil((value.length - 2) / 2)\n  return value.length\n}\n","import {\n  SliceOffsetOutOfBoundsError,\n  type SliceOffsetOutOfBoundsErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\nimport { type SizeErrorType, size } from './size.js'\n\nexport type SliceReturnType<TValue extends ByteArray | Hex> = TValue extends Hex\n  ? Hex\n  : ByteArray\n\nexport type SliceErrorType =\n  | IsHexErrorType\n  | SliceBytesErrorType\n  | SliceHexErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex or byte array given a start/end bytes offset.\n *\n * @param value The hex or byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function slice<TValue extends ByteArray | Hex>(\n  value: TValue,\n  start?: number,\n  end?: number,\n  { strict }: { strict?: boolean } = {},\n): SliceReturnType<TValue> {\n  if (isHex(value, { strict: false }))\n    return sliceHex(value as Hex, start, end, {\n      strict,\n    }) as SliceReturnType<TValue>\n  return sliceBytes(value as ByteArray, start, end, {\n    strict,\n  }) as SliceReturnType<TValue>\n}\n\nexport type AssertStartOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertStartOffset(value: Hex | ByteArray, start?: number) {\n  if (typeof start === 'number' && start > 0 && start > size(value) - 1)\n    throw new SliceOffsetOutOfBoundsError({\n      offset: start,\n      position: 'start',\n      size: size(value),\n    })\n}\n\nexport type AssertEndOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertEndOffset(value: Hex | ByteArray, start?: number, end?: number) {\n  if (\n    typeof start === 'number' &&\n    typeof end === 'number' &&\n    size(value) !== end - start\n  ) {\n    throw new SliceOffsetOutOfBoundsError({\n      offset: end,\n      position: 'end',\n      size: size(value),\n    })\n  }\n}\n\nexport type SliceBytesErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the byte array given a start/end bytes offset.\n *\n * @param value The byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceBytes(\n  value_: ByteArray,\n  start?: number,\n  end?: number,\n  { strict }: { strict?: boolean } = {},\n): ByteArray {\n  assertStartOffset(value_, start)\n  const value = value_.slice(start, end)\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n\nexport type SliceHexErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex value given a start/end bytes offset.\n *\n * @param value The hex value to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceHex(\n  value_: Hex,\n  start?: number,\n  end?: number,\n  { strict }: { strict?: boolean } = {},\n): Hex {\n  assertStartOffset(value_, start)\n  const value = `0x${value_\n    .replace('0x', '')\n    .slice((start ?? 0) * 2, (end ?? value_.length) * 2)}` as const\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\ntype TrimOptions = {\n  dir?: 'left' | 'right'\n}\nexport type TrimReturnType<TValue extends ByteArray | Hex> = TValue extends Hex\n  ? Hex\n  : ByteArray\n\nexport type TrimErrorType = ErrorType\n\nexport function trim<TValue extends ByteArray | Hex>(\n  hexOrBytes: TValue,\n  { dir = 'left' }: TrimOptions = {},\n): TrimReturnType<TValue> {\n  let data: any =\n    typeof hexOrBytes === 'string' ? hexOrBytes.replace('0x', '') : hexOrBytes\n\n  let sliceLength = 0\n  for (let i = 0; i < data.length - 1; i++) {\n    if (data[dir === 'left' ? i : data.length - i - 1].toString() === '0')\n      sliceLength++\n    else break\n  }\n  data =\n    dir === 'left'\n      ? data.slice(sliceLength)\n      : data.slice(0, data.length - sliceLength)\n\n  if (typeof hexOrBytes === 'string') {\n    if (data.length === 1 && dir === 'right') data = `${data}0`\n    return `0x${\n      data.length % 2 === 1 ? `0${data}` : data\n    }` as TrimReturnType<TValue>\n  }\n  return data as TrimReturnType<TValue>\n}\n","import { InvalidBytesBooleanError } from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type TrimErrorType, trim } from '../data/trim.js'\n\nimport {\n  type AssertSizeErrorType,\n  type HexToBigIntErrorType,\n  type HexToNumberErrorType,\n  assertSize,\n  hexToBigInt,\n  hexToNumber,\n} from './fromHex.js'\nimport { type BytesToHexErrorType, bytesToHex } from './toHex.js'\n\nexport type FromBytesParameters<\n  TTo extends 'string' | 'hex' | 'bigint' | 'number' | 'boolean',\n> =\n  | TTo\n  | {\n      /** Size of the bytes. */\n      size?: number\n      /** Type to convert to. */\n      to: TTo\n    }\n\nexport type FromBytesReturnType<TTo> = TTo extends 'string'\n  ? string\n  : TTo extends 'hex'\n    ? Hex\n    : TTo extends 'bigint'\n      ? bigint\n      : TTo extends 'number'\n        ? number\n        : TTo extends 'boolean'\n          ? boolean\n          : never\n\nexport type FromBytesErrorType =\n  | BytesToHexErrorType\n  | BytesToBigIntErrorType\n  | BytesToBoolErrorType\n  | BytesToNumberErrorType\n  | BytesToStringErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a UTF-8 string, hex value, number, bigint or boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes.html\n * - Example: https://viem.sh/docs/utilities/fromBytes.html#usage\n *\n * @param bytes Byte array to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromBytes } from 'viem'\n * const data = fromBytes(new Uint8Array([1, 164]), 'number')\n * // 420\n *\n * @example\n * import { fromBytes } from 'viem'\n * const data = fromBytes(\n *   new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]),\n *   'string'\n * )\n * // 'Hello world'\n */\nexport function fromBytes<\n  TTo extends 'string' | 'hex' | 'bigint' | 'number' | 'boolean',\n>(\n  bytes: ByteArray,\n  toOrOpts: FromBytesParameters<TTo>,\n): FromBytesReturnType<TTo> {\n  const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts\n  const to = opts.to\n\n  if (to === 'number')\n    return bytesToNumber(bytes, opts) as FromBytesReturnType<TTo>\n  if (to === 'bigint')\n    return bytesToBigInt(bytes, opts) as FromBytesReturnType<TTo>\n  if (to === 'boolean')\n    return bytesToBool(bytes, opts) as FromBytesReturnType<TTo>\n  if (to === 'string')\n    return bytesToString(bytes, opts) as FromBytesReturnType<TTo>\n  return bytesToHex(bytes, opts) as FromBytesReturnType<TTo>\n}\n\nexport type BytesToBigIntOpts = {\n  /** Whether or not the number of a signed representation. */\n  signed?: boolean\n  /** Size of the bytes. */\n  size?: number\n}\n\nexport type BytesToBigIntErrorType =\n  | BytesToHexErrorType\n  | HexToBigIntErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes.html#bytestobigint\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { bytesToBigInt } from 'viem'\n * const data = bytesToBigInt(new Uint8Array([1, 164]))\n * // 420n\n */\nexport function bytesToBigInt(\n  bytes: ByteArray,\n  opts: BytesToBigIntOpts = {},\n): bigint {\n  if (typeof opts.size !== 'undefined') assertSize(bytes, { size: opts.size })\n  const hex = bytesToHex(bytes, opts)\n  return hexToBigInt(hex)\n}\n\nexport type BytesToBoolOpts = {\n  /** Size of the bytes. */\n  size?: number\n}\n\nexport type BytesToBoolErrorType =\n  | AssertSizeErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes.html#bytestobool\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { bytesToBool } from 'viem'\n * const data = bytesToBool(new Uint8Array([1]))\n * // true\n */\nexport function bytesToBool(\n  bytes_: ByteArray,\n  opts: BytesToBoolOpts = {},\n): boolean {\n  let bytes = bytes_\n  if (typeof opts.size !== 'undefined') {\n    assertSize(bytes, { size: opts.size })\n    bytes = trim(bytes)\n  }\n  if (bytes.length > 1 || bytes[0] > 1)\n    throw new InvalidBytesBooleanError(bytes)\n  return Boolean(bytes[0])\n}\n\nexport type BytesToNumberOpts = BytesToBigIntOpts\n\nexport type BytesToNumberErrorType =\n  | BytesToHexErrorType\n  | HexToNumberErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes.html#bytestonumber\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { bytesToNumber } from 'viem'\n * const data = bytesToNumber(new Uint8Array([1, 164]))\n * // 420\n */\nexport function bytesToNumber(\n  bytes: ByteArray,\n  opts: BytesToNumberOpts = {},\n): number {\n  if (typeof opts.size !== 'undefined') assertSize(bytes, { size: opts.size })\n  const hex = bytesToHex(bytes, opts)\n  return hexToNumber(hex)\n}\n\nexport type BytesToStringOpts = {\n  /** Size of the bytes. */\n  size?: number\n}\n\nexport type BytesToStringErrorType =\n  | AssertSizeErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes.html#bytestostring\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { bytesToString } from 'viem'\n * const data = bytesToString(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // 'Hello world'\n */\nexport function bytesToString(\n  bytes_: ByteArray,\n  opts: BytesToStringOpts = {},\n): string {\n  let bytes = bytes_\n  if (typeof opts.size !== 'undefined') {\n    assertSize(bytes, { size: opts.size })\n    bytes = trim(bytes, { dir: 'right' })\n  }\n  return new TextDecoder().decode(bytes)\n}\n","import {\n  InvalidHexBooleanError,\n  type InvalidHexBooleanErrorType,\n  SizeOverflowError,\n  type SizeOverflowErrorType,\n} from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type SizeErrorType, size as size_ } from '../data/size.js'\nimport { type TrimErrorType, trim } from '../data/trim.js'\n\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\n\nexport type AssertSizeErrorType =\n  | SizeOverflowErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function assertSize(\n  hexOrBytes: Hex | ByteArray,\n  { size }: { size: number },\n): void {\n  if (size_(hexOrBytes) > size)\n    throw new SizeOverflowError({\n      givenSize: size_(hexOrBytes),\n      maxSize: size,\n    })\n}\n\nexport type FromHexParameters<\n  TTo extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\n> =\n  | TTo\n  | {\n      /** Size (in bytes) of the hex value. */\n      size?: number\n      /** Type to convert to. */\n      to: TTo\n    }\n\nexport type FromHexReturnType<TTo> = TTo extends 'string'\n  ? string\n  : TTo extends 'bigint'\n    ? bigint\n    : TTo extends 'number'\n      ? number\n      : TTo extends 'bytes'\n        ? ByteArray\n        : TTo extends 'boolean'\n          ? boolean\n          : never\n\nexport type FromHexErrorType =\n  | HexToNumberErrorType\n  | HexToBigIntErrorType\n  | HexToBoolErrorType\n  | HexToStringErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex.html\n * - Example: https://viem.sh/docs/utilities/fromHex.html#usage\n *\n * @param hex Hex string to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x1a4', 'number')\n * // 420\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\n * // 'Hello world'\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *   size: 32,\n *   to: 'string'\n * })\n * // 'Hello world'\n */\nexport function fromHex<\n  TTo extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\n>(hex: Hex, toOrOpts: FromHexParameters<TTo>): FromHexReturnType<TTo> {\n  const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts\n  const to = opts.to\n\n  if (to === 'number') return hexToNumber(hex, opts) as FromHexReturnType<TTo>\n  if (to === 'bigint') return hexToBigInt(hex, opts) as FromHexReturnType<TTo>\n  if (to === 'string') return hexToString(hex, opts) as FromHexReturnType<TTo>\n  if (to === 'boolean') return hexToBool(hex, opts) as FromHexReturnType<TTo>\n  return hexToBytes(hex, opts) as FromHexReturnType<TTo>\n}\n\nexport type HexToBigIntOpts = {\n  /** Whether or not the number of a signed representation. */\n  signed?: boolean\n  /** Size (in bytes) of the hex value. */\n  size?: number\n}\n\nexport type HexToBigIntErrorType = AssertSizeErrorType | ErrorType\n\n/**\n * Decodes a hex value into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex.html#hextobigint\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x1a4', { signed: true })\n * // 420n\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420n\n */\nexport function hexToBigInt(hex: Hex, opts: HexToBigIntOpts = {}): bigint {\n  const { signed } = opts\n\n  if (opts.size) assertSize(hex, { size: opts.size })\n\n  const value = BigInt(hex)\n  if (!signed) return value\n\n  const size = (hex.length - 2) / 2\n  const max = (1n << (BigInt(size) * 8n - 1n)) - 1n\n  if (value <= max) return value\n\n  return value - BigInt(`0x${'f'.padStart(size * 2, 'f')}`) - 1n\n}\n\nexport type HexToBoolOpts = {\n  /** Size (in bytes) of the hex value. */\n  size?: number\n}\n\nexport type HexToBoolErrorType =\n  | AssertSizeErrorType\n  | InvalidHexBooleanErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a hex value into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex.html#hextobool\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x01')\n * // true\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // true\n */\nexport function hexToBool(hex_: Hex, opts: HexToBoolOpts = {}): boolean {\n  let hex = hex_\n  if (opts.size) {\n    assertSize(hex, { size: opts.size })\n    hex = trim(hex)\n  }\n  if (trim(hex) === '0x00') return false\n  if (trim(hex) === '0x01') return true\n  throw new InvalidHexBooleanError(hex)\n}\n\nexport type HexToNumberOpts = HexToBigIntOpts\n\nexport type HexToNumberErrorType = HexToBigIntErrorType | ErrorType\n\n/**\n * Decodes a hex string into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex.html#hextonumber\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToNumber('0x1a4')\n * // 420\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420\n */\nexport function hexToNumber(hex: Hex, opts: HexToNumberOpts = {}): number {\n  return Number(hexToBigInt(hex, opts))\n}\n\nexport type HexToStringOpts = {\n  /** Size (in bytes) of the hex value. */\n  size?: number\n}\n\nexport type HexToStringErrorType =\n  | AssertSizeErrorType\n  | HexToBytesErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a hex value into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex.html#hextostring\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c6421')\n * // 'Hello world!'\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // 'Hello world'\n */\nexport function hexToString(hex: Hex, opts: HexToStringOpts = {}): string {\n  let bytes = hexToBytes(hex)\n  if (opts.size) {\n    assertSize(bytes, { size: opts.size })\n    bytes = trim(bytes, { dir: 'right' })\n  }\n  return new TextDecoder().decode(bytes)\n}\n","import { BaseError, type BaseErrorType } from '../../errors/base.js'\nimport {\n  InvalidHexValueError,\n  type InvalidHexValueErrorType,\n} from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport {\n  type CreateCursorErrorType,\n  type Cursor,\n  createCursor,\n} from '../cursor.js'\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from './toHex.js'\n\nimport type { RecursiveArray } from './toRlp.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type FromRlpReturnType<to extends To> =\n  | (to extends 'bytes' ? RecursiveArray<ByteArray> : never)\n  | (to extends 'hex' ? RecursiveArray<Hex> : never)\n\nexport type FromRlpErrorType =\n  | CreateCursorErrorType\n  | FromRlpCursorErrorType\n  | HexToBytesErrorType\n  | InvalidHexValueErrorType\n  | ErrorType\n\nexport function fromRlp<to extends To = 'hex'>(\n  value: ByteArray | Hex,\n  to: to | To | undefined = 'hex',\n): FromRlpReturnType<to> {\n  const bytes = (() => {\n    if (typeof value === 'string') {\n      if (value.length > 3 && value.length % 2 !== 0)\n        throw new InvalidHexValueError(value)\n      return hexToBytes(value)\n    }\n    return value\n  })()\n\n  const cursor = createCursor(bytes)\n  const result = fromRlpCursor(cursor, to)\n\n  return result as FromRlpReturnType<to>\n}\n\nexport type RlpToBytesErrorType = FromRlpErrorType | ErrorType\n\nexport function rlpToBytes<to extends To = 'bytes'>(\n  bytes: ByteArray,\n  to: to | To | undefined = 'bytes',\n): FromRlpReturnType<to> {\n  return fromRlp(bytes, to)\n}\n\nexport type RlpToHexErrorType = FromRlpErrorType | ErrorType\n\nexport function rlpToHex<to extends To = 'hex'>(\n  hex: Hex,\n  to: to | To | undefined = 'hex',\n): FromRlpReturnType<to> {\n  return fromRlp(hex, to)\n}\n\nexport type FromRlpCursorErrorType =\n  | BytesToHexErrorType\n  | ReadLengthErrorType\n  | ReadListErrorType\n  | ErrorType\n\nfunction fromRlpCursor<to extends To = 'hex'>(\n  cursor: Cursor,\n  to: to | To | undefined = 'hex',\n): FromRlpReturnType<to> {\n  if (cursor.bytes.length === 0)\n    return (\n      to === 'hex' ? bytesToHex(cursor.bytes) : cursor.bytes\n    ) as FromRlpReturnType<to>\n\n  const prefix = cursor.readByte()\n  if (prefix < 0x80) cursor.decrementPosition(1)\n\n  // bytes\n  if (prefix < 0xc0) {\n    const length = readLength(cursor, prefix, 0x80)\n    const bytes = cursor.readBytes(length)\n    return (to === 'hex' ? bytesToHex(bytes) : bytes) as FromRlpReturnType<to>\n  }\n\n  // list\n  const length = readLength(cursor, prefix, 0xc0)\n  return readList(cursor, length, to) as {} as FromRlpReturnType<to>\n}\n\nexport type ReadLengthErrorType = BaseErrorType | ErrorType\n\nfunction readLength(cursor: Cursor, prefix: number, offset: number) {\n  if (offset === 0x80 && prefix < 0x80) return 1\n  if (prefix <= offset + 55) return prefix - offset\n  if (prefix === offset + 55 + 1) return cursor.readUint8()\n  if (prefix === offset + 55 + 2) return cursor.readUint16()\n  if (prefix === offset + 55 + 3) return cursor.readUint24()\n  if (prefix === offset + 55 + 4) return cursor.readUint32()\n  throw new BaseError('Invalid RLP prefix')\n}\n\nexport type ReadListErrorType = ErrorType\n\nfunction readList<to extends To>(cursor: Cursor, length: number, to: to | To) {\n  const position = cursor.position\n  const value: FromRlpReturnType<to>[] = []\n  while (cursor.position - position < length)\n    value.push(fromRlpCursor(cursor, to))\n  return value\n}\n","import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\n\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  type NumberToHexOpts,\n  numberToHex,\n} from './toHex.js'\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\n\nexport type ToBytesParameters = {\n  /** Size of the output bytes. */\n  size?: number\n}\n\nexport type ToBytesErrorType =\n  | NumberToBytesErrorType\n  | BoolToBytesErrorType\n  | HexToBytesErrorType\n  | StringToBytesErrorType\n  | IsHexErrorType\n  | ErrorType\n\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html\n * - Example: https://viem.sh/docs/utilities/toBytes.html#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function toBytes(\n  value: string | bigint | number | boolean | Hex,\n  opts: ToBytesParameters = {},\n): ByteArray {\n  if (typeof value === 'number' || typeof value === 'bigint')\n    return numberToBytes(value, opts)\n  if (typeof value === 'boolean') return boolToBytes(value, opts)\n  if (isHex(value)) return hexToBytes(value, opts)\n  return stringToBytes(value, opts)\n}\n\nexport type BoolToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number\n}\n\nexport type BoolToBytesErrorType =\n  | AssertSizeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */\nexport function boolToBytes(value: boolean, opts: BoolToBytesOpts = {}) {\n  const bytes = new Uint8Array(1)\n  bytes[0] = Number(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { size: opts.size })\n  }\n  return bytes\n}\n\n// We use very optimized technique to convert hex string to byte array\nconst charCodeMap = {\n  zero: 48,\n  nine: 57,\n  A: 65,\n  F: 70,\n  a: 97,\n  f: 102,\n} as const\n\nfunction charCodeToBase16(char: number) {\n  if (char >= charCodeMap.zero && char <= charCodeMap.nine)\n    return char - charCodeMap.zero\n  if (char >= charCodeMap.A && char <= charCodeMap.F)\n    return char - (charCodeMap.A - 10)\n  if (char >= charCodeMap.a && char <= charCodeMap.f)\n    return char - (charCodeMap.a - 10)\n  return undefined\n}\n\nexport type HexToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number\n}\n\nexport type HexToBytesErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function hexToBytes(hex_: Hex, opts: HexToBytesOpts = {}): ByteArray {\n  let hex = hex_\n  if (opts.size) {\n    assertSize(hex, { size: opts.size })\n    hex = pad(hex, { dir: 'right', size: opts.size })\n  }\n\n  let hexString = hex.slice(2) as string\n  if (hexString.length % 2) hexString = `0${hexString}`\n\n  const length = hexString.length / 2\n  const bytes = new Uint8Array(length)\n  for (let index = 0, j = 0; index < length; index++) {\n    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++))\n    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++))\n    if (nibbleLeft === undefined || nibbleRight === undefined) {\n      throw new BaseError(\n        `Invalid byte sequence (\"${hexString[j - 2]}${\n          hexString[j - 1]\n        }\" in \"${hexString}\").`,\n      )\n    }\n    bytes[index] = nibbleLeft * 16 + nibbleRight\n  }\n  return bytes\n}\n\nexport type NumberToBytesErrorType =\n  | NumberToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function numberToBytes(value: bigint | number, opts?: NumberToHexOpts) {\n  const hex = numberToHex(value, opts)\n  return hexToBytes(hex)\n}\n\nexport type StringToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number\n}\n\nexport type StringToBytesErrorType =\n  | AssertSizeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function stringToBytes(\n  value: string,\n  opts: StringToBytesOpts = {},\n): ByteArray {\n  const bytes = encoder.encode(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { dir: 'right', size: opts.size })\n  }\n  return bytes\n}\n","import {\n  IntegerOutOfRangeError,\n  type IntegerOutOfRangeErrorType,\n} from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\n\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\n\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) =>\n  i.toString(16).padStart(2, '0'),\n)\n\nexport type ToHexParameters = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number\n}\n\nexport type ToHexErrorType =\n  | BoolToHexErrorType\n  | BytesToHexErrorType\n  | NumberToHexErrorType\n  | StringToHexErrorType\n  | ErrorType\n\n/**\n * Encodes a string, number, bigint, or ByteArray into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex.html\n * - Example: https://viem.sh/docs/utilities/toHex.html#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world')\n * // '0x48656c6c6f20776f726c6421'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex(420)\n * // '0x1a4'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world', { size: 32 })\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\n */\nexport function toHex(\n  value: string | number | bigint | boolean | ByteArray,\n  opts: ToHexParameters = {},\n): Hex {\n  if (typeof value === 'number' || typeof value === 'bigint')\n    return numberToHex(value, opts)\n  if (typeof value === 'string') {\n    return stringToHex(value, opts)\n  }\n  if (typeof value === 'boolean') return boolToHex(value, opts)\n  return bytesToHex(value, opts)\n}\n\nexport type BoolToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number\n}\n\nexport type BoolToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a boolean into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex.html#booltohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true)\n * // '0x1'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(false)\n * // '0x0'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true, { size: 32 })\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\n */\nexport function boolToHex(value: boolean, opts: BoolToHexOpts = {}): Hex {\n  const hex: Hex = `0x${Number(value)}`\n  if (typeof opts.size === 'number') {\n    assertSize(hex, { size: opts.size })\n    return pad(hex, { size: opts.size })\n  }\n  return hex\n}\n\nexport type BytesToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number\n}\n\nexport type BytesToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a bytes array into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex.html#bytestohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function bytesToHex(value: ByteArray, opts: BytesToHexOpts = {}): Hex {\n  let string = ''\n  for (let i = 0; i < value.length; i++) {\n    string += hexes[value[i]]\n  }\n  const hex = `0x${string}` as const\n\n  if (typeof opts.size === 'number') {\n    assertSize(hex, { size: opts.size })\n    return pad(hex, { dir: 'right', size: opts.size })\n  }\n  return hex\n}\n\nexport type NumberToHexOpts =\n  | {\n      /** Whether or not the number of a signed representation. */\n      signed?: boolean\n      /** The size (in bytes) of the output hex value. */\n      size: number\n    }\n  | {\n      signed?: never\n      /** The size (in bytes) of the output hex value. */\n      size?: number\n    }\n\nexport type NumberToHexErrorType =\n  | IntegerOutOfRangeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a number or bigint into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex.html#numbertohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420)\n * // '0x1a4'\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420, { size: 32 })\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\n */\nexport function numberToHex(\n  value_: number | bigint,\n  opts: NumberToHexOpts = {},\n): Hex {\n  const { signed, size } = opts\n\n  const value = BigInt(value_)\n\n  let maxValue\n  if (size) {\n    if (signed) maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n\n    else maxValue = 2n ** (BigInt(size) * 8n) - 1n\n  } else if (typeof value_ === 'number') {\n    maxValue = BigInt(Number.MAX_SAFE_INTEGER)\n  }\n\n  const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0\n\n  if ((maxValue && value > maxValue) || value < minValue) {\n    const suffix = typeof value_ === 'bigint' ? 'n' : ''\n    throw new IntegerOutOfRangeError({\n      max: maxValue ? `${maxValue}${suffix}` : undefined,\n      min: `${minValue}${suffix}`,\n      signed,\n      size,\n      value: `${value_}${suffix}`,\n    })\n  }\n\n  const hex = `0x${(signed && value < 0\n    ? (1n << BigInt(size * 8)) + BigInt(value)\n    : value\n  ).toString(16)}` as Hex\n  if (size) return pad(hex, { size }) as Hex\n  return hex\n}\n\nexport type StringToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number\n}\n\nexport type StringToHexErrorType = BytesToHexErrorType | ErrorType\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\n\n/**\n * Encodes a UTF-8 string into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex.html#stringtohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function stringToHex(value_: string, opts: StringToHexOpts = {}): Hex {\n  const value = encoder.encode(value_)\n  return bytesToHex(value, opts)\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport { BaseError } from '../../index.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport {\n  type CreateCursorErrorType,\n  type Cursor,\n  createCursor,\n} from '../cursor.js'\n\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from './toHex.js'\n\nexport type RecursiveArray<T> = T | RecursiveArray<T>[]\n\ntype To = 'hex' | 'bytes'\n\ntype Encodable = {\n  length: number\n  encode(cursor: Cursor): void\n}\n\nexport type ToRlpReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type ToRlpErrorType =\n  | CreateCursorErrorType\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\nexport function toRlp<to extends To = 'hex'>(\n  bytes: RecursiveArray<ByteArray> | RecursiveArray<Hex>,\n  to: to | To | undefined = 'hex',\n): ToRlpReturnType<to> {\n  const encodable = getEncodable(bytes)\n  const cursor = createCursor(new Uint8Array(encodable.length))\n  encodable.encode(cursor)\n\n  if (to === 'hex') return bytesToHex(cursor.bytes) as ToRlpReturnType<to>\n  return cursor.bytes as ToRlpReturnType<to>\n}\n\nexport type BytesToRlpErrorType = ToRlpErrorType | ErrorType\n\nexport function bytesToRlp<to extends To = 'bytes'>(\n  bytes: RecursiveArray<ByteArray>,\n  to: to | To | undefined = 'bytes',\n): ToRlpReturnType<to> {\n  return toRlp(bytes, to)\n}\n\nexport type HexToRlpErrorType = ToRlpErrorType | ErrorType\n\nexport function hexToRlp<to extends To = 'hex'>(\n  hex: RecursiveArray<Hex>,\n  to: to | To | undefined = 'hex',\n): ToRlpReturnType<to> {\n  return toRlp(hex, to)\n}\n\nfunction getEncodable(\n  bytes: RecursiveArray<ByteArray> | RecursiveArray<Hex>,\n): Encodable {\n  if (Array.isArray(bytes))\n    return getEncodableList(bytes.map((x) => getEncodable(x)))\n  return getEncodableBytes(bytes)\n}\n\nfunction getEncodableList(list: Encodable[]): Encodable {\n  const bodyLength = list.reduce((acc, x) => acc + x.length, 0)\n\n  const sizeOfBodyLength = getSizeOfLength(bodyLength)\n  const length = (() => {\n    if (bodyLength <= 55) return 1 + bodyLength\n    return 1 + sizeOfBodyLength + bodyLength\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor) {\n      if (bodyLength <= 55) {\n        cursor.pushByte(0xc0 + bodyLength)\n      } else {\n        cursor.pushByte(0xc0 + 55 + sizeOfBodyLength)\n        if (sizeOfBodyLength === 1) cursor.pushUint8(bodyLength)\n        else if (sizeOfBodyLength === 2) cursor.pushUint16(bodyLength)\n        else if (sizeOfBodyLength === 3) cursor.pushUint24(bodyLength)\n        else cursor.pushUint32(bodyLength)\n      }\n      for (const { encode } of list) {\n        encode(cursor)\n      }\n    },\n  }\n}\n\nfunction getEncodableBytes(bytesOrHex: ByteArray | Hex): Encodable {\n  const bytes =\n    typeof bytesOrHex === 'string' ? hexToBytes(bytesOrHex) : bytesOrHex\n\n  const sizeOfBytesLength = getSizeOfLength(bytes.length)\n  const length = (() => {\n    if (bytes.length === 1 && bytes[0] < 0x80) return 1\n    if (bytes.length <= 55) return 1 + bytes.length\n    return 1 + sizeOfBytesLength + bytes.length\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor) {\n      if (bytes.length === 1 && bytes[0] < 0x80) {\n        cursor.pushBytes(bytes)\n      } else if (bytes.length <= 55) {\n        cursor.pushByte(0x80 + bytes.length)\n        cursor.pushBytes(bytes)\n      } else {\n        cursor.pushByte(0x80 + 55 + sizeOfBytesLength)\n        if (sizeOfBytesLength === 1) cursor.pushUint8(bytes.length)\n        else if (sizeOfBytesLength === 2) cursor.pushUint16(bytes.length)\n        else if (sizeOfBytesLength === 3) cursor.pushUint24(bytes.length)\n        else cursor.pushUint32(bytes.length)\n        cursor.pushBytes(bytes)\n      }\n    },\n  }\n}\n\nfunction getSizeOfLength(length: number) {\n  if (length < 2 ** 8) return 1\n  if (length < 2 ** 16) return 2\n  if (length < 2 ** 24) return 3\n  if (length < 2 ** 32) return 4\n  throw new BaseError('Length is too large.')\n}\n","import type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { AssetGatewayUrls } from '../../../types/ens.js'\n\nimport {\n  type GetJsonImageErrorType,\n  type GetMetadataAvatarUriErrorType,\n  type GetNftTokenUriErrorType,\n  type ParseAvatarUriErrorType,\n  type ParseNftUriErrorType,\n  type ResolveAvatarUriErrorType,\n  getJsonImage,\n  getMetadataAvatarUri,\n  getNftTokenUri,\n  parseAvatarUri,\n  parseNftUri,\n  resolveAvatarUri,\n} from './utils.js'\n\nexport type ParseAvatarRecordErrorType =\n  | ParseNftAvatarUriErrorType\n  | ParseAvatarUriErrorType\n  | ErrorType\n\nexport async function parseAvatarRecord<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    gatewayUrls,\n    record,\n  }: {\n    gatewayUrls?: AssetGatewayUrls\n    record: string\n  },\n): Promise<string> {\n  if (/eip155:/i.test(record))\n    return parseNftAvatarUri(client, { gatewayUrls, record })\n  return parseAvatarUri({ uri: record, gatewayUrls })\n}\n\nexport type ParseNftAvatarUriErrorType =\n  | ParseNftUriErrorType\n  | GetNftTokenUriErrorType\n  | ResolveAvatarUriErrorType\n  | ParseAvatarUriErrorType\n  | GetJsonImageErrorType\n  | GetMetadataAvatarUriErrorType\n  | ErrorType\n\nasync function parseNftAvatarUri<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    gatewayUrls,\n    record,\n  }: {\n    gatewayUrls?: AssetGatewayUrls\n    record: string\n  },\n): Promise<string> {\n  // parse NFT URI into properties\n  const nft = parseNftUri(record)\n  // fetch tokenURI from the NFT contract\n  const nftUri = await getNftTokenUri(client, { nft })\n  // resolve the URI from the fetched tokenURI\n  const {\n    uri: resolvedNftUri,\n    isOnChain,\n    isEncoded,\n  } = resolveAvatarUri({ uri: nftUri, gatewayUrls })\n\n  // if the resolved URI is on chain, return the data\n  if (\n    isOnChain &&\n    (resolvedNftUri.includes('data:application/json;base64,') ||\n      resolvedNftUri.startsWith('{'))\n  ) {\n    const encodedJson = isEncoded\n      ? // if it is encoded, decode it\n        atob(resolvedNftUri.replace('data:application/json;base64,', ''))\n      : // if it isn't encoded assume it is a JSON string, but it could be anything (it will error if it is)\n        resolvedNftUri\n\n    const decoded = JSON.parse(encodedJson)\n    return parseAvatarUri({ uri: getJsonImage(decoded), gatewayUrls })\n  }\n\n  let uriTokenId = nft.tokenID\n  if (nft.namespace === 'erc1155')\n    uriTokenId = uriTokenId.replace('0x', '').padStart(64, '0')\n\n  return getMetadataAvatarUri({\n    gatewayUrls,\n    uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId),\n  })\n}\n","import type { Address } from 'abitype'\n\nimport {\n  type ReadContractErrorType,\n  readContract,\n} from '../../../actions/public/readContract.js'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport {\n  EnsAvatarInvalidMetadataError,\n  type EnsAvatarInvalidMetadataErrorType,\n  EnsAvatarInvalidNftUriError,\n  type EnsAvatarInvalidNftUriErrorType,\n  EnsAvatarUnsupportedNamespaceError,\n  type EnsAvatarUnsupportedNamespaceErrorType,\n  EnsAvatarUriResolutionError,\n  type EnsAvatarUriResolutionErrorType,\n} from '../../../errors/ens.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { AssetGatewayUrls } from '../../../types/ens.js'\n\ntype UriItem = {\n  uri: string\n  isOnChain: boolean\n  isEncoded: boolean\n}\n\nconst networkRegex =\n  /(?<protocol>https?:\\/\\/[^\\/]*|ipfs:\\/|ipns:\\/|ar:\\/)?(?<root>\\/)?(?<subpath>ipfs\\/|ipns\\/)?(?<target>[\\w\\-.]+)(?<subtarget>\\/.*)?/\nconst ipfsHashRegex =\n  /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\\/(?<target>[\\w\\-.]+))?(?<subtarget>\\/.*)?$/\nconst base64Regex = /^data:([a-zA-Z\\-/+]*);base64,([^\"].*)/\nconst dataURIRegex = /^data:([a-zA-Z\\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/\n\nexport type IsImageUriErrorType = ErrorType\n\nexport async function isImageUri(uri: string) {\n  try {\n    const res = await fetch(uri, { method: 'HEAD' })\n    // retrieve content type header to check if content is image\n    if (res.status === 200) {\n      const contentType = res.headers.get('content-type')\n      return contentType?.startsWith('image/')\n    }\n    return false\n  } catch (error: any) {\n    // if error is not cors related then fail\n    if (typeof error === 'object' && typeof error.response !== 'undefined') {\n      return false\n    }\n    // fail in NodeJS, since the error is not cors but any other network issue\n    // biome-ignore lint/suspicious/noPrototypeBuiltins:\n    if (!globalThis.hasOwnProperty('Image')) return false\n    // in case of cors, use image api to validate if given url is an actual image\n    return new Promise((resolve) => {\n      const img = new Image()\n      img.onload = () => {\n        resolve(true)\n      }\n      img.onerror = () => {\n        resolve(false)\n      }\n      img.src = uri\n    })\n  }\n}\n\nexport type GetGatewayErrorType = ErrorType\n\nexport function getGateway(custom: string | undefined, defaultGateway: string) {\n  if (!custom) return defaultGateway\n  if (custom.endsWith('/')) return custom.slice(0, -1)\n  return custom\n}\n\nexport type ResolveAvatarUriErrorType =\n  | GetGatewayErrorType\n  | EnsAvatarUriResolutionErrorType\n  | ErrorType\n\nexport function resolveAvatarUri({\n  uri,\n  gatewayUrls,\n}: {\n  uri: string\n  gatewayUrls?: AssetGatewayUrls | undefined\n}): UriItem {\n  const isEncoded = base64Regex.test(uri)\n  if (isEncoded) return { uri, isOnChain: true, isEncoded }\n\n  const ipfsGateway = getGateway(gatewayUrls?.ipfs, 'https://ipfs.io')\n  const arweaveGateway = getGateway(gatewayUrls?.arweave, 'https://arweave.net')\n\n  const networkRegexMatch = uri.match(networkRegex)\n  const {\n    protocol,\n    subpath,\n    target,\n    subtarget = '',\n  } = networkRegexMatch?.groups || {}\n\n  const isIPNS = protocol === 'ipns:/' || subpath === 'ipns/'\n  const isIPFS =\n    protocol === 'ipfs:/' || subpath === 'ipfs/' || ipfsHashRegex.test(uri)\n\n  if (uri.startsWith('http') && !isIPNS && !isIPFS) {\n    let replacedUri = uri\n    if (gatewayUrls?.arweave)\n      replacedUri = uri.replace(/https:\\/\\/arweave.net/g, gatewayUrls?.arweave)\n    return { uri: replacedUri, isOnChain: false, isEncoded: false }\n  }\n\n  if ((isIPNS || isIPFS) && target) {\n    return {\n      uri: `${ipfsGateway}/${isIPNS ? 'ipns' : 'ipfs'}/${target}${subtarget}`,\n      isOnChain: false,\n      isEncoded: false,\n    }\n  }\n\n  if (protocol === 'ar:/' && target) {\n    return {\n      uri: `${arweaveGateway}/${target}${subtarget || ''}`,\n      isOnChain: false,\n      isEncoded: false,\n    }\n  }\n\n  let parsedUri = uri.replace(dataURIRegex, '')\n  if (parsedUri.startsWith('<svg')) {\n    // if svg, base64 encode\n    parsedUri = `data:image/svg+xml;base64,${btoa(parsedUri)}`\n  }\n\n  if (parsedUri.startsWith('data:') || parsedUri.startsWith('{')) {\n    return {\n      uri: parsedUri,\n      isOnChain: true,\n      isEncoded: false,\n    }\n  }\n\n  throw new EnsAvatarUriResolutionError({ uri })\n}\n\nexport type GetJsonImageErrorType =\n  | EnsAvatarInvalidMetadataErrorType\n  | ErrorType\n\nexport function getJsonImage(data: any) {\n  // validation check for json data, must include one of theses properties\n  if (\n    typeof data !== 'object' ||\n    (!('image' in data) && !('image_url' in data) && !('image_data' in data))\n  ) {\n    throw new EnsAvatarInvalidMetadataError({ data })\n  }\n\n  return data.image || data.image_url || data.image_data\n}\n\nexport type GetMetadataAvatarUriErrorType =\n  | EnsAvatarUriResolutionErrorType\n  | ParseAvatarUriErrorType\n  | GetJsonImageErrorType\n  | ErrorType\n\nexport async function getMetadataAvatarUri({\n  gatewayUrls,\n  uri,\n}: {\n  gatewayUrls?: AssetGatewayUrls | undefined\n  uri: string\n}): Promise<string> {\n  try {\n    const res = await fetch(uri).then((res) => res.json())\n    const image = await parseAvatarUri({\n      gatewayUrls,\n      uri: getJsonImage(res),\n    })\n    return image\n  } catch {\n    throw new EnsAvatarUriResolutionError({ uri })\n  }\n}\n\nexport type ParseAvatarUriErrorType =\n  | ResolveAvatarUriErrorType\n  | IsImageUriErrorType\n  | EnsAvatarUriResolutionErrorType\n  | ErrorType\n\nexport async function parseAvatarUri({\n  gatewayUrls,\n  uri,\n}: {\n  gatewayUrls?: AssetGatewayUrls | undefined\n  uri: string\n}): Promise<string> {\n  const { uri: resolvedURI, isOnChain } = resolveAvatarUri({ uri, gatewayUrls })\n  if (isOnChain) return resolvedURI\n\n  // check if resolvedURI is an image, if it is return the url\n  const isImage = await isImageUri(resolvedURI)\n  if (isImage) return resolvedURI\n\n  throw new EnsAvatarUriResolutionError({ uri })\n}\n\ntype ParsedNft = {\n  chainID: number\n  namespace: string\n  contractAddress: Address\n  tokenID: string\n}\n\nexport type ParseNftUriErrorType = EnsAvatarInvalidNftUriErrorType | ErrorType\n\nexport function parseNftUri(uri_: string): ParsedNft {\n  let uri = uri_\n  // parse valid nft spec (CAIP-22/CAIP-29)\n  // @see: https://github.com/ChainAgnostic/CAIPs/tree/master/CAIPs\n  if (uri.startsWith('did:nft:')) {\n    // convert DID to CAIP\n    uri = uri.replace('did:nft:', '').replace(/_/g, '/')\n  }\n\n  const [reference, asset_namespace, tokenID] = uri.split('/')\n  const [eip_namespace, chainID] = reference.split(':')\n  const [erc_namespace, contractAddress] = asset_namespace.split(':')\n\n  if (!eip_namespace || eip_namespace.toLowerCase() !== 'eip155')\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Only EIP-155 supported' })\n  if (!chainID)\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Chain ID not found' })\n  if (!contractAddress)\n    throw new EnsAvatarInvalidNftUriError({\n      reason: 'Contract address not found',\n    })\n  if (!tokenID)\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Token ID not found' })\n  if (!erc_namespace)\n    throw new EnsAvatarInvalidNftUriError({ reason: 'ERC namespace not found' })\n\n  return {\n    chainID: parseInt(chainID),\n    namespace: erc_namespace.toLowerCase(),\n    contractAddress: contractAddress as Address,\n    tokenID,\n  }\n}\n\nexport type GetNftTokenUriErrorType =\n  | ReadContractErrorType\n  | EnsAvatarUnsupportedNamespaceErrorType\n  | ErrorType\n\nexport async function getNftTokenUri<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { nft }: { nft: ParsedNft },\n) {\n  if (nft.namespace === 'erc721') {\n    return readContract(client, {\n      address: nft.contractAddress,\n      abi: [\n        {\n          name: 'tokenURI',\n          type: 'function',\n          stateMutability: 'view',\n          inputs: [{ name: 'tokenId', type: 'uint256' }],\n          outputs: [{ name: '', type: 'string' }],\n        },\n      ],\n      functionName: 'tokenURI',\n      args: [BigInt(nft.tokenID)],\n    })\n  }\n  if (nft.namespace === 'erc1155') {\n    return readContract(client, {\n      address: nft.contractAddress,\n      abi: [\n        {\n          name: 'uri',\n          type: 'function',\n          stateMutability: 'view',\n          inputs: [{ name: '_id', type: 'uint256' }],\n          outputs: [{ name: '', type: 'string' }],\n        },\n      ],\n      functionName: 'uri',\n      args: [BigInt(nft.tokenID)],\n    })\n  }\n  throw new EnsAvatarUnsupportedNamespaceError({ namespace: nft.namespace })\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\n\nexport type EncodeLabelhashErrorType = ErrorType\n\nexport function encodeLabelhash(hash: Hex): `[${string}]` {\n  return `[${hash.slice(2)}]`\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\n\nexport type EncodedLabelToLabelhashErrorType = IsHexErrorType | ErrorType\n\nexport function encodedLabelToLabelhash(label: string): Hex | null {\n  if (label.length !== 66) return null\n  if (label.indexOf('[') !== 0) return null\n  if (label.indexOf(']') !== 65) return null\n  const hash = `0x${label.slice(1, 65)}`\n  if (!isHex(hash)) return null\n  return hash\n}\n","import { panicReasons } from '../../constants/solidity.js'\nimport { BaseError } from '../../errors/base.js'\nimport { ContractFunctionRevertedError } from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nexport type IsNullUniversalResolverErrorErrorType = ErrorType\n\n/*\n * @description Checks if error is a valid null result UniversalResolver error\n */\nexport function isNullUniversalResolverError(\n  err: unknown,\n  callType: 'resolve' | 'reverse',\n): boolean {\n  if (!(err instanceof BaseError)) return false\n  const cause = err.walk((e) => e instanceof ContractFunctionRevertedError)\n  if (!(cause instanceof ContractFunctionRevertedError)) return false\n  if (cause.data?.errorName === 'ResolverNotFound') return true\n  if (cause.data?.errorName === 'ResolverWildcardNotSupported') return true\n  // Backwards compatibility for older UniversalResolver contracts\n  if (\n    cause.reason?.includes(\n      'Wildcard on non-extended resolvers is not supported',\n    )\n  )\n    return true\n  // No primary name set for address.\n  if (callType === 'reverse' && cause.reason === panicReasons[50]) return true\n  return false\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type EncodedLabelToLabelhashErrorType,\n  encodedLabelToLabelhash,\n} from './encodedLabelToLabelhash.js'\n\nexport type LabelhashErrorType =\n  | BytesToHexErrorType\n  | EncodedLabelToLabelhashErrorType\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\n/**\n * @description Hashes ENS label\n *\n * - Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @example\n * labelhash('eth')\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\n */\nexport function labelhash(label: string) {\n  const result = new Uint8Array(32).fill(0)\n  if (!label) return bytesToHex(result)\n  return encodedLabelToLabelhash(label) || keccak256(stringToBytes(label))\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport {\n  type StringToBytesErrorType,\n  type ToBytesErrorType,\n  stringToBytes,\n  toBytes,\n} from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type EncodedLabelToLabelhashErrorType,\n  encodedLabelToLabelhash,\n} from './encodedLabelToLabelhash.js'\n\nexport type NamehashErrorType =\n  | BytesToHexErrorType\n  | EncodedLabelToLabelhashErrorType\n  | ToBytesErrorType\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ConcatErrorType\n  | ErrorType\n\n/**\n * @description Hashes ENS name\n *\n * - Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @example\n * namehash('wevm.eth')\n * '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'\n *\n * @link https://eips.ethereum.org/EIPS/eip-137\n */\nexport function namehash(name: string) {\n  let result = new Uint8Array(32).fill(0)\n  if (!name) return bytesToHex(result)\n\n  const labels = name.split('.')\n  // Iterate in reverse order building up hash\n  for (let i = labels.length - 1; i >= 0; i -= 1) {\n    const hashFromEncodedLabel = encodedLabelToLabelhash(labels[i])\n    const hashed = hashFromEncodedLabel\n      ? toBytes(hashFromEncodedLabel)\n      : keccak256(stringToBytes(labels[i]), 'bytes')\n    result = keccak256(concat([result, hashed]), 'bytes')\n  }\n\n  return bytesToHex(result)\n}\n","// Adapted from https://github.com/mafintosh/dns-packet\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray } from '../../types/misc.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport {\n  type EncodeLabelhashErrorType,\n  encodeLabelhash,\n} from './encodeLabelhash.js'\nimport { type LabelhashErrorType, labelhash } from './labelhash.js'\n\nexport type PacketToBytesErrorType =\n  | EncodeLabelhashErrorType\n  | LabelhashErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\n/*\n * @description Encodes a DNS packet into a ByteArray containing a UDP payload.\n */\nexport function packetToBytes(packet: string): ByteArray {\n  // strip leading and trailing `.`\n  const value = packet.replace(/^\\.|\\.$/gm, '')\n  if (value.length === 0) return new Uint8Array(1)\n\n  const bytes = new Uint8Array(stringToBytes(value).byteLength + 2)\n\n  let offset = 0\n  const list = value.split('.')\n  for (let i = 0; i < list.length; i++) {\n    let encoded = stringToBytes(list[i])\n    // if the length is > 255, make the encoded label value a labelhash\n    // this is compatible with the universal resolver\n    if (encoded.byteLength > 255)\n      encoded = stringToBytes(encodeLabelhash(labelhash(list[i])))\n    bytes[offset] = encoded.length\n    bytes.set(encoded, offset + 1)\n    offset += encoded.length + 1\n  }\n\n  if (bytes.byteLength !== offset + 1) return bytes.slice(0, offset + 1)\n\n  return bytes\n}\n","import type { CallParameters } from '../../actions/public/call.js'\nimport type { BaseError } from '../../errors/base.js'\nimport {\n  CallExecutionError,\n  type CallExecutionErrorType,\n} from '../../errors/contract.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetCallErrorReturnType<cause = ErrorType> = Omit<\n  CallExecutionErrorType,\n  'cause'\n> & {\n  cause: cause | GetNodeErrorReturnType\n}\n\nexport function getCallError<err extends ErrorType<string>>(\n  err: err,\n  {\n    docsPath,\n    ...args\n  }: CallParameters & {\n    chain?: Chain\n    docsPath?: string\n  },\n): GetCallErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new CallExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetCallErrorReturnType<err>\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { AbiDecodingZeroDataError } from '../../errors/abi.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  ContractFunctionExecutionError,\n  type ContractFunctionExecutionErrorType,\n  ContractFunctionRevertedError,\n  type ContractFunctionRevertedErrorType,\n  ContractFunctionZeroDataError,\n  type ContractFunctionZeroDataErrorType,\n  RawContractError,\n} from '../../errors/contract.js'\nimport { InternalRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nconst EXECUTION_REVERTED_ERROR_CODE = 3\n\nexport type GetContractErrorReturnType<cause = ErrorType> = Omit<\n  ContractFunctionExecutionErrorType,\n  'cause'\n> & {\n  cause:\n    | cause\n    | ContractFunctionZeroDataErrorType\n    | ContractFunctionRevertedErrorType\n}\n\nexport function getContractError<err extends ErrorType<string>>(\n  err: err,\n  {\n    abi,\n    address,\n    args,\n    docsPath,\n    functionName,\n    sender,\n  }: {\n    abi: Abi\n    args: any\n    address?: Address\n    docsPath?: string\n    functionName: string\n    sender?: Address\n  },\n): GetContractErrorReturnType {\n  const { code, data, message, shortMessage } = (\n    err instanceof RawContractError\n      ? err\n      : err instanceof BaseError\n        ? err.walk((err) => 'data' in (err as Error)) || err.walk()\n        : {}\n  ) as RawContractError\n\n  const cause = (() => {\n    if (err instanceof AbiDecodingZeroDataError)\n      return new ContractFunctionZeroDataError({ functionName })\n    if (\n      [EXECUTION_REVERTED_ERROR_CODE, InternalRpcError.code].includes(code) &&\n      (data || message || shortMessage)\n    ) {\n      return new ContractFunctionRevertedError({\n        abi,\n        data: typeof data === 'object' ? data.data : data,\n        functionName,\n        message: shortMessage ?? message,\n      })\n    }\n    return err\n  })()\n\n  return new ContractFunctionExecutionError(cause as BaseError, {\n    abi,\n    args,\n    contractAddress: address,\n    docsPath,\n    functionName,\n    sender,\n  }) as GetContractErrorReturnType\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { EstimateGasParameters } from '../../actions/public/estimateGas.js'\nimport type { BaseError } from '../../errors/base.js'\nimport {\n  EstimateGasExecutionError,\n  type EstimateGasExecutionErrorType,\n} from '../../errors/estimateGas.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetEstimateGasErrorReturnType<cause = ErrorType> = Omit<\n  EstimateGasExecutionErrorType,\n  'cause'\n> & { cause: cause | GetNodeErrorReturnType }\n\nexport function getEstimateGasError<err extends ErrorType<string>>(\n  err: err,\n  {\n    docsPath,\n    ...args\n  }: Omit<EstimateGasParameters, 'account'> & {\n    account?: Account\n    chain?: Chain\n    docsPath?: string\n  },\n): GetEstimateGasErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new EstimateGasExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetEstimateGasErrorReturnType<err>\n}\n","import type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  ExecutionRevertedError,\n  type ExecutionRevertedErrorType,\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  FeeCapTooLowError,\n  type FeeCapTooLowErrorType,\n  InsufficientFundsError,\n  type InsufficientFundsErrorType,\n  IntrinsicGasTooHighError,\n  type IntrinsicGasTooHighErrorType,\n  IntrinsicGasTooLowError,\n  type IntrinsicGasTooLowErrorType,\n  NonceMaxValueError,\n  type NonceMaxValueErrorType,\n  NonceTooHighError,\n  type NonceTooHighErrorType,\n  NonceTooLowError,\n  type NonceTooLowErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n  TransactionTypeNotSupportedError,\n  type TransactionTypeNotSupportedErrorType,\n  UnknownNodeError,\n  type UnknownNodeErrorType,\n} from '../../errors/node.js'\nimport { RpcRequestError } from '../../errors/request.js'\nimport {\n  InvalidInputRpcError,\n  TransactionRejectedRpcError,\n} from '../../errors/rpc.js'\n\nexport function containsNodeError(err: BaseError) {\n  return (\n    err instanceof TransactionRejectedRpcError ||\n    err instanceof InvalidInputRpcError ||\n    (err instanceof RpcRequestError && err.code === ExecutionRevertedError.code)\n  )\n}\n\nexport type GetNodeErrorParameters = Partial<SendTransactionParameters<any>>\n\nexport type GetNodeErrorReturnType =\n  | ExecutionRevertedErrorType\n  | FeeCapTooHighErrorType\n  | FeeCapTooLowErrorType\n  | NonceTooHighErrorType\n  | NonceTooLowErrorType\n  | NonceMaxValueErrorType\n  | InsufficientFundsErrorType\n  | IntrinsicGasTooHighErrorType\n  | IntrinsicGasTooLowErrorType\n  | TransactionTypeNotSupportedErrorType\n  | TipAboveFeeCapErrorType\n  | UnknownNodeErrorType\n\nexport function getNodeError(\n  err: BaseError,\n  args: GetNodeErrorParameters,\n): GetNodeErrorReturnType {\n  const message = (err.details || '').toLowerCase()\n\n  const executionRevertedError = err.walk(\n    (e) => (e as { code: number }).code === ExecutionRevertedError.code,\n  )\n  if (executionRevertedError instanceof BaseError) {\n    return new ExecutionRevertedError({\n      cause: err,\n      message: executionRevertedError.details,\n    }) as any\n  }\n  if (ExecutionRevertedError.nodeMessage.test(message))\n    return new ExecutionRevertedError({\n      cause: err,\n      message: err.details,\n    }) as any\n  if (FeeCapTooHighError.nodeMessage.test(message))\n    return new FeeCapTooHighError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n    }) as any\n  if (FeeCapTooLowError.nodeMessage.test(message))\n    return new FeeCapTooLowError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n    }) as any\n  if (NonceTooHighError.nodeMessage.test(message))\n    return new NonceTooHighError({ cause: err, nonce: args?.nonce }) as any\n  if (NonceTooLowError.nodeMessage.test(message))\n    return new NonceTooLowError({ cause: err, nonce: args?.nonce }) as any\n  if (NonceMaxValueError.nodeMessage.test(message))\n    return new NonceMaxValueError({ cause: err, nonce: args?.nonce }) as any\n  if (InsufficientFundsError.nodeMessage.test(message))\n    return new InsufficientFundsError({ cause: err }) as any\n  if (IntrinsicGasTooHighError.nodeMessage.test(message))\n    return new IntrinsicGasTooHighError({ cause: err, gas: args?.gas }) as any\n  if (IntrinsicGasTooLowError.nodeMessage.test(message))\n    return new IntrinsicGasTooLowError({ cause: err, gas: args?.gas }) as any\n  if (TransactionTypeNotSupportedError.nodeMessage.test(message))\n    return new TransactionTypeNotSupportedError({ cause: err }) as any\n  if (TipAboveFeeCapError.nodeMessage.test(message))\n    return new TipAboveFeeCapError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n      maxPriorityFeePerGas: args?.maxPriorityFeePerGas,\n    }) as any\n  return new UnknownNodeError({\n    cause: err,\n  }) as any\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport type { BaseError } from '../../errors/base.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport {\n  TransactionExecutionError,\n  type TransactionExecutionErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetTransactionErrorParameters = Omit<\n  SendTransactionParameters,\n  'account' | 'chain'\n> & {\n  account: Account\n  chain?: Chain\n  docsPath?: string\n}\n\nexport type GetTransactionErrorReturnType<cause = ErrorType> = Omit<\n  TransactionExecutionErrorType,\n  'cause'\n> & { cause: cause | GetNodeErrorReturnType }\n\nexport function getTransactionError<err extends ErrorType<string>>(\n  err: err,\n  { docsPath, ...args }: GetTransactionErrorParameters,\n): GetTransactionErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new TransactionExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetTransactionErrorReturnType<err>\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { OnResponseFn } from '../../clients/transports/fallback.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { PublicRpcSchema } from '../../types/eip1193.js'\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Filter } from '../../types/utils.js'\n\ntype CreateFilterRequestScopeParameters = {\n  method:\n    | 'eth_newFilter'\n    | 'eth_newPendingTransactionFilter'\n    | 'eth_newBlockFilter'\n}\n\ntype FilterRpcSchema = Filter<\n  PublicRpcSchema,\n  { Method: 'eth_getFilterLogs' | 'eth_getFilterChanges' }\n>\n\ntype CreateFilterRequestScopeReturnType = (\n  id: Hex,\n) => EIP1193RequestFn<FilterRpcSchema>\n\n/**\n * Scopes `request` to the filter ID. If the client is a fallback, it will\n * listen for responses and scope the child transport `request` function\n * to the successful filter ID.\n */\nexport function createFilterRequestScope<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { method }: CreateFilterRequestScopeParameters,\n): CreateFilterRequestScopeReturnType {\n  const requestMap: Record<Hex, EIP1193RequestFn> = {}\n\n  if (client.transport.type === 'fallback')\n    client.transport.onResponse?.(\n      ({\n        method: method_,\n        response: id,\n        status,\n        transport,\n      }: Parameters<OnResponseFn>[0]) => {\n        if (status === 'success' && method === method_)\n          requestMap[id as Hex] = transport.request\n      },\n    )\n\n  return ((id) =>\n    requestMap[id] || client.request) as CreateFilterRequestScopeReturnType\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Block, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ExtractChainFormatterExclude,\n  ExtractChainFormatterReturnType,\n} from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcBlock } from '../../types/rpc.js'\nimport type { Prettify } from '../../types/utils.js'\n\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\nimport { type FormattedTransaction, formatTransaction } from './transaction.js'\n\ntype BlockPendingDependencies = 'hash' | 'logsBloom' | 'nonce' | 'number'\n\nexport type FormattedBlock<\n  TChain extends { formatters?: Chain['formatters'] } | undefined =\n    | { formatters?: Chain['formatters'] }\n    | undefined,\n  TIncludeTransactions extends boolean = boolean,\n  TBlockTag extends BlockTag = BlockTag,\n  _FormatterReturnType = ExtractChainFormatterReturnType<\n    TChain,\n    'block',\n    Block<bigint, TIncludeTransactions>\n  >,\n  _ExcludedPendingDependencies extends string = BlockPendingDependencies &\n    ExtractChainFormatterExclude<TChain, 'block'>,\n  _Formatted = Omit<_FormatterReturnType, BlockPendingDependencies> & {\n    [_key in _ExcludedPendingDependencies]: never\n  } & Pick<\n      Block<bigint, TIncludeTransactions, TBlockTag>,\n      BlockPendingDependencies\n    >,\n  _Transactions = TIncludeTransactions extends true\n    ? Prettify<FormattedTransaction<TChain, TBlockTag>>[]\n    : Hash[],\n> = Omit<_Formatted, 'transactions'> & {\n  transactions: _Transactions\n}\n\nexport type FormatBlockErrorType = ErrorType\n\nexport function formatBlock(block: Partial<RpcBlock>) {\n  const transactions = block.transactions?.map((transaction) => {\n    if (typeof transaction === 'string') return transaction\n    return formatTransaction(transaction)\n  })\n  return {\n    ...block,\n    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,\n    difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\n    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : undefined,\n    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : undefined,\n    hash: block.hash ? block.hash : null,\n    logsBloom: block.logsBloom ? block.logsBloom : null,\n    nonce: block.nonce ? block.nonce : null,\n    number: block.number ? BigInt(block.number) : null,\n    size: block.size ? BigInt(block.size) : undefined,\n    timestamp: block.timestamp ? BigInt(block.timestamp) : undefined,\n    transactions,\n    totalDifficulty: block.totalDifficulty\n      ? BigInt(block.totalDifficulty)\n      : null,\n  } as Block\n}\n\nexport type DefineBlockErrorType = DefineFormatterErrorType | ErrorType\n\nexport const defineBlock = /*#__PURE__*/ defineFormatter('block', formatBlock)\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ChainFormatter } from '../../types/chain.js'\n\nexport type ExtractErrorType = ErrorType\n\n/**\n * @description Picks out the keys from `value` that exist in the formatter..\n */\nexport function extract(\n  value_: Record<string, unknown>,\n  { format }: { format?: ChainFormatter['format'] },\n) {\n  if (!format) return {}\n\n  const value: Record<string, unknown> = {}\n  function extract_(formatted: Record<string, any>) {\n    const keys = Object.keys(formatted)\n    for (const key of keys) {\n      if (key in value_) value[key] = value_[key]\n      if (\n        formatted[key] &&\n        typeof formatted[key] === 'object' &&\n        !Array.isArray(formatted[key])\n      )\n        extract_(formatted[key])\n    }\n  }\n\n  const formatted = format(value_ || {})\n  extract_(formatted)\n\n  return value\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { FeeHistory } from '../../types/fee.js'\nimport type { RpcFeeHistory } from '../../types/rpc.js'\n\nexport type FormatFeeHistoryErrorType = ErrorType\n\nexport function formatFeeHistory(feeHistory: RpcFeeHistory): FeeHistory {\n  return {\n    baseFeePerGas: feeHistory.baseFeePerGas.map((value) => BigInt(value)),\n    gasUsedRatio: feeHistory.gasUsedRatio,\n    oldestBlock: BigInt(feeHistory.oldestBlock),\n    reward: feeHistory.reward?.map((reward) =>\n      reward.map((value) => BigInt(value)),\n    ),\n  }\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Assign, Prettify } from '../../types/utils.js'\n\nexport type DefineFormatterErrorType = ErrorType\n\nexport function defineFormatter<TType extends string, TParameters, TReturnType>(\n  type: TType,\n  format: (_: TParameters) => TReturnType,\n) {\n  return <\n    TOverrideParameters,\n    TOverrideReturnType,\n    TExclude extends (keyof TParameters | keyof TOverrideParameters)[] = [],\n  >({\n    exclude,\n    format: overrides,\n  }: {\n    exclude?: TExclude\n    format: (_: TOverrideParameters) => TOverrideReturnType\n  }) => {\n    return {\n      exclude,\n      format: (args: Assign<TParameters, TOverrideParameters>) => {\n        const formatted = format(args as any)\n        if (exclude) {\n          for (const key of exclude) {\n            delete (formatted as any)[key]\n          }\n        }\n        return {\n          ...formatted,\n          ...overrides(args),\n        } as Prettify<Assign<TReturnType, TOverrideReturnType>> & {\n          [_key in TExclude[number]]: never\n        }\n      },\n      type,\n    }\n  }\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Log } from '../../types/log.js'\nimport type { RpcLog } from '../../types/rpc.js'\n\nexport type FormatLogErrorType = ErrorType\n\nexport function formatLog(\n  log: Partial<RpcLog>,\n  { args, eventName }: { args?: unknown; eventName?: string } = {},\n) {\n  return {\n    ...log,\n    blockHash: log.blockHash ? log.blockHash : null,\n    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,\n    logIndex: log.logIndex ? Number(log.logIndex) : null,\n    transactionHash: log.transactionHash ? log.transactionHash : null,\n    transactionIndex: log.transactionIndex\n      ? Number(log.transactionIndex)\n      : null,\n    ...(eventName ? { args, eventName } : {}),\n  } as Log\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Proof } from '../../types/proof.js'\nimport type { RpcProof } from '../../types/rpc.js'\nimport { hexToNumber } from '../index.js'\n\nexport type FormatProofErrorType = ErrorType\n\nfunction formatStorageProof(storageProof: RpcProof['storageProof']) {\n  return storageProof.map((proof) => ({\n    ...proof,\n    value: BigInt(proof.value),\n  }))\n}\n\nexport function formatProof(proof: Partial<RpcProof>) {\n  return {\n    ...proof,\n    balance: proof.balance ? BigInt(proof.balance) : undefined,\n    nonce: proof.nonce ? hexToNumber(proof.nonce) : undefined,\n    storageProof: proof.storageProof\n      ? formatStorageProof(proof.storageProof)\n      : undefined,\n  } as Proof\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ExtractChainFormatterExclude,\n  ExtractChainFormatterReturnType,\n} from '../../types/chain.js'\nimport type { RpcTransaction } from '../../types/rpc.js'\nimport type { Transaction } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\n\ntype TransactionPendingDependencies =\n  | 'blockHash'\n  | 'blockNumber'\n  | 'transactionIndex'\n\nexport type FormattedTransaction<\n  TChain extends { formatters?: Chain['formatters'] } | undefined =\n    | { formatters?: Chain['formatters'] }\n    | undefined,\n  TBlockTag extends BlockTag = BlockTag,\n  _FormatterReturnType = ExtractChainFormatterReturnType<\n    TChain,\n    'transaction',\n    Transaction\n  >,\n  _ExcludedPendingDependencies extends string = TransactionPendingDependencies &\n    ExtractChainFormatterExclude<TChain, 'transaction'>,\n> = UnionOmit<_FormatterReturnType, TransactionPendingDependencies> & {\n  [_key in _ExcludedPendingDependencies]: never\n} & Pick<\n    Transaction<bigint, number, TBlockTag extends 'pending' ? true : false>,\n    TransactionPendingDependencies\n  >\n\nexport const transactionType = {\n  '0x0': 'legacy',\n  '0x1': 'eip2930',\n  '0x2': 'eip1559',\n} as const\n\nexport type FormatTransactionErrorType = ErrorType\n\nexport function formatTransaction(transaction: Partial<RpcTransaction>) {\n  const transaction_ = {\n    ...transaction,\n    blockHash: transaction.blockHash ? transaction.blockHash : null,\n    blockNumber: transaction.blockNumber\n      ? BigInt(transaction.blockNumber)\n      : null,\n    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : undefined,\n    gas: transaction.gas ? BigInt(transaction.gas) : undefined,\n    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : undefined,\n    maxFeePerGas: transaction.maxFeePerGas\n      ? BigInt(transaction.maxFeePerGas)\n      : undefined,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas\n      ? BigInt(transaction.maxPriorityFeePerGas)\n      : undefined,\n    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : undefined,\n    to: transaction.to ? transaction.to : null,\n    transactionIndex: transaction.transactionIndex\n      ? Number(transaction.transactionIndex)\n      : null,\n    type: transaction.type ? transactionType[transaction.type] : undefined,\n    typeHex: transaction.type ? transaction.type : undefined,\n    value: transaction.value ? BigInt(transaction.value) : undefined,\n    v: transaction.v ? BigInt(transaction.v) : undefined,\n  } as Transaction\n\n  transaction_.yParity = (() => {\n    // If `yParity` is provided, we will use it.\n    if (transaction.yParity) return Number(transaction.yParity)\n\n    // If no `yParity` provided, try derive from `v`.\n    if (typeof transaction_.v === 'bigint') {\n      if (transaction_.v === 0n || transaction_.v === 27n) return 0\n      if (transaction_.v === 1n || transaction_.v === 28n) return 1\n      if (transaction_.v >= 35n) return transaction_.v % 2n === 0n ? 1 : 0\n    }\n\n    return undefined\n  })()\n\n  if (transaction_.type === 'legacy') {\n    delete transaction_.accessList\n    delete transaction_.maxFeePerGas\n    delete transaction_.maxPriorityFeePerGas\n    delete transaction_.yParity\n  }\n  if (transaction_.type === 'eip2930') {\n    delete transaction_.maxFeePerGas\n    delete transaction_.maxPriorityFeePerGas\n  }\n  return transaction_\n}\n\nexport type DefineTransactionErrorType = DefineFormatterErrorType | ErrorType\n\nexport const defineTransaction = /*#__PURE__*/ defineFormatter(\n  'transaction',\n  formatTransaction,\n)\n","import type { ErrorType } from '../../errors/utils.js'\nimport type {\n  Chain,\n  ExtractChainFormatterReturnType,\n} from '../../types/chain.js'\nimport type { RpcTransactionReceipt } from '../../types/rpc.js'\nimport type { TransactionReceipt } from '../../types/transaction.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\n\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\nimport { formatLog } from './log.js'\nimport { transactionType } from './transaction.js'\n\nexport type FormattedTransactionReceipt<\n  TChain extends Chain | undefined = Chain | undefined,\n> = ExtractChainFormatterReturnType<\n  TChain,\n  'transactionReceipt',\n  TransactionReceipt\n>\n\nconst statuses = {\n  '0x0': 'reverted',\n  '0x1': 'success',\n} as const\n\nexport type FormatTransactionReceiptErrorType = ErrorType\n\nexport function formatTransactionReceipt(\n  transactionReceipt: Partial<RpcTransactionReceipt>,\n) {\n  return {\n    ...transactionReceipt,\n    blockNumber: transactionReceipt.blockNumber\n      ? BigInt(transactionReceipt.blockNumber)\n      : null,\n    contractAddress: transactionReceipt.contractAddress\n      ? transactionReceipt.contractAddress\n      : null,\n    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed\n      ? BigInt(transactionReceipt.cumulativeGasUsed)\n      : null,\n    effectiveGasPrice: transactionReceipt.effectiveGasPrice\n      ? BigInt(transactionReceipt.effectiveGasPrice)\n      : null,\n    gasUsed: transactionReceipt.gasUsed\n      ? BigInt(transactionReceipt.gasUsed)\n      : null,\n    logs: transactionReceipt.logs\n      ? transactionReceipt.logs.map((log) => formatLog(log))\n      : null,\n    to: transactionReceipt.to ? transactionReceipt.to : null,\n    transactionIndex: transactionReceipt.transactionIndex\n      ? hexToNumber(transactionReceipt.transactionIndex)\n      : null,\n    status: transactionReceipt.status\n      ? statuses[transactionReceipt.status]\n      : null,\n    type: transactionReceipt.type\n      ? transactionType[\n          transactionReceipt.type as keyof typeof transactionType\n        ] || transactionReceipt.type\n      : null,\n  } as TransactionReceipt\n}\n\nexport type DefineTransactionReceiptErrorType =\n  | DefineFormatterErrorType\n  | ErrorType\n\nexport const defineTransactionReceipt = /*#__PURE__*/ defineFormatter(\n  'transactionReceipt',\n  formatTransactionReceipt,\n)\n","import type { ErrorType } from '../../errors/utils.js'\nimport type {\n  Chain,\n  ExtractChainFormatterParameters,\n} from '../../types/chain.js'\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport { numberToHex } from '../encoding/toHex.js'\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\n\nexport type FormattedTransactionRequest<\n  TChain extends Chain | undefined = Chain | undefined,\n> = ExtractChainFormatterParameters<\n  TChain,\n  'transactionRequest',\n  TransactionRequest\n>\n\nexport const rpcTransactionType = {\n  legacy: '0x0',\n  eip2930: '0x1',\n  eip1559: '0x2',\n} as const\n\nexport type FormatTransactionRequestErrorType = ErrorType\n\nexport function formatTransactionRequest(\n  transactionRequest: Partial<TransactionRequest>,\n) {\n  return {\n    ...transactionRequest,\n    gas:\n      typeof transactionRequest.gas !== 'undefined'\n        ? numberToHex(transactionRequest.gas)\n        : undefined,\n    gasPrice:\n      typeof transactionRequest.gasPrice !== 'undefined'\n        ? numberToHex(transactionRequest.gasPrice)\n        : undefined,\n    maxFeePerGas:\n      typeof transactionRequest.maxFeePerGas !== 'undefined'\n        ? numberToHex(transactionRequest.maxFeePerGas)\n        : undefined,\n    maxPriorityFeePerGas:\n      typeof transactionRequest.maxPriorityFeePerGas !== 'undefined'\n        ? numberToHex(transactionRequest.maxPriorityFeePerGas)\n        : undefined,\n    nonce:\n      typeof transactionRequest.nonce !== 'undefined'\n        ? numberToHex(transactionRequest.nonce)\n        : undefined,\n    type:\n      typeof transactionRequest.type !== 'undefined'\n        ? rpcTransactionType[transactionRequest.type]\n        : undefined,\n    value:\n      typeof transactionRequest.value !== 'undefined'\n        ? numberToHex(transactionRequest.value)\n        : undefined,\n  } as RpcTransactionRequest\n}\n\nexport type DefineTransactionRequestErrorType =\n  | DefineFormatterErrorType\n  | ErrorType\n\nexport const defineTransactionRequest = /*#__PURE__*/ defineFormatter(\n  'transactionRequest',\n  formatTransactionRequest,\n)\n","import type { Client } from '../clients/createClient.js'\n\n/**\n * Retrieves and returns an action from the client (if exists), and falls\n * back to the tree-shakable action.\n *\n * Useful for extracting overridden actions from a client (ie. if a consumer\n * wants to override the `sendTransaction` implementation).\n */\nexport function getAction<params extends {}, returnType extends {}>(\n  client: Client,\n  action: (_: any, params: params) => returnType,\n  // Some minifiers drop `Function.prototype.name`, meaning that `action.name`\n  // will not work. For that case, the consumer needs to pass the name explicitly.\n  name: string,\n) {\n  return (params: params): returnType =>\n    (\n      client as Client & {\n        [key: string]: (params: params) => returnType\n      }\n    )[action.name || name]?.(params) ?? action(client, params)\n}\n","import type { AbiEvent } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { getEventSignature } from './getEventSignature.js'\nimport { type Keccak256ErrorType, keccak256 } from './keccak256.js'\n\nconst hash = (value: string) => keccak256(toBytes(value))\n\nexport type GetEventSelectorErrorType =\n  | Keccak256ErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport const getEventSelector = (fn: string | AbiEvent) =>\n  hash(getEventSignature(fn))\n","import type { AbiEvent, AbiFunction } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type GetFunctionSignatureErrorType,\n  getFunctionSignature,\n} from './getFunctionSignature.js'\n\nexport type GetEventSignatureErrorType =\n  | GetFunctionSignatureErrorType\n  | ErrorType\n\nexport const getEventSignature = (fn: string | AbiEvent) => {\n  return getFunctionSignature(fn as {} as AbiFunction)\n}\n","import type { AbiFunction } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport {\n  type GetFunctionSignatureErrorType,\n  getFunctionSignature,\n} from './getFunctionSignature.js'\nimport { type Keccak256ErrorType, keccak256 } from './keccak256.js'\n\nconst hash = (value: string) => keccak256(toBytes(value))\n\nexport type GetFunctionSelectorErrorType =\n  | GetFunctionSignatureErrorType\n  | Keccak256ErrorType\n  | SliceErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport const getFunctionSelector = (fn: string | AbiFunction) =>\n  slice(hash(getFunctionSignature(fn)), 0, 4)\n","import { type AbiFunction, formatAbiItem } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type NormalizeSignatureErrorType,\n  normalizeSignature,\n} from './normalizeSignature.js'\n\nexport type GetFunctionSignatureErrorType =\n  | NormalizeSignatureErrorType\n  | ErrorType\n\nexport const getFunctionSignature = (fn_: string | AbiFunction) => {\n  const fn = (() => {\n    if (typeof fn_ === 'string') return fn_\n    return formatAbiItem(fn_)\n  })()\n  return normalizeSignature(fn)\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type SizeErrorType, size } from '../data/size.js'\n\nexport type IsHashErrorType = IsHexErrorType | SizeErrorType | ErrorType\n\nexport function isHash(hash: string): hash is Hex {\n  return isHex(hash) && size(hash) === 32\n}\n","import { keccak_256 } from '@noble/hashes/sha3'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Keccak256Hash<TTo extends To> =\n  | (TTo extends 'bytes' ? ByteArray : never)\n  | (TTo extends 'hex' ? Hex : never)\n\nexport type Keccak256ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function keccak256<TTo extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: TTo,\n): Keccak256Hash<TTo> {\n  const to = to_ || 'hex'\n  const bytes = keccak_256(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Keccak256Hash<TTo>\n  return toHex(bytes) as Keccak256Hash<TTo>\n}\n","import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nexport type NormalizeSignatureParameters = string\nexport type NormalizeSignatureReturnType = string\nexport type NormalizeSignatureErrorType = ErrorType\n\nexport function normalizeSignature(\n  signature: NormalizeSignatureParameters,\n): NormalizeSignatureReturnType {\n  let active = true\n  let current = ''\n  let level = 0\n  let result = ''\n  let valid = false\n\n  for (let i = 0; i < signature.length; i++) {\n    const char = signature[i]\n\n    // If the character is a separator, we want to reactivate.\n    if (['(', ')', ','].includes(char)) active = true\n\n    // If the character is a \"level\" token, we want to increment/decrement.\n    if (char === '(') level++\n    if (char === ')') level--\n\n    // If we aren't active, we don't want to mutate the result.\n    if (!active) continue\n\n    // If level === 0, we are at the definition level.\n    if (level === 0) {\n      if (char === ' ' && ['event', 'function', ''].includes(result))\n        result = ''\n      else {\n        result += char\n\n        // If we are at the end of the definition, we must be finished.\n        if (char === ')') {\n          valid = true\n          break\n        }\n      }\n\n      continue\n    }\n\n    // Ignore spaces\n    if (char === ' ') {\n      // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\n      if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n        current = ''\n        active = false\n      }\n      continue\n    }\n\n    result += char\n    current += char\n  }\n\n  if (!valid) throw new BaseError('Unable to normalize signature.')\n\n  return result\n}\n","import { ripemd160 as noble_ripemd160 } from '@noble/hashes/ripemd160'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Ripemd160Hash<TTo extends To> =\n  | (TTo extends 'bytes' ? ByteArray : never)\n  | (TTo extends 'hex' ? Hex : never)\n\nexport type Ripemd160ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function ripemd160<TTo extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: TTo,\n): Ripemd160Hash<TTo> {\n  const to = to_ || 'hex'\n  const bytes = noble_ripemd160(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Ripemd160Hash<TTo>\n  return toHex(bytes) as Ripemd160Hash<TTo>\n}\n","import { sha256 as noble_sha256 } from '@noble/hashes/sha256'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Sha256Hash<TTo extends To> =\n  | (TTo extends 'bytes' ? ByteArray : never)\n  | (TTo extends 'hex' ? Hex : never)\n\nexport type Sha256ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function sha256<TTo extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: TTo,\n): Sha256Hash<TTo> {\n  const to = to_ || 'hex'\n  const bytes = noble_sha256(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Sha256Hash<TTo>\n  return toHex(bytes) as Sha256Hash<TTo>\n}\n","export {\n  type IsDeterministicErrorType,\n  type RequestErrorType,\n  isDeterministicError,\n  buildRequest,\n} from './buildRequest.js'\n\nexport {\n  type CcipFetchErrorType,\n  type OffchainLookupErrorType,\n  ccipFetch,\n  offchainLookup,\n  offchainLookupAbiItem,\n  offchainLookupSignature,\n} from './ccip.js'\n\nexport {\n  type AssertCurrentChainErrorType,\n  type AssertCurrentChainParameters,\n  assertCurrentChain,\n} from './chain/assertCurrentChain.js'\nexport { defineChain } from './chain/defineChain.js'\nexport {\n  type ExtractChainErrorType,\n  type ExtractChainParameters,\n  type ExtractChainReturnType,\n  extractChain,\n} from './chain/extractChain.js'\nexport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from './chain/getChainContractAddress.js'\n\nexport { arrayRegex, bytesRegex, integerRegex } from './regex.js'\n\nexport {\n  type GetSocketErrorType,\n  type HttpErrorType,\n  type HttpOptions,\n  type HttpReturnType,\n  type RpcRequest,\n  type RpcResponse,\n  type Socket,\n  type WebSocketAsyncErrorType,\n  type WebSocketAsyncOptions,\n  type WebSocketAsyncReturnType,\n  type WebSocketErrorType,\n  type WebSocketOptions,\n  type WebSocketReturnType,\n  getSocket,\n  rpc,\n} from './rpc.js'\nexport { type StringifyErrorType, stringify } from './stringify.js'\nexport {\n  type DomainSeparatorErrorType,\n  validateTypedData,\n} from './typedData.js'\nexport {\n  type DecodeAbiParametersErrorType,\n  type DecodeAbiParametersReturnType,\n  decodeAbiParameters,\n} from './abi/decodeAbiParameters.js'\nexport {\n  type DecodeErrorResultErrorType,\n  type DecodeErrorResultParameters,\n  type DecodeErrorResultReturnType,\n  decodeErrorResult,\n} from './abi/decodeErrorResult.js'\nexport {\n  type DecodeEventLogErrorType,\n  type DecodeEventLogParameters,\n  type DecodeEventLogReturnType,\n  decodeEventLog,\n} from './abi/decodeEventLog.js'\nexport {\n  type DecodeFunctionDataErrorType,\n  type DecodeFunctionDataParameters,\n  decodeFunctionData,\n} from './abi/decodeFunctionData.js'\nexport {\n  type DecodeFunctionResultErrorType,\n  type DecodeFunctionResultParameters,\n  type DecodeFunctionResultReturnType,\n  decodeFunctionResult,\n} from './abi/decodeFunctionResult.js'\nexport {\n  type EncodeAbiParametersErrorType,\n  type EncodeAbiParametersReturnType,\n  encodeAbiParameters,\n} from './abi/encodeAbiParameters.js'\nexport {\n  type EncodeDeployDataErrorType,\n  type EncodeDeployDataParameters,\n  encodeDeployData,\n} from './abi/encodeDeployData.js'\nexport {\n  type EncodeErrorResultErrorType,\n  type EncodeErrorResultParameters,\n  encodeErrorResult,\n} from './abi/encodeErrorResult.js'\nexport {\n  type EncodeArgErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from './abi/encodeEventTopics.js'\nexport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from './abi/encodeFunctionData.js'\nexport {\n  type EncodeFunctionResultErrorType,\n  type EncodeFunctionResultParameters,\n  encodeFunctionResult,\n} from './abi/encodeFunctionResult.js'\nexport {\n  type GetAbiItemErrorType,\n  type GetAbiItemParameters,\n  getAbiItem,\n} from './abi/getAbiItem.js'\nexport {\n  type ParseAbi,\n  type ParseAbiItem,\n  type ParseAbiParameter,\n  type ParseAbiParameters,\n  parseAbi,\n  parseAbiItem,\n  parseAbiParameter,\n  parseAbiParameters,\n} from 'abitype'\nexport { type EncodePackedErrorType, encodePacked } from './abi/encodePacked.js'\nexport {\n  type FormatAbiItemWithArgsErrorType,\n  formatAbiItemWithArgs,\n} from './abi/formatAbiItemWithArgs.js'\nexport {\n  type FormatAbiItemErrorType,\n  type FormatAbiParamErrorType,\n  type FormatAbiParamsErrorType,\n  formatAbiItem,\n  formatAbiParams,\n} from './abi/formatAbiItem.js'\nexport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../accounts/utils/parseAccount.js'\nexport {\n  type PublicKeyToAddressErrorType,\n  publicKeyToAddress,\n} from '../accounts/utils/publicKeyToAddress.js'\nexport {\n  type GetContractAddressOptions,\n  type GetCreate2AddressErrorType,\n  type GetCreate2AddressOptions,\n  type GetCreateAddressErrorType,\n  type GetCreateAddressOptions,\n  getContractAddress,\n  getCreateAddress,\n  getCreate2Address,\n} from './address/getContractAddress.js'\nexport {\n  type ChecksumAddressErrorType,\n  getAddress,\n} from './address/getAddress.js'\nexport { type IsAddressErrorType, isAddress } from './address/isAddress.js'\nexport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from './address/isAddressEqual.js'\nexport {\n  type ExtractFunctionNameErrorType,\n  type ExtractFunctionParamsErrorType,\n  type ExtractFunctionPartsErrorType,\n  type ExtractFunctionTypeErrorType,\n  extractFunctionName,\n  extractFunctionParams,\n  extractFunctionType,\n  extractFunctionParts,\n} from './contract/extractFunctionParts.js'\nexport {\n  type ConcatBytesErrorType,\n  type ConcatErrorType,\n  type ConcatHexErrorType,\n  concat,\n  concatBytes,\n  concatHex,\n} from './data/concat.js'\nexport { type IsBytesErrorType, isBytes } from './data/isBytes.js'\nexport { type IsHexErrorType, isHex } from './data/isHex.js'\nexport {\n  type PadBytesErrorType,\n  type PadErrorType,\n  type PadHexErrorType,\n  pad,\n  padBytes,\n  padHex,\n} from './data/pad.js'\nexport { type SizeErrorType, size } from './data/size.js'\nexport {\n  type AssertEndOffsetErrorType,\n  type AssertStartOffsetErrorType,\n  type SliceBytesErrorType,\n  type SliceErrorType,\n  type SliceHexErrorType,\n  type SliceReturnType,\n  slice,\n  sliceBytes,\n  sliceHex,\n} from './data/slice.js'\nexport { type TrimErrorType, type TrimReturnType, trim } from './data/trim.js'\nexport {\n  type DefineBlockErrorType,\n  type FormattedBlock,\n  type FormatBlockErrorType,\n  defineBlock,\n  formatBlock,\n} from './formatters/block.js'\nexport {\n  type DefineTransactionErrorType,\n  type FormattedTransaction,\n  type FormatTransactionErrorType,\n  defineTransaction,\n  formatTransaction,\n  transactionType,\n} from './formatters/transaction.js'\nexport { type FormatLogErrorType, formatLog } from './formatters/log.js'\nexport {\n  type DefineTransactionReceiptErrorType,\n  type FormatTransactionReceiptErrorType,\n  type FormattedTransactionReceipt,\n  defineTransactionReceipt,\n} from './formatters/transactionReceipt.js'\nexport {\n  type DefineTransactionRequestErrorType,\n  type FormatTransactionRequestErrorType,\n  type FormattedTransactionRequest,\n  defineTransactionRequest,\n  formatTransactionRequest,\n} from './formatters/transactionRequest.js'\nexport { type ExtractErrorType, extract } from './formatters/extract.js'\nexport {\n  type BytesToRlpErrorType,\n  type HexToRlpErrorType,\n  type ToRlpErrorType,\n  type ToRlpReturnType,\n  toRlp,\n} from './encoding/toRlp.js'\nexport {\n  type BoolToBytesErrorType,\n  type BoolToBytesOpts,\n  type HexToBytesErrorType,\n  type HexToBytesOpts,\n  type NumberToBytesErrorType,\n  type StringToBytesErrorType,\n  type StringToBytesOpts,\n  type ToBytesErrorType,\n  type ToBytesParameters,\n  boolToBytes,\n  toBytes,\n  hexToBytes,\n  numberToBytes,\n  stringToBytes,\n} from './encoding/toBytes.js'\nexport {\n  type BoolToHexErrorType,\n  type BoolToHexOpts,\n  type BytesToHexErrorType,\n  type BytesToHexOpts,\n  type NumberToHexErrorType,\n  type NumberToHexOpts,\n  type StringToHexErrorType,\n  type StringToHexOpts,\n  type ToHexErrorType,\n  type ToHexParameters,\n  boolToHex,\n  bytesToHex,\n  toHex,\n  numberToHex,\n  stringToHex,\n} from './encoding/toHex.js'\nexport {\n  type BytesToBigIntErrorType,\n  type BytesToBigIntOpts,\n  type BytesToBoolErrorType,\n  type BytesToBoolOpts,\n  type BytesToNumberErrorType,\n  type BytesToNumberOpts,\n  type BytesToStringErrorType,\n  type BytesToStringOpts,\n  type FromBytesErrorType,\n  type FromBytesParameters,\n  type FromBytesReturnType,\n  bytesToBigInt,\n  /** @deprecated – use `bytesToBigInt` */\n  bytesToBigInt as bytesToBigint,\n  bytesToBool,\n  bytesToNumber,\n  bytesToString,\n  fromBytes,\n} from './encoding/fromBytes.js'\nexport {\n  type AssertSizeErrorType,\n  type FromHexErrorType,\n  type FromHexParameters,\n  type FromHexReturnType,\n  type HexToBigIntErrorType,\n  type HexToBigIntOpts,\n  type HexToBoolErrorType,\n  type HexToBoolOpts,\n  type HexToNumberErrorType,\n  type HexToNumberOpts,\n  type HexToStringErrorType,\n  type HexToStringOpts,\n  fromHex,\n  hexToBool,\n  hexToBigInt,\n  hexToNumber,\n  hexToString,\n} from './encoding/fromHex.js'\nexport {\n  type FromRlpErrorType,\n  fromRlp,\n} from './encoding/fromRlp.js'\nexport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  containsNodeError,\n  getNodeError,\n} from './errors/getNodeError.js'\nexport {\n  type GetCallErrorReturnType,\n  getCallError,\n} from './errors/getCallError.js'\nexport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from './errors/getContractError.js'\nexport {\n  type GetEstimateGasErrorReturnType,\n  getEstimateGasError,\n} from './errors/getEstimateGasError.js'\nexport {\n  type GetTransactionErrorParameters,\n  type GetTransactionErrorReturnType,\n  getTransactionError,\n} from './errors/getTransactionError.js'\nexport {\n  type DefineFormatterErrorType,\n  defineFormatter,\n} from './formatters/formatter.js'\nexport {\n  type GetEventSelectorErrorType,\n  getEventSelector,\n} from './hash/getEventSelector.js'\nexport {\n  type GetFunctionSelectorErrorType,\n  getFunctionSelector,\n} from './hash/getFunctionSelector.js'\nexport { type IsHashErrorType, isHash } from './hash/isHash.js'\nexport { type Keccak256ErrorType, keccak256 } from './hash/keccak256.js'\nexport { type Sha256ErrorType, sha256 } from './hash/sha256.js'\nexport { type Ripemd160ErrorType, ripemd160 } from './hash/ripemd160.js'\nexport {\n  type HashDomainErrorType,\n  type HashTypedDataParameters,\n  type HashTypedDataReturnType,\n  hashTypedData,\n} from './signature/hashTypedData.js'\nexport {\n  type RecoverAddressErrorType,\n  type RecoverAddressParameters,\n  type RecoverAddressReturnType,\n  recoverAddress,\n} from './signature/recoverAddress.js'\nexport {\n  type RecoverMessageAddressErrorType,\n  type RecoverMessageAddressParameters,\n  type RecoverMessageAddressReturnType,\n  recoverMessageAddress,\n} from './signature/recoverMessageAddress.js'\nexport {\n  type RecoverPublicKeyErrorType,\n  type RecoverPublicKeyParameters,\n  type RecoverPublicKeyReturnType,\n  recoverPublicKey,\n} from './signature/recoverPublicKey.js'\nexport {\n  type RecoverTypedDataAddressErrorType,\n  type RecoverTypedDataAddressParameters,\n  type RecoverTypedDataAddressReturnType,\n  recoverTypedDataAddress,\n} from './signature/recoverTypedDataAddress.js'\nexport {\n  type VerifyMessageErrorType,\n  type VerifyMessageParameters,\n  type VerifyMessageReturnType,\n  verifyMessage,\n} from './signature/verifyMessage.js'\nexport {\n  type VerifyTypedDataErrorType,\n  type VerifyTypedDataParameters,\n  type VerifyTypedDataReturnType,\n  verifyTypedData,\n} from './signature/verifyTypedData.js'\nexport {\n  type HashMessage,\n  type HashMessageErrorType,\n  hashMessage,\n} from './signature/hashMessage.js'\nexport {\n  type GetSerializedTransactionTypeErrorType,\n  type GetSerializedTransactionType,\n  getSerializedTransactionType,\n} from './transaction/getSerializedTransactionType.js'\nexport {\n  type GetTransationTypeErrorType,\n  type GetTransactionType,\n  getTransactionType,\n} from './transaction/getTransactionType.js'\nexport {\n  type AssertRequestErrorType,\n  assertRequest,\n} from './transaction/assertRequest.js'\nexport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionLegacy,\n} from './transaction/assertTransaction.js'\nexport {\n  type ParseTransactionErrorType,\n  parseTransaction,\n} from './transaction/parseTransaction.js'\nexport {\n  /** @deprecated import `prepareTransactionRequest` from `viem/actions` instead. */\n  prepareTransactionRequest,\n} from '../actions/wallet/prepareTransactionRequest.js'\nexport {\n  serializeTransaction,\n  type SerializeTransactionErrorType,\n  type SerializeTransactionFn,\n} from './transaction/serializeTransaction.js'\nexport {\n  type SerializeAccessListErrorType,\n  serializeAccessList,\n} from './transaction/serializeAccessList.js'\nexport { type FormatEtherErrorType, formatEther } from './unit/formatEther.js'\nexport { type FormatGweiErrorType, formatGwei } from './unit/formatGwei.js'\nexport { type FormatUnitsErrorType, formatUnits } from './unit/formatUnits.js'\nexport { type ParseUnitsErrorType, parseUnits } from './unit/parseUnits.js'\nexport { type ParseEtherErrorType, parseEther } from './unit/parseEther.js'\nexport { type ParseGweiErrorType, parseGwei } from './unit/parseGwei.js'\n","import type { ErrorType } from '../errors/utils.js'\nimport type { MaybePromise } from '../types/utils.js'\n\ntype Callback = ((...args: any[]) => any) | undefined\ntype Callbacks = Record<string, Callback>\n\nexport type ObserveErrorType = ErrorType\n\nexport const listenersCache = /*#__PURE__*/ new Map<\n  string,\n  { id: number; fns: Callbacks }[]\n>()\nexport const cleanupCache = /*#__PURE__*/ new Map<string, () => void>()\n\ntype EmitFunction<TCallbacks extends Callbacks> = (\n  emit: TCallbacks,\n) => MaybePromise<void | (() => void)>\n\nlet callbackCount = 0\n\n/**\n * @description Sets up an observer for a given function. If another function\n * is set up under the same observer id, the function will only be called once\n * for both instances of the observer.\n */\nexport function observe<TCallbacks extends Callbacks>(\n  observerId: string,\n  callbacks: TCallbacks,\n  fn: EmitFunction<TCallbacks>,\n) {\n  const callbackId = ++callbackCount\n\n  const getListeners = () => listenersCache.get(observerId) || []\n\n  const unsubscribe = () => {\n    const listeners = getListeners()\n    listenersCache.set(\n      observerId,\n      listeners.filter((cb: any) => cb.id !== callbackId),\n    )\n  }\n\n  const unwatch = () => {\n    const cleanup = cleanupCache.get(observerId)\n    if (getListeners().length === 1 && cleanup) cleanup()\n    unsubscribe()\n  }\n\n  const listeners = getListeners()\n  listenersCache.set(observerId, [\n    ...listeners,\n    { id: callbackId, fns: callbacks },\n  ])\n\n  if (listeners && listeners.length > 0) return unwatch\n\n  const emit: TCallbacks = {} as TCallbacks\n  for (const key in callbacks) {\n    emit[key] = ((\n      ...args: Parameters<NonNullable<TCallbacks[keyof TCallbacks]>>\n    ) => {\n      const listeners = getListeners()\n      if (listeners.length === 0) return\n      for (const listener of listeners) listener.fns[key]?.(...args)\n    }) as TCallbacks[Extract<keyof TCallbacks, string>]\n  }\n\n  const cleanup = fn(emit)\n  if (typeof cleanup === 'function') cleanupCache.set(observerId, cleanup)\n\n  return unwatch\n}\n","import type { ErrorType } from '../errors/utils.js'\nimport { wait } from './wait.js'\n\ntype PollOptions<TData> = {\n  // Whether or not to emit when the polling starts.\n  emitOnBegin?: boolean\n  // The initial wait time (in ms) before polling.\n  initialWaitTime?: (data: TData | void) => Promise<number>\n  // The interval (in ms).\n  interval: number\n}\n\nexport type PollErrorType = ErrorType\n\n/**\n * @description Polls a function at a specified interval.\n */\nexport function poll<TData>(\n  fn: ({ unpoll }: { unpoll: () => void }) => Promise<TData | void>,\n  { emitOnBegin, initialWaitTime, interval }: PollOptions<TData>,\n) {\n  let active = true\n\n  const unwatch = () => (active = false)\n\n  const watch = async () => {\n    let data: TData | void = undefined\n    if (emitOnBegin) data = await fn({ unpoll: unwatch })\n\n    const initialWait = (await initialWaitTime?.(data)) ?? interval\n    await wait(initialWait)\n\n    const poll = async () => {\n      if (!active) return\n      await fn({ unpoll: unwatch })\n      await wait(interval)\n      poll()\n    }\n\n    poll()\n  }\n  watch()\n\n  return unwatch\n}\n","import type { ErrorType } from '../../errors/utils.js'\n\ntype Resolved<TReturnType extends readonly unknown[] = any> = [\n  result: TReturnType[number],\n  results: TReturnType,\n]\n\ntype PendingPromise<TReturnType extends readonly unknown[] = any> = {\n  resolve?: (data: Resolved<TReturnType>) => void\n  reject?: (reason?: unknown) => void\n}\n\ntype SchedulerItem = { args: unknown; pendingPromise: PendingPromise }\n\ntype BatchResultsCompareFn<TResult = unknown> = (\n  a: TResult,\n  b: TResult,\n) => number\n\nexport type CreateBatchSchedulerArguments<\n  TParameters = unknown,\n  TReturnType extends readonly unknown[] = readonly unknown[],\n> = {\n  fn: (args: TParameters[]) => Promise<TReturnType>\n  id: number | string\n  shouldSplitBatch?: (args: TParameters[]) => boolean\n  wait?: number\n  sort?: BatchResultsCompareFn<TReturnType[number]>\n}\n\nexport type CreateBatchSchedulerReturnType<\n  TParameters = unknown,\n  TReturnType extends readonly unknown[] = readonly unknown[],\n> = {\n  flush: () => void\n  schedule: TParameters extends undefined\n    ? (args?: TParameters) => Promise<Resolved<TReturnType>>\n    : (args: TParameters) => Promise<Resolved<TReturnType>>\n}\n\nexport type CreateBatchSchedulerErrorType = ErrorType\n\nconst schedulerCache = /*#__PURE__*/ new Map<number | string, SchedulerItem[]>()\n\nexport function createBatchScheduler<\n  TParameters,\n  TReturnType extends readonly unknown[],\n>({\n  fn,\n  id,\n  shouldSplitBatch,\n  wait = 0,\n  sort,\n}: CreateBatchSchedulerArguments<\n  TParameters,\n  TReturnType\n>): CreateBatchSchedulerReturnType<TParameters, TReturnType> {\n  const exec = async () => {\n    const scheduler = getScheduler()\n    flush()\n\n    const args = scheduler.map(({ args }) => args)\n\n    if (args.length === 0) return\n\n    fn(args as TParameters[])\n      .then((data) => {\n        if (sort && Array.isArray(data)) data.sort(sort)\n        for (let i = 0; i < scheduler.length; i++) {\n          const { pendingPromise } = scheduler[i]\n          pendingPromise.resolve?.([data[i], data])\n        }\n      })\n      .catch((err) => {\n        for (let i = 0; i < scheduler.length; i++) {\n          const { pendingPromise } = scheduler[i]\n          pendingPromise.reject?.(err)\n        }\n      })\n  }\n\n  const flush = () => schedulerCache.delete(id)\n\n  const getBatchedArgs = () =>\n    getScheduler().map(({ args }) => args) as TParameters[]\n\n  const getScheduler = () => schedulerCache.get(id) || []\n\n  const setScheduler = (item: SchedulerItem) =>\n    schedulerCache.set(id, [...getScheduler(), item])\n\n  return {\n    flush,\n    async schedule(args: TParameters) {\n      const pendingPromise: PendingPromise<TReturnType> = {}\n      const promise = new Promise<Resolved<TReturnType>>((resolve, reject) => {\n        pendingPromise.resolve = resolve\n        pendingPromise.reject = reject\n      })\n\n      const split = shouldSplitBatch?.([...getBatchedArgs(), args])\n\n      if (split) exec()\n\n      const hasActiveScheduler = getScheduler().length > 0\n      if (hasActiveScheduler) {\n        setScheduler({ args, pendingPromise })\n        return promise\n      }\n\n      setScheduler({ args, pendingPromise })\n      setTimeout(exec, wait)\n      return promise\n    },\n  } as unknown as CreateBatchSchedulerReturnType<TParameters, TReturnType>\n}\n","import type { ErrorType } from '../../errors/utils.js'\n\nexport const promiseCache = /*#__PURE__*/ new Map()\nexport const responseCache = /*#__PURE__*/ new Map()\n\nexport type GetCacheErrorType = ErrorType\n\nexport function getCache<TData>(cacheKey: string) {\n  const buildCache = <TData>(cacheKey: string, cache: Map<string, TData>) => ({\n    clear: () => cache.delete(cacheKey),\n    get: () => cache.get(cacheKey),\n    set: (data: TData) => cache.set(cacheKey, data),\n  })\n\n  const promise = buildCache<Promise<TData>>(cacheKey, promiseCache)\n  const response = buildCache<{ created: Date; data: TData }>(\n    cacheKey,\n    responseCache,\n  )\n\n  return {\n    clear: () => {\n      promise.clear()\n      response.clear()\n    },\n    promise,\n    response,\n  }\n}\n\nexport type WithCacheParameters = {\n  /** The key to cache the data against. */\n  cacheKey: string\n  /** The time that cached data will remain in memory. Default: Infinity (no expiry) */\n  cacheTime?: number\n}\n\n/**\n * @description Returns the result of a given promise, and caches the result for\n * subsequent invocations against a provided cache key.\n */\nexport async function withCache<TData>(\n  fn: () => Promise<TData>,\n  { cacheKey, cacheTime = Infinity }: WithCacheParameters,\n) {\n  const cache = getCache<TData>(cacheKey)\n\n  // If a response exists in the cache, and it's not expired, return it\n  // and do not invoke the promise.\n  // If the max age is 0, the cache is disabled.\n  const response = cache.response.get()\n  if (response && cacheTime > 0) {\n    const age = new Date().getTime() - response.created.getTime()\n    if (age < cacheTime) return response.data\n  }\n\n  let promise = cache.promise.get()\n  if (!promise) {\n    promise = fn()\n\n    // Store the promise in the cache so that subsequent invocations\n    // will wait for the same promise to resolve (deduping).\n    cache.promise.set(promise)\n  }\n\n  try {\n    const data = await promise\n\n    // Store the response in the cache so that subsequent invocations\n    // will return the same response.\n    cache.response.set({ created: new Date(), data })\n\n    return data\n  } finally {\n    // Clear the promise cache so that subsequent invocations will\n    // invoke the promise again.\n    cache.promise.clear()\n  }\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport { wait } from '../wait.js'\n\nexport type WithRetryErrorType = ErrorType\n\nexport function withRetry<TData>(\n  fn: () => Promise<TData>,\n  {\n    delay: delay_ = 100,\n    retryCount = 2,\n    shouldRetry = () => true,\n  }: {\n    // The delay (in ms) between retries.\n    delay?: ((config: { count: number; error: Error }) => number) | number\n    // The max number of times to retry.\n    retryCount?: number\n    // Whether or not to retry when an error is thrown.\n    shouldRetry?: ({\n      count,\n      error,\n    }: {\n      count: number\n      error: Error\n    }) => Promise<boolean> | boolean\n  } = {},\n) {\n  return new Promise<TData>((resolve, reject) => {\n    const attemptRetry = async ({ count = 0 } = {}) => {\n      const retry = async ({ error }: { error: Error }) => {\n        const delay =\n          typeof delay_ === 'function' ? delay_({ count, error }) : delay_\n        if (delay) await wait(delay)\n        attemptRetry({ count: count + 1 })\n      }\n\n      try {\n        const data = await fn()\n        resolve(data)\n      } catch (err) {\n        if (\n          count < retryCount &&\n          (await shouldRetry({ count, error: err as Error }))\n        )\n          return retry({ error: err as Error })\n        reject(err)\n      }\n    }\n    attemptRetry()\n  })\n}\n","import type { ErrorType } from '../../errors/utils.js'\n\nexport type WithTimeoutErrorType = ErrorType\n\nexport function withTimeout<TData>(\n  fn: ({ signal }: { signal?: AbortController['signal'] }) => Promise<TData>,\n  {\n    errorInstance = new Error('timed out'),\n    timeout,\n    signal,\n  }: {\n    // The error instance to throw when the timeout is reached.\n    errorInstance?: Error\n    // The timeout (in ms).\n    timeout: number\n    // Whether or not the timeout should use an abort signal.\n    signal?: boolean\n  },\n): Promise<TData> {\n  return new Promise((resolve, reject) => {\n    ;(async () => {\n      let timeoutId!: NodeJS.Timeout\n      try {\n        const controller = new AbortController()\n        if (timeout > 0) {\n          timeoutId = setTimeout(() => {\n            if (signal) {\n              controller.abort()\n            } else {\n              reject(errorInstance)\n            }\n          }, timeout)\n        }\n        resolve(await fn({ signal: controller?.signal }))\n      } catch (err) {\n        if ((err as Error).name === 'AbortError') reject(errorInstance)\n        reject(err)\n      } finally {\n        clearTimeout(timeoutId)\n      }\n    })()\n  })\n}\n","export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/\n\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\n\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nexport const integerRegex =\n  /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\n","import { WebSocket } from 'isows'\nimport type { MessageEvent } from 'isows'\n\nimport {\n  HttpRequestError,\n  type HttpRequestErrorType,\n  TimeoutError,\n  type TimeoutErrorType,\n  WebSocketRequestError,\n} from '../errors/request.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport {\n  type CreateBatchSchedulerErrorType,\n  createBatchScheduler,\n} from './promise/createBatchScheduler.js'\nimport {\n  type WithTimeoutErrorType,\n  withTimeout,\n} from './promise/withTimeout.js'\nimport { stringify } from './stringify.js'\n\nlet id = 0\n\ntype SuccessResult<T> = {\n  method?: never\n  result: T\n  error?: never\n}\ntype ErrorResult<T> = {\n  method?: never\n  result?: never\n  error: T\n}\ntype Subscription<TResult, TError> = {\n  method: 'eth_subscription'\n  error?: never\n  result?: never\n  params: {\n    subscription: string\n  } & (\n    | {\n        result: TResult\n        error?: never\n      }\n    | {\n        result?: never\n        error: TError\n      }\n  )\n}\n\nexport type RpcRequest = { method: string; params?: any; id?: number }\n\nexport type RpcResponse<TResult = any, TError = any> = {\n  jsonrpc: `${number}`\n  id: number\n} & (\n  | SuccessResult<TResult>\n  | ErrorResult<TError>\n  | Subscription<TResult, TError>\n)\n\n///////////////////////////////////////////////////\n// HTTP\n\nexport type HttpOptions<TBody extends RpcRequest | RpcRequest[] = RpcRequest> =\n  {\n    // The RPC request body.\n    body: TBody\n    // Request configuration to pass to `fetch`.\n    fetchOptions?: Omit<RequestInit, 'body'>\n    // The timeout (in ms) for the request.\n    timeout?: number\n  }\n\nexport type HttpReturnType<\n  TBody extends RpcRequest | RpcRequest[] = RpcRequest,\n> = TBody extends RpcRequest[] ? RpcResponse[] : RpcResponse\n\nexport type HttpErrorType =\n  | HttpRequestErrorType\n  | TimeoutErrorType\n  | WithTimeoutErrorType\n  | ErrorType\n\nasync function http<TBody extends RpcRequest | RpcRequest[]>(\n  url: string,\n  { body, fetchOptions = {}, timeout = 10_000 }: HttpOptions<TBody>,\n): Promise<HttpReturnType<TBody>> {\n  const { headers, method, signal: signal_ } = fetchOptions\n  try {\n    const response = await withTimeout(\n      async ({ signal }) => {\n        const response = await fetch(url, {\n          ...fetchOptions,\n          body: Array.isArray(body)\n            ? stringify(\n                body.map((body) => ({\n                  jsonrpc: '2.0',\n                  id: body.id ?? id++,\n                  ...body,\n                })),\n              )\n            : stringify({ jsonrpc: '2.0', id: body.id ?? id++, ...body }),\n          headers: {\n            ...headers,\n            'Content-Type': 'application/json',\n          },\n          method: method || 'POST',\n          signal: signal_ || (timeout > 0 ? signal : undefined),\n        })\n        return response\n      },\n      {\n        errorInstance: new TimeoutError({ body, url }),\n        timeout,\n        signal: true,\n      },\n    )\n\n    let data\n    if (response.headers.get('Content-Type')?.startsWith('application/json')) {\n      data = await response.json()\n    } else {\n      data = await response.text()\n    }\n\n    if (!response.ok) {\n      throw new HttpRequestError({\n        body,\n        details: stringify(data.error) || response.statusText,\n        headers: response.headers,\n        status: response.status,\n        url,\n      })\n    }\n\n    return data\n  } catch (err) {\n    if (err instanceof HttpRequestError) throw err\n    if (err instanceof TimeoutError) throw err\n    throw new HttpRequestError({\n      body,\n      details: (err as Error).message,\n      url,\n    })\n  }\n}\n\n///////////////////////////////////////////////////\n// WebSocket\n\ntype Id = string | number\ntype CallbackFn = (message: any) => void\ntype CallbackMap = Map<Id, CallbackFn>\n\nexport type Socket = WebSocket & {\n  requests: CallbackMap\n  subscriptions: CallbackMap\n}\n\nexport type GetSocketErrorType = CreateBatchSchedulerErrorType | ErrorType\n\nexport const socketsCache = /*#__PURE__*/ new Map<string, Socket>()\n\nexport async function getSocket(url: string) {\n  let socket = socketsCache.get(url)\n\n  // If the socket already exists, return it.\n  if (socket) return socket\n\n  const { schedule } = createBatchScheduler<undefined, [Socket]>({\n    id: url,\n    fn: async () => {\n      const webSocket = new WebSocket(url)\n\n      // Set up a cache for incoming \"synchronous\" requests.\n      const requests = new Map<Id, CallbackFn>()\n\n      // Set up a cache for subscriptions (eth_subscribe).\n      const subscriptions = new Map<Id, CallbackFn>()\n\n      const onMessage: (event: MessageEvent) => void = ({ data }) => {\n        const message: RpcResponse = JSON.parse(data as string)\n        const isSubscription = message.method === 'eth_subscription'\n        const id = isSubscription ? message.params.subscription : message.id\n        const cache = isSubscription ? subscriptions : requests\n        const callback = cache.get(id)\n        if (callback) callback({ data })\n        if (!isSubscription) cache.delete(id)\n      }\n      const onClose = () => {\n        socketsCache.delete(url)\n        webSocket.removeEventListener('close', onClose)\n        webSocket.removeEventListener('message', onMessage)\n      }\n\n      // Setup event listeners for RPC & subscription responses.\n      webSocket.addEventListener('close', onClose)\n      webSocket.addEventListener('message', onMessage)\n\n      // Wait for the socket to open.\n      if (webSocket.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve, reject) => {\n          if (!webSocket) return\n          webSocket.onopen = resolve\n          webSocket.onerror = reject\n        })\n      }\n\n      // Create a new socket instance.\n      socket = Object.assign(webSocket, {\n        requests,\n        subscriptions,\n      })\n      socketsCache.set(url, socket)\n\n      return [socket]\n    },\n  })\n\n  const [_, [socket_]] = await schedule()\n  return socket_\n}\n\nexport type WebSocketOptions = {\n  /** The RPC request body. */\n  body: RpcRequest\n  /** The callback to invoke on response. */\n  onResponse?: (message: RpcResponse) => void\n}\n\nexport type WebSocketReturnType = Socket\n\nexport type WebSocketErrorType = WebSocketRequestError | ErrorType\n\nfunction webSocket(\n  socket: Socket,\n  { body, onResponse }: WebSocketOptions,\n): WebSocketReturnType {\n  if (\n    socket.readyState === socket.CLOSED ||\n    socket.readyState === socket.CLOSING\n  )\n    throw new WebSocketRequestError({\n      body,\n      url: socket.url,\n      details: 'Socket is closed.',\n    })\n\n  const id_ = id++\n\n  const callback = ({ data }: { data: any }) => {\n    const message: RpcResponse = JSON.parse(data)\n\n    if (typeof message.id === 'number' && id_ !== message.id) return\n\n    onResponse?.(message)\n\n    // If we are subscribing to a topic, we want to set up a listener for incoming\n    // messages.\n    if (body.method === 'eth_subscribe' && typeof message.result === 'string') {\n      socket.subscriptions.set(message.result, callback)\n    }\n\n    // If we are unsubscribing from a topic, we want to remove the listener.\n    if (body.method === 'eth_unsubscribe') {\n      socket.subscriptions.delete(body.params?.[0])\n    }\n  }\n  socket.requests.set(id_, callback)\n\n  socket.send(JSON.stringify({ jsonrpc: '2.0', ...body, id: id_ }))\n\n  return socket\n}\n\nexport type WebSocketAsyncOptions = {\n  /** The RPC request body. */\n  body: RpcRequest\n  /** The timeout (in ms) for the request. */\n  timeout?: number\n}\n\nexport type WebSocketAsyncReturnType = RpcResponse\n\nexport type WebSocketAsyncErrorType =\n  | WebSocketErrorType\n  | TimeoutErrorType\n  | WithTimeoutErrorType\n  | ErrorType\n\nasync function webSocketAsync(\n  socket: Socket,\n  { body, timeout = 10_000 }: WebSocketAsyncOptions,\n): Promise<WebSocketAsyncReturnType> {\n  return withTimeout(\n    () =>\n      new Promise<RpcResponse>((onResponse) =>\n        rpc.webSocket(socket, {\n          body,\n          onResponse,\n        }),\n      ),\n    {\n      errorInstance: new TimeoutError({ body, url: socket.url }),\n      timeout,\n    },\n  )\n}\n\n///////////////////////////////////////////////////\n\nexport const rpc = {\n  http,\n  webSocket,\n  webSocketAsync,\n}\n","import { secp256k1 } from '@noble/curves/secp256k1'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { CompactSignature, Hex } from '../../types/misc.js'\nimport { type HexToBigIntErrorType, hexToBigInt } from '../encoding/fromHex.js'\n\nexport type CompactSignatureToHexErrorType = HexToBigIntErrorType | ErrorType\n\n/**\n * @description Converts an [EIP-2098 compact signature](https://eips.ethereum.org/EIPS/eip-2098) into hex format.\n *\n * @param signature The compact signature to convert.\n * @returns The compact signature in hex format.\n *\n * @example\n * compactSignatureToHex({\n *   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function compactSignatureToHex({\n  r,\n  yParityAndS,\n}: CompactSignature): Hex {\n  return `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(yParityAndS),\n  ).toCompactHex()}`\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { CompactSignature, Signature } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\nexport type CompactSignatureToSignatureErrorType =\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * @description Converts an [EIP-2098 compact signature](https://eips.ethereum.org/EIPS/eip-2098) into signature format.\n *\n * @param signature The compact signature to convert.\n * @returns The compact signature in signature format.\n *\n * @example\n * compactSignatureToHex({\n *   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * })\n * // {\n * //   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n * //   s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * //   v: 27n\n * // }\n */\nexport function compactSignatureToSignature({\n  r,\n  yParityAndS,\n}: CompactSignature): Signature {\n  const yParityAndS_bytes = hexToBytes(yParityAndS)\n  const v = yParityAndS_bytes[0] & 0x80 ? 28n : 27n\n  const s = yParityAndS_bytes\n  if (v === 28n) s[0] &= 0x7f\n  return { r, s: bytesToHex(s), v }\n}\n","import { presignMessagePrefix } from '../../constants/strings.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport {\n  type StringToBytesErrorType,\n  type ToBytesErrorType,\n  stringToBytes,\n  toBytes,\n} from '../encoding/toBytes.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type HashMessage<TTo extends To> =\n  | (TTo extends 'bytes' ? ByteArray : never)\n  | (TTo extends 'hex' ? Hex : never)\n\nexport type HashMessageErrorType =\n  | ConcatErrorType\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function hashMessage<TTo extends To = 'hex'>(\n  message: SignableMessage,\n  to_?: TTo,\n): HashMessage<TTo> {\n  const messageBytes = (() => {\n    if (typeof message === 'string') return stringToBytes(message)\n    if (message.raw instanceof Uint8Array) return message.raw\n    return toBytes(message.raw)\n  })()\n  const prefixBytes = stringToBytes(\n    `${presignMessagePrefix}${messageBytes.length}`,\n  )\n  return keccak256(concat([prefixBytes, messageBytes]), to_)\n}\n","// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\n\nimport type { AbiParameter, TypedData, TypedDataDomain } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from '../abi/encodeAbiParameters.js'\nimport { concat } from '../data/concat.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type GetTypesForEIP712DomainErrorType,\n  type ValidateTypedDataErrorType,\n  getTypesForEIP712Domain,\n  validateTypedData,\n} from '../typedData.js'\n\ntype MessageTypeProperty = {\n  name: string\n  type: string\n}\n\nexport type HashTypedDataParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n> = TypedDataDefinition<TTypedData, TPrimaryType>\n\nexport type HashTypedDataReturnType = Hex\n\nexport type HashTypedDataErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | HashStructErrorType\n  | ValidateTypedDataErrorType\n  | ErrorType\n\nexport function hashTypedData<\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string = string,\n>({\n  domain: domain_,\n  message,\n  primaryType,\n  types: types_,\n}: HashTypedDataParameters<TTypedData, TPrimaryType>): HashTypedDataReturnType {\n  const domain: TypedDataDomain = typeof domain_ === 'undefined' ? {} : domain_\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\n    ...(types_ as TTypedData),\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types,\n  } as TypedDataDefinition)\n\n  const parts: Hex[] = ['0x1901']\n  if (domain)\n    parts.push(\n      hashDomain({\n        domain,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  if (primaryType !== 'EIP712Domain') {\n    parts.push(\n      hashStruct({\n        data: message,\n        primaryType: primaryType as string,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n  }\n\n  return keccak256(concat(parts))\n}\n\nexport type HashDomainErrorType = HashStructErrorType | ErrorType\n\nexport function hashDomain({\n  domain,\n  types,\n}: {\n  domain: TypedDataDomain\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types,\n  })\n}\n\ntype HashStructErrorType = EncodeDataErrorType | Keccak256ErrorType | ErrorType\n\nfunction hashStruct({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types,\n  })\n  return keccak256(encoded)\n}\n\ntype EncodeDataErrorType =\n  | EncodeAbiParametersErrorType\n  | EncodeFieldErrorType\n  | HashTypeErrorType\n  | ErrorType\n\nfunction encodeData({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encodedTypes: AbiParameter[] = [{ type: 'bytes32' }]\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\n\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name],\n    })\n    encodedTypes.push(type)\n    encodedValues.push(value)\n  }\n\n  return encodeAbiParameters(encodedTypes, encodedValues)\n}\n\ntype HashTypeErrorType =\n  | ToHexErrorType\n  | EncodeTypeErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\nfunction hashType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encodedHashType = toHex(encodeType({ primaryType, types }))\n  return keccak256(encodedHashType)\n}\n\ntype EncodeTypeErrorType = FindTypeDependenciesErrorType\n\nfunction encodeType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  let result = ''\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\n  unsortedDeps.delete(primaryType)\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\n  for (const type of deps) {\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`\n  }\n\n  return result\n}\n\ntype FindTypeDependenciesErrorType = ErrorType\n\nfunction findTypeDependencies(\n  {\n    primaryType: primaryType_,\n    types,\n  }: {\n    primaryType: string\n    types: Record<string, MessageTypeProperty[]>\n  },\n  results: Set<string> = new Set(),\n): Set<string> {\n  const match = primaryType_.match(/^\\w*/u)\n  const primaryType = match?.[0]!\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results\n  }\n\n  results.add(primaryType)\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies({ primaryType: field.type, types }, results)\n  }\n  return results\n}\n\ntype EncodeFieldErrorType =\n  | Keccak256ErrorType\n  | EncodeAbiParametersErrorType\n  | ToHexErrorType\n  | ErrorType\n\nfunction encodeField({\n  types,\n  name,\n  type,\n  value,\n}: {\n  types: Record<string, MessageTypeProperty[]>\n  name: string\n  type: string\n  value: any\n}): [type: AbiParameter, value: any] {\n  if (types[type] !== undefined) {\n    return [\n      { type: 'bytes32' },\n      keccak256(encodeData({ data: value, primaryType: type, types })),\n    ]\n  }\n\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : ''\n    value = `0x${prepend + value.slice(2)}`\n    return [{ type: 'bytes32' }, keccak256(value)]\n  }\n\n  if (type === 'string') return [{ type: 'bytes32' }, keccak256(toHex(value))]\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['))\n    const typeValuePairs = (value as [AbiParameter, any][]).map((item) =>\n      encodeField({\n        name,\n        type: parsedType,\n        types,\n        value: item,\n      }),\n    )\n    return [\n      { type: 'bytes32' },\n      keccak256(\n        encodeAbiParameters(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ]\n  }\n\n  return [{ type }, value]\n}\n","import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { CompactSignature, Hex } from '../../types/misc.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type HexToCompactSignatureErrorType = NumberToHexErrorType | ErrorType\n\n/**\n * @description Parses a hex formatted compact signature into a structured compact signature.\n *\n * @param signatureHex Signature in hex format.\n * @returns The structured signature.\n *\n * @example\n * hexToCompactSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // { r: '0x...', yParityAndS: '0x...' }\n */\nexport function hexToCompactSignature(signatureHex: Hex): CompactSignature {\n  const { r, s } = secp256k1.Signature.fromCompact(signatureHex.slice(2, 130))\n  return {\n    r: numberToHex(r, { size: 32 }),\n    yParityAndS: numberToHex(s, { size: 32 }),\n  }\n}\n","import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type HexToSignatureErrorType = NumberToHexErrorType | ErrorType\n\n/**\n * @description Parses a hex formatted signature into a structured signature.\n *\n * @param signatureHex Signature in hex format.\n * @returns The structured signature.\n *\n * @example\n * hexToSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // { r: '0x...', s: '0x...', v: 28n }\n */\nexport function hexToSignature(signatureHex: Hex): Signature {\n  const { r, s } = secp256k1.Signature.fromCompact(signatureHex.slice(2, 130))\n  const v = BigInt(`0x${signatureHex.slice(130)}`)\n  return { r: numberToHex(r, { size: 32 }), s: numberToHex(s, { size: 32 }), v }\n}\n","import type { Address } from 'abitype'\n\nimport { publicKeyToAddress } from '../../accounts/utils/publicKeyToAddress.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { recoverPublicKey } from './recoverPublicKey.js'\n\nexport type RecoverAddressParameters = {\n  hash: Hex | ByteArray\n  signature: Hex | ByteArray\n}\n\nexport type RecoverAddressReturnType = Address\n\nexport type RecoverAddressErrorType = ErrorType\n\nexport async function recoverAddress({\n  hash,\n  signature,\n}: RecoverAddressParameters): Promise<RecoverAddressReturnType> {\n  return publicKeyToAddress(await recoverPublicKey({ hash: hash, signature }))\n}\n","import type { Address } from 'abitype'\n\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type HashMessageErrorType, hashMessage } from './hashMessage.js'\nimport {\n  type RecoverAddressErrorType,\n  recoverAddress,\n} from './recoverAddress.js'\n\nexport type RecoverMessageAddressParameters = {\n  message: SignableMessage\n  signature: Hex | ByteArray\n}\n\nexport type RecoverMessageAddressReturnType = Address\n\nexport type RecoverMessageAddressErrorType =\n  | HashMessageErrorType\n  | RecoverAddressErrorType\n  | ErrorType\n\nexport async function recoverMessageAddress({\n  message,\n  signature,\n}: RecoverMessageAddressParameters): Promise<RecoverMessageAddressReturnType> {\n  return recoverAddress({ hash: hashMessage(message), signature })\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type HexToNumberErrorType, hexToNumber } from '../encoding/fromHex.js'\nimport { toHex } from '../encoding/toHex.js'\n\nexport type RecoverPublicKeyParameters = {\n  hash: Hex | ByteArray\n  signature: Hex | ByteArray\n}\n\nexport type RecoverPublicKeyReturnType = Hex\n\nexport type RecoverPublicKeyErrorType =\n  | HexToNumberErrorType\n  | IsHexErrorType\n  | ErrorType\n\nexport async function recoverPublicKey({\n  hash,\n  signature,\n}: RecoverPublicKeyParameters): Promise<RecoverPublicKeyReturnType> {\n  const signatureHex = isHex(signature) ? signature : toHex(signature)\n  const hashHex = isHex(hash) ? hash : toHex(hash)\n\n  // Derive v = recoveryId + 27 from end of the signature (27 is added when signing the message)\n  // The recoveryId represents the y-coordinate on the secp256k1 elliptic curve and can have a value [0, 1].\n  let v = hexToNumber(`0x${signatureHex.slice(130)}`)\n  if (v === 0 || v === 1) v += 27\n\n  const { secp256k1 } = await import('@noble/curves/secp256k1')\n  const publicKey = secp256k1.Signature.fromCompact(\n    signatureHex.substring(2, 130),\n  )\n    .addRecoveryBit(v - 27)\n    .recoverPublicKey(hashHex.substring(2))\n    .toHex(false)\n  return `0x${publicKey}`\n}\n","import type { Address, TypedData } from 'abitype'\n\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type HashTypedDataErrorType, hashTypedData } from './hashTypedData.js'\nimport {\n  type RecoverAddressErrorType,\n  recoverAddress,\n} from './recoverAddress.js'\n\nexport type RecoverTypedDataAddressParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n> = TypedDataDefinition<TTypedData, TPrimaryType> & {\n  signature: Hex | ByteArray\n}\n\nexport type RecoverTypedDataAddressReturnType = Address\n\nexport type RecoverTypedDataAddressErrorType =\n  | RecoverAddressErrorType\n  | HashTypedDataErrorType\n  | ErrorType\n\nexport async function recoverTypedDataAddress<\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string = string,\n>({\n  domain,\n  message,\n  primaryType,\n  signature,\n  types,\n}: RecoverTypedDataAddressParameters<\n  TTypedData,\n  TPrimaryType\n>): Promise<RecoverTypedDataAddressReturnType> {\n  return recoverAddress({\n    hash: hashTypedData({\n      domain,\n      message,\n      primaryType,\n      types,\n    } as unknown as RecoverTypedDataAddressParameters),\n    signature,\n  })\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { CompactSignature, Signature } from '../../types/misc.js'\nimport {\n  type BytesToHexErrorType,\n  type HexToBytesErrorType,\n  bytesToHex,\n  hexToBytes,\n} from '../index.js'\n\nexport type SignatureToCompactSignatureErrorType =\n  | HexToBytesErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\n/**\n * @description Converts a signature into an [EIP-2098 compact signature](https://eips.ethereum.org/EIPS/eip-2098).\n *\n * @param signature The signature to convert.\n * @returns The signature in compact format.\n *\n * @example\n * signatureToCompactSignature({\n *   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n *   v: 27n\n * })\n * // {\n * //   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n * //   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'\n * // }\n */\nexport function signatureToCompactSignature(\n  signature: Signature,\n): CompactSignature {\n  const { r, s, v } = signature\n  const yParity = v - 27n\n  let yParityAndS = s\n  if (yParity === 1n) {\n    const bytes = hexToBytes(s)\n    bytes[0] |= 0x80\n    yParityAndS = bytesToHex(bytes)\n  }\n  return { r, yParityAndS }\n}\n","import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport {\n  type HexToBigIntErrorType,\n  hexToBigInt,\n} from '../../utils/encoding/fromHex.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\n\nexport type SignatureToHexErrorType =\n  | HexToBigIntErrorType\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * @description Converts a signature into hex format.\n *\n * @param signature The signature to convert.\n * @returns The signature in hex format.\n *\n * @example\n * signatureToHex({\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   v: 28n\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function signatureToHex({ r, s, v }: Signature): Hex {\n  return `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(s),\n  ).toCompactHex()}${toHex(v).slice(2)}`\n}\n","import type { Address } from 'abitype'\n\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { type GetAddressErrorType, getAddress } from '../address/getAddress.js'\nimport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from '../address/isAddressEqual.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type RecoverMessageAddressErrorType,\n  recoverMessageAddress,\n} from './recoverMessageAddress.js'\n\nexport type VerifyMessageParameters = {\n  /** The address that signed the original message. */\n  address: Address\n  /** The message to be verified. */\n  message: SignableMessage\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray\n}\n\nexport type VerifyMessageReturnType = boolean\n\nexport type VerifyMessageErrorType =\n  | IsAddressEqualErrorType\n  | GetAddressErrorType\n  | RecoverMessageAddressErrorType\n  | ErrorType\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyMessage` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyMessage.html}\n *\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage({\n  address,\n  message,\n  signature,\n}: VerifyMessageParameters): Promise<VerifyMessageReturnType> {\n  return isAddressEqual(\n    getAddress(address),\n    await recoverMessageAddress({ message, signature }),\n  )\n}\n","import type { Address, TypedData } from 'abitype'\n\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport { type GetAddressErrorType, getAddress } from '../address/getAddress.js'\nimport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from '../address/isAddressEqual.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type RecoverTypedDataAddressParameters,\n  recoverTypedDataAddress,\n} from './recoverTypedDataAddress.js'\n\nexport type VerifyTypedDataParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n> = TypedDataDefinition<TTypedData, TPrimaryType> & {\n  /** The address to verify the typed data for. */\n  address: Address\n  /** The signature to verify */\n  signature: Hex | ByteArray\n}\n\nexport type VerifyTypedDataReturnType = boolean\n\nexport type VerifyTypedDataErrorType =\n  | IsAddressEqualErrorType\n  | GetAddressErrorType\n  | RecoverTypedDataAddressParameters\n  | ErrorType\n\n/**\n * Verify that typed data was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyTypedData` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyTypedData.html}\n *\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData<\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string = string,\n>({\n  address,\n  domain,\n  message,\n  primaryType,\n  signature,\n  types,\n}: VerifyTypedDataParameters<\n  TTypedData,\n  TPrimaryType\n>): Promise<VerifyTypedDataReturnType> {\n  return isAddressEqual(\n    getAddress(address),\n    await recoverTypedDataAddress({\n      domain,\n      message,\n      primaryType,\n      signature,\n      types,\n    } as RecoverTypedDataAddressParameters),\n  )\n}\n","import type { ErrorType } from '../errors/utils.js'\n\nexport type StringifyErrorType = ErrorType\n\nexport const stringify: typeof JSON.stringify = (value, replacer, space) =>\n  JSON.stringify(\n    value,\n    (key, value_) => {\n      const value = typeof value_ === 'bigint' ? value_.toString() : value_\n      return typeof replacer === 'function' ? replacer(key, value) : value\n    },\n    space,\n  )\n","import {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport {\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n} from '../../errors/node.js'\nimport {\n  FeeConflictError,\n  type FeeConflictErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport { isAddress } from '../address/isAddress.js'\n\nexport type AssertRequestParameters = Partial<SendTransactionParameters<Chain>>\n\nexport type AssertRequestErrorType =\n  | InvalidAddressErrorType\n  | FeeConflictErrorType\n  | FeeCapTooHighErrorType\n  | ParseAccountErrorType\n  | TipAboveFeeCapErrorType\n  | ErrorType\n\nexport function assertRequest(args: AssertRequestParameters) {\n  const {\n    account: account_,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    to,\n  } = args\n  const account = account_ ? parseAccount(account_) : undefined\n  if (account && !isAddress(account.address))\n    throw new InvalidAddressError({ address: account.address })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (\n    typeof gasPrice !== 'undefined' &&\n    (typeof maxFeePerGas !== 'undefined' ||\n      typeof maxPriorityFeePerGas !== 'undefined')\n  )\n    throw new FeeConflictError()\n\n  if (maxFeePerGas && maxFeePerGas > 2n ** 256n - 1n)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n}\n","import {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport { BaseError, type BaseErrorType } from '../../errors/base.js'\nimport {\n  InvalidChainIdError,\n  type InvalidChainIdErrorType,\n} from '../../errors/chain.js'\nimport {\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n} from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableLegacy,\n} from '../../types/transaction.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\n\nexport type AssertTransactionEIP1559ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | TipAboveFeeCapErrorType\n  | ErrorType\n\nexport function assertTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n) {\n  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } =\n    transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid EIP-1559 Transaction attribute.',\n    )\n  if (maxFeePerGas && maxFeePerGas > 2n ** 256n - 1n)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n}\n\nexport type AssertTransactionEIP2930ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n) {\n  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } =\n    transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > 2n ** 256n - 1n)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n}\n\nexport type AssertTransactionLegacyErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    accessList,\n  } = transaction\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (typeof chainId !== 'undefined' && chainId <= 0)\n    throw new InvalidChainIdError({ chainId })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > 2n ** 256n - 1n)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n  if (accessList)\n    throw new BaseError(\n      '`accessList` is not a valid Legacy Transaction attribute.',\n    )\n}\n","import {\n  InvalidSerializedTransactionTypeError,\n  type InvalidSerializedTransactionTypeErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n} from '../../types/transaction.js'\nimport { type SliceHexErrorType, sliceHex } from '../data/slice.js'\nimport { type HexToNumberErrorType, hexToNumber } from '../encoding/fromHex.js'\n\nexport type GetSerializedTransactionType<\n  TTransactionSerialized extends TransactionSerialized = TransactionSerialized,\n> = TTransactionSerialized extends TransactionSerializedEIP1559\n  ? 'eip1559'\n  : TTransactionSerialized extends TransactionSerializedEIP2930\n    ? 'eip2930'\n    : 'legacy'\n\nexport type GetSerializedTransactionTypeErrorType =\n  | HexToNumberErrorType\n  | InvalidSerializedTransactionTypeErrorType\n  | SliceHexErrorType\n  | ErrorType\n\nexport function getSerializedTransactionType<\n  TSerialized extends TransactionSerialized,\n>(\n  serializedTransaction: TSerialized,\n): GetSerializedTransactionType<TSerialized> {\n  const serializedType = sliceHex(serializedTransaction, 0, 1)\n\n  if (serializedType === '0x02')\n    return 'eip1559' as GetSerializedTransactionType<TSerialized>\n\n  if (serializedType === '0x01')\n    return 'eip2930' as GetSerializedTransactionType<TSerialized>\n\n  if (serializedType !== '0x' && hexToNumber(serializedType) >= 0xc0)\n    return 'legacy' as GetSerializedTransactionType<TSerialized>\n\n  throw new InvalidSerializedTransactionTypeError({ serializedType })\n}\n","import {\n  InvalidSerializableTransactionError,\n  type InvalidSerializableTransactionErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableGeneric,\n  TransactionSerializableLegacy,\n} from '../../types/transaction.js'\n\nexport type GetTransactionType<\n  TTransactionSerializable extends\n    TransactionSerializable = TransactionSerializable,\n> =\n  | (TTransactionSerializable extends TransactionSerializableLegacy\n      ? 'legacy'\n      : never)\n  | (TTransactionSerializable extends TransactionSerializableEIP1559\n      ? 'eip1559'\n      : never)\n  | (TTransactionSerializable extends TransactionSerializableEIP2930\n      ? 'eip2930'\n      : never)\n  | (TTransactionSerializable extends TransactionSerializableGeneric\n      ? TTransactionSerializable['type']\n      : never)\n\nexport type GetTransationTypeErrorType =\n  | InvalidSerializableTransactionErrorType\n  | ErrorType\n\nexport function getTransactionType<\n  TTransactionSerializable extends TransactionSerializable,\n>(\n  transaction: TTransactionSerializable,\n): GetTransactionType<TTransactionSerializable> {\n  if (transaction.type)\n    return transaction.type as GetTransactionType<TTransactionSerializable>\n\n  if (\n    typeof transaction.maxFeePerGas !== 'undefined' ||\n    typeof transaction.maxPriorityFeePerGas !== 'undefined'\n  )\n    return 'eip1559' as GetTransactionType<TTransactionSerializable>\n\n  if (typeof transaction.gasPrice !== 'undefined') {\n    if (typeof transaction.accessList !== 'undefined')\n      return 'eip2930' as GetTransactionType<TTransactionSerializable>\n    return 'legacy' as GetTransactionType<TTransactionSerializable>\n  }\n\n  throw new InvalidSerializableTransactionError({ transaction })\n}\n","import {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport {\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n  InvalidSerializedTransactionError,\n  type InvalidSerializedTransactionErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport type {\n  AccessList,\n  TransactionRequestEIP2930,\n  TransactionRequestLegacy,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionType,\n} from '../../types/transaction.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type PadHexErrorType, padHex } from '../data/pad.js'\nimport { trim } from '../data/trim.js'\nimport {\n  type HexToBigIntErrorType,\n  type HexToNumberErrorType,\n  hexToBigInt,\n  hexToNumber,\n} from '../encoding/fromHex.js'\nimport { type FromRlpErrorType, fromRlp } from '../encoding/fromRlp.js'\nimport type { RecursiveArray } from '../encoding/toRlp.js'\nimport { isHash } from '../hash/isHash.js'\n\nimport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetSerializedTransactionType,\n  type GetSerializedTransactionTypeErrorType,\n  getSerializedTransactionType,\n} from './getSerializedTransactionType.js'\n\nexport type ParseTransactionReturnType<\n  TSerialized extends TransactionSerialized = TransactionSerialized,\n  TType extends TransactionType = GetSerializedTransactionType<TSerialized>,\n> =\n  | (TType extends 'eip1559' ? TransactionSerializableEIP1559 : never)\n  | (TType extends 'eip2930' ? TransactionSerializableEIP2930 : never)\n  | (TType extends 'legacy' ? TransactionSerializableLegacy : never)\n\nexport type ParseTransactionErrorType =\n  | GetSerializedTransactionTypeErrorType\n  | ParseTransactionEIP1559ErrorType\n  | ParseTransactionEIP2930ErrorType\n  | ParseTransactionLegacyErrorType\n\nexport function parseTransaction<TSerialized extends TransactionSerialized>(\n  serializedTransaction: TSerialized,\n): ParseTransactionReturnType<TSerialized> {\n  const type = getSerializedTransactionType(serializedTransaction)\n\n  if (type === 'eip1559')\n    return parseTransactionEIP1559(\n      serializedTransaction as TransactionSerializedEIP1559,\n    ) as ParseTransactionReturnType<TSerialized>\n\n  if (type === 'eip2930')\n    return parseTransactionEIP2930(\n      serializedTransaction as TransactionSerializedEIP2930,\n    ) as ParseTransactionReturnType<TSerialized>\n\n  return parseTransactionLegacy(\n    serializedTransaction,\n  ) as ParseTransactionReturnType<TSerialized>\n}\n\ntype ParseTransactionEIP1559ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | ToTransactionArrayErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ParseEIP155SignatureErrorType\n  | ErrorType\n\nfunction parseTransactionEIP1559(\n  serializedTransaction: TransactionSerializedEIP1559,\n): TransactionSerializableEIP1559 {\n  const transactionArray = toTransactionArray(serializedTransaction)\n\n  const [\n    chainId,\n    nonce,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    v,\n    r,\n    s,\n  ] = transactionArray\n\n  if (!(transactionArray.length === 9 || transactionArray.length === 12))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        chainId,\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 9\n          ? {\n              v,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'eip1559',\n    })\n\n  const transaction: TransactionSerializableEIP1559 = {\n    chainId: hexToNumber(chainId as Hex),\n    type: 'eip1559',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(maxFeePerGas) && maxFeePerGas !== '0x')\n    transaction.maxFeePerGas = hexToBigInt(maxFeePerGas)\n  if (isHex(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n    transaction.maxPriorityFeePerGas = hexToBigInt(maxPriorityFeePerGas)\n  if (accessList.length !== 0 && accessList !== '0x')\n    transaction.accessList = parseAccessList(accessList as RecursiveArray<Hex>)\n\n  assertTransactionEIP1559(transaction)\n\n  const signature =\n    transactionArray.length === 12\n      ? parseEIP155Signature(transactionArray)\n      : undefined\n\n  return { ...signature, ...transaction }\n}\n\ntype ParseTransactionEIP2930ErrorType =\n  | AssertTransactionEIP2930ErrorType\n  | ToTransactionArrayErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ParseEIP155SignatureErrorType\n  | ErrorType\n\nfunction parseTransactionEIP2930(\n  serializedTransaction: TransactionSerializedEIP2930,\n): Omit<TransactionRequestEIP2930, 'from'> &\n  ({ chainId: number } | ({ chainId: number } & Signature)) {\n  const transactionArray = toTransactionArray(serializedTransaction)\n\n  const [chainId, nonce, gasPrice, gas, to, value, data, accessList, v, r, s] =\n    transactionArray\n\n  if (!(transactionArray.length === 8 || transactionArray.length === 11))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        chainId,\n        nonce,\n        gasPrice,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 8\n          ? {\n              v,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'eip2930',\n    })\n\n  const transaction: TransactionSerializableEIP2930 = {\n    chainId: hexToNumber(chainId as Hex),\n    type: 'eip2930',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(gasPrice) && gasPrice !== '0x')\n    transaction.gasPrice = hexToBigInt(gasPrice)\n  if (accessList.length !== 0 && accessList !== '0x')\n    transaction.accessList = parseAccessList(accessList as RecursiveArray<Hex>)\n\n  assertTransactionEIP2930(transaction)\n\n  const signature =\n    transactionArray.length === 11\n      ? parseEIP155Signature(transactionArray)\n      : undefined\n\n  return { ...signature, ...transaction }\n}\n\ntype ParseTransactionLegacyErrorType =\n  | AssertTransactionLegacyErrorType\n  | FromRlpErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ErrorType\n\nfunction parseTransactionLegacy(\n  serializedTransaction: Hex,\n): Omit<TransactionRequestLegacy, 'from'> &\n  ({ chainId?: number } | ({ chainId: number } & Signature)) {\n  const transactionArray = fromRlp(serializedTransaction, 'hex')\n\n  const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] =\n    transactionArray\n\n  if (!(transactionArray.length === 6 || transactionArray.length === 9))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        nonce,\n        gasPrice,\n        gas,\n        to,\n        value,\n        data,\n        ...(transactionArray.length > 6\n          ? {\n              v: chainIdOrV_,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'legacy',\n    })\n\n  const transaction: TransactionSerializableLegacy = {\n    type: 'legacy',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(gasPrice) && gasPrice !== '0x')\n    transaction.gasPrice = hexToBigInt(gasPrice)\n\n  assertTransactionLegacy(transaction)\n\n  if (transactionArray.length === 6) return transaction\n\n  const chainIdOrV =\n    isHex(chainIdOrV_) && chainIdOrV_ !== '0x'\n      ? hexToBigInt(chainIdOrV_ as Hex)\n      : 0n\n\n  if (s === '0x' && r === '0x') {\n    if (chainIdOrV > 0) transaction.chainId = Number(chainIdOrV)\n    return transaction\n  }\n\n  const v = chainIdOrV\n\n  const chainId: number | undefined = Number((v - 35n) / 2n)\n  if (chainId > 0) transaction.chainId = chainId\n  else if (v !== 27n && v !== 28n) throw new InvalidLegacyVError({ v })\n\n  transaction.v = v\n  transaction.s = s as Hex\n  transaction.r = r as Hex\n\n  return transaction\n}\n\nexport type ToTransactionArrayErrorType = FromRlpErrorType | ErrorType\n\nexport function toTransactionArray(serializedTransaction: string) {\n  return fromRlp(`0x${serializedTransaction.slice(4)}` as Hex, 'hex')\n}\n\nexport type ParseAccessListErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nexport function parseAccessList(accessList_: RecursiveArray<Hex>): AccessList {\n  const accessList: AccessList = []\n  for (let i = 0; i < accessList_.length; i++) {\n    const [address, storageKeys] = accessList_[i] as [Hex, Hex[]]\n\n    if (!isAddress(address)) throw new InvalidAddressError({ address })\n\n    accessList.push({\n      address: address,\n      storageKeys: storageKeys.map((key) => (isHash(key) ? key : trim(key))),\n    })\n  }\n  return accessList\n}\n\ntype ParseEIP155SignatureErrorType =\n  | HexToBigIntErrorType\n  | PadHexErrorType\n  | ErrorType\n\nfunction parseEIP155Signature(\n  transactionArray: RecursiveArray<Hex>,\n): Signature & { yParity: number } {\n  const signature = transactionArray.slice(-3)\n  const v =\n    signature[0] === '0x' || hexToBigInt(signature[0] as Hex) === 0n ? 27n : 28n\n  return {\n    r: padHex(signature[1] as Hex, { size: 32 }),\n    s: padHex(signature[2] as Hex, { size: 32 }),\n    v,\n    yParity: v === 27n ? 0 : 1,\n  }\n}\n","import {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport {\n  InvalidStorageKeySizeError,\n  type InvalidStorageKeySizeErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { AccessList } from '../../types/transaction.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { type RecursiveArray } from '../encoding/toRlp.js'\n\nexport type SerializeAccessListErrorType =\n  | InvalidStorageKeySizeErrorType\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\n/*\n * Serialize an  EIP-2930 access list\n * @remarks\n * Use to create a transaction serializer with support for EIP-2930 access lists\n *\n * @param accessList - Array of objects of address and arrays of Storage Keys\n * @throws InvalidAddressError, InvalidStorageKeySizeError\n * @returns Array of hex strings\n */\nexport function serializeAccessList(\n  accessList?: AccessList,\n): RecursiveArray<Hex> {\n  if (!accessList || accessList.length === 0) return []\n\n  const serializedAccessList: RecursiveArray<Hex> = []\n  for (let i = 0; i < accessList.length; i++) {\n    const { address, storageKeys } = accessList[i]\n\n    for (let j = 0; j < storageKeys.length; j++) {\n      if (storageKeys[j].length - 2 !== 64) {\n        throw new InvalidStorageKeySizeError({ storageKey: storageKeys[j] })\n      }\n    }\n\n    if (!isAddress(address)) {\n      throw new InvalidAddressError({ address })\n    }\n\n    serializedAccessList.push([address, storageKeys])\n  }\n  return serializedAccessList\n}\n","import {\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Signature } from '../../types/misc.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedLegacy,\n  TransactionType,\n} from '../../types/transaction.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { trim } from '../data/trim.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\n\nimport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetTransactionType,\n  type GetTransationTypeErrorType,\n  getTransactionType,\n} from './getTransactionType.js'\nimport {\n  type SerializeAccessListErrorType,\n  serializeAccessList,\n} from './serializeAccessList.js'\n\nexport type SerializedTransactionReturnType<\n  TTransactionSerializable extends\n    TransactionSerializable = TransactionSerializable,\n  TTransactionType extends\n    TransactionType = GetTransactionType<TTransactionSerializable>,\n> = TransactionSerialized<TTransactionType>\n\nexport type SerializeTransactionFn<\n  TTransactionSerializable extends\n    TransactionSerializable = TransactionSerializable,\n> = typeof serializeTransaction<TTransactionSerializable>\n\nexport type SerializeTransactionErrorType =\n  | GetTransationTypeErrorType\n  | SerializeTransactionEIP1559ErrorType\n  | SerializeTransactionEIP2930ErrorType\n  | SerializeTransactionLegacyErrorType\n  | ErrorType\n\nexport function serializeTransaction<\n  TTransactionSerializable extends TransactionSerializable,\n>(\n  transaction: TTransactionSerializable,\n  signature?: Signature,\n): SerializedTransactionReturnType<TTransactionSerializable> {\n  const type = getTransactionType(transaction) as GetTransactionType\n\n  if (type === 'eip1559')\n    return serializeTransactionEIP1559(\n      transaction as TransactionSerializableEIP1559,\n      signature,\n    ) as SerializedTransactionReturnType<TTransactionSerializable>\n\n  if (type === 'eip2930')\n    return serializeTransactionEIP2930(\n      transaction as TransactionSerializableEIP2930,\n      signature,\n    ) as SerializedTransactionReturnType<TTransactionSerializable>\n\n  return serializeTransactionLegacy(\n    transaction as TransactionSerializableLegacy,\n    signature,\n  ) as SerializedTransactionReturnType<TTransactionSerializable>\n}\n\ntype SerializeTransactionEIP1559ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n  signature?: Signature,\n): TransactionSerializedEIP1559 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP1559(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n  ]\n\n  if (signature) {\n    const yParity = (() => {\n      if (signature.v === 0n) return '0x'\n      if (signature.v === 1n) return toHex(1)\n\n      return signature.v === 27n ? '0x' : toHex(1)\n    })()\n    serializedTransaction.push(yParity, trim(signature.r), trim(signature.s))\n  }\n\n  return concatHex([\n    '0x02',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP1559\n}\n\ntype SerializeTransactionEIP2930ErrorType =\n  | AssertTransactionEIP2930ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n  signature?: Signature,\n): TransactionSerializedEIP2930 {\n  const { chainId, gas, data, nonce, to, value, accessList, gasPrice } =\n    transaction\n\n  assertTransactionEIP2930(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n  ]\n\n  if (signature) {\n    const yParity = (() => {\n      if (signature.v === 0n) return '0x'\n      if (signature.v === 1n) return toHex(1)\n\n      return signature.v === 27n ? '0x' : toHex(1)\n    })()\n    serializedTransaction.push(yParity, trim(signature.r), trim(signature.s))\n  }\n\n  return concatHex([\n    '0x01',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP2930\n}\n\ntype SerializeTransactionLegacyErrorType =\n  | AssertTransactionLegacyErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nfunction serializeTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n  signature?: Signature,\n): TransactionSerializedLegacy {\n  const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction\n\n  assertTransactionLegacy(transaction)\n\n  let serializedTransaction = [\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n  ]\n\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (explicit chainId)\n      if (chainId > 0)\n        return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n)\n\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n\n        if (inferredChainId > 0) return signature.v\n        return 27n + (signature.v === 35n ? 0n : 1n)\n      }\n\n      // Pre-EIP-155 (no chainId)\n      const v = 27n + (signature.v === 27n ? 0n : 1n)\n      if (signature.v !== v) throw new InvalidLegacyVError({ v: signature.v })\n      return v\n    })()\n\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(v),\n      signature.r,\n      signature.s,\n    ]\n  } else if (chainId > 0) {\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(chainId),\n      '0x',\n      '0x',\n    ]\n  }\n\n  return toRlp(serializedTransaction)\n}\n","import type {\n  TypedData,\n  TypedDataDomain,\n  TypedDataParameter,\n  TypedDataType,\n} from 'abitype'\n\nimport { BytesSizeMismatchError } from '../errors/abi.js'\nimport { InvalidAddressError } from '../errors/address.js'\nimport type { Hex } from '../types/misc.js'\nimport type { TypedDataDefinition } from '../types/typedData.js'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport { type IsAddressErrorType, isAddress } from './address/isAddress.js'\nimport { type SizeErrorType, size } from './data/size.js'\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\nimport { bytesRegex, integerRegex } from './regex.js'\nimport {\n  type HashDomainErrorType,\n  hashDomain,\n} from './signature/hashTypedData.js'\n\nexport type ValidateTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function validateTypedData<\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string = string,\n>({\n  domain,\n  message,\n  primaryType,\n  types: types_,\n}: TypedDataDefinition<TTypedData, TPrimaryType>) {\n  const types = types_ as TypedData\n\n  const validateData = (\n    struct: readonly TypedDataParameter[],\n    value_: Record<string, unknown>,\n  ) => {\n    for (const param of struct) {\n      const { name, type: type_ } = param\n      const type = type_ as TypedDataType\n      const value = value_[name]\n\n      const integerMatch = type.match(integerRegex)\n      if (\n        integerMatch &&\n        (typeof value === 'number' || typeof value === 'bigint')\n      ) {\n        const [_type, base, size_] = integerMatch\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        numberToHex(value, {\n          signed: base === 'int',\n          size: parseInt(size_) / 8,\n        })\n      }\n\n      if (type === 'address' && typeof value === 'string' && !isAddress(value))\n        throw new InvalidAddressError({ address: value })\n\n      const bytesMatch = type.match(bytesRegex)\n      if (bytesMatch) {\n        const [_type, size_] = bytesMatch\n        if (size_ && size(value as Hex) !== parseInt(size_))\n          throw new BytesSizeMismatchError({\n            expectedSize: parseInt(size_),\n            givenSize: size(value as Hex),\n          })\n      }\n\n      const struct = types[type]\n      if (struct) validateData(struct, value as Record<string, unknown>)\n    }\n  }\n\n  // Validate domain types.\n  if (types.EIP712Domain && domain) validateData(types.EIP712Domain, domain)\n\n  if (primaryType !== 'EIP712Domain') {\n    // Validate message types.\n    const type = types[primaryType]\n    validateData(type, message as Record<string, unknown>)\n  }\n}\n\nexport type GetTypesForEIP712DomainErrorType = ErrorType\n\nexport function getTypesForEIP712Domain({\n  domain,\n}: { domain?: TypedDataDomain }): TypedDataParameter[] {\n  return [\n    typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n    domain?.version && { name: 'version', type: 'string' },\n    typeof domain?.chainId === 'number' && {\n      name: 'chainId',\n      type: 'uint256',\n    },\n    domain?.verifyingContract && {\n      name: 'verifyingContract',\n      type: 'address',\n    },\n    domain?.salt && { name: 'salt', type: 'bytes32' },\n  ].filter(Boolean) as TypedDataParameter[]\n}\n\nexport type DomainSeparatorErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | ErrorType\n\nexport function domainSeparator({ domain }: { domain: TypedDataDomain }): Hex {\n  return hashDomain({\n    domain,\n    types: {\n      EIP712Domain: getTypesForEIP712Domain({ domain }),\n    },\n  })\n}\n","const size = 256\nlet index = size\nlet buffer: string\n\nexport function uid(length = 11) {\n  if (!buffer || index + length > size * 2) {\n    buffer = ''\n    index = 0\n    for (let i = 0; i < size; i++) {\n      buffer += ((256 + Math.random() * 256) | 0).toString(16).substring(1)\n    }\n  }\n  return buffer.substring(index, index++ + length)\n}\n","import { etherUnits } from '../../constants/unit.js'\n\nimport { type FormatUnitsErrorType, formatUnits } from './formatUnits.js'\n\nexport type FormatEtherErrorType = FormatUnitsErrorType\n\n/**\n * Converts numerical wei to a string representation of ether.\n *\n * - Docs: https://viem.sh/docs/utilities/formatEther.html\n *\n * @example\n * import { formatEther } from 'viem'\n *\n * formatEther(1000000000000000000n)\n * // '1'\n */\nexport function formatEther(wei: bigint, unit: 'wei' | 'gwei' = 'wei') {\n  return formatUnits(wei, etherUnits[unit])\n}\n","import { gweiUnits } from '../../constants/unit.js'\n\nimport { type FormatUnitsErrorType, formatUnits } from './formatUnits.js'\n\nexport type FormatGweiErrorType = FormatUnitsErrorType\n\n/**\n * Converts numerical wei to a string representation of gwei.\n *\n * - Docs: https://viem.sh/docs/utilities/formatGwei.html\n *\n * @example\n * import { formatGwei } from 'viem'\n *\n * formatGwei(1000000000n)\n * // '1'\n */\nexport function formatGwei(wei: bigint, unit: 'wei' = 'wei') {\n  return formatUnits(wei, gweiUnits[unit])\n}\n","import type { ErrorType } from '../../errors/utils.js'\n\nexport type FormatUnitsErrorType = ErrorType\n\n/**\n *  Divides a number by a given exponent of base 10 (10exponent), and formats it into a string representation of the number..\n *\n * - Docs: https://viem.sh/docs/utilities/formatUnits.html\n *\n * @example\n * import { formatUnits } from 'viem'\n *\n * formatUnits(420000000000n, 9)\n * // '420'\n */\nexport function formatUnits(value: bigint, decimals: number) {\n  let display = value.toString()\n\n  const negative = display.startsWith('-')\n  if (negative) display = display.slice(1)\n\n  display = display.padStart(decimals, '0')\n\n  let [integer, fraction] = [\n    display.slice(0, display.length - decimals),\n    display.slice(display.length - decimals),\n  ]\n  fraction = fraction.replace(/(0+)$/, '')\n  return `${negative ? '-' : ''}${integer || '0'}${\n    fraction ? `.${fraction}` : ''\n  }`\n}\n","import { etherUnits } from '../../constants/unit.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nimport { type ParseUnitsErrorType, parseUnits } from './parseUnits.js'\n\nexport type ParseEtherErrorType = ParseUnitsErrorType | ErrorType\n\n/**\n * Converts a string representation of ether to numerical wei.\n *\n * - Docs: https://viem.sh/docs/utilities/parseEther.html\n *\n * @example\n * import { parseEther } from 'viem'\n *\n * parseEther('420')\n * // 420000000000000000000n\n */\nexport function parseEther(ether: string, unit: 'wei' | 'gwei' = 'wei') {\n  return parseUnits(ether, etherUnits[unit])\n}\n","import { gweiUnits } from '../../constants/unit.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nimport { type ParseUnitsErrorType, parseUnits } from './parseUnits.js'\n\nexport type ParseGweiErrorType = ParseUnitsErrorType | ErrorType\n\n/**\n * Converts a string representation of gwei to numerical wei.\n *\n * - Docs: https://viem.sh/docs/utilities/parseGwei.html\n *\n * @example\n * import { parseGwei } from 'viem'\n *\n * parseGwei('420')\n * // 420000000000n\n */\nexport function parseGwei(ether: string, unit: 'wei' = 'wei') {\n  return parseUnits(ether, gweiUnits[unit])\n}\n","import type { ErrorType } from '../../errors/utils.js'\n\nexport type ParseUnitsErrorType = ErrorType\n\n/**\n * Multiplies a string representation of a number by a given exponent of base 10 (10exponent).\n *\n * - Docs: https://viem.sh/docs/utilities/parseUnits.html\n *\n * @example\n * import { parseUnits } from 'viem'\n *\n * parseUnits('420', 9)\n * // 420000000000n\n */\nexport function parseUnits(value: string, decimals: number) {\n  let [integer, fraction = '0'] = value.split('.')\n\n  const negative = integer.startsWith('-')\n  if (negative) integer = integer.slice(1)\n\n  // trim leading zeros.\n  fraction = fraction.replace(/(0+)$/, '')\n\n  // round off if the fraction is larger than the number of decimals.\n  if (decimals === 0) {\n    if (Math.round(Number(`.${fraction}`)) === 1)\n      integer = `${BigInt(integer) + 1n}`\n    fraction = ''\n  } else if (fraction.length > decimals) {\n    const [left, unit, right] = [\n      fraction.slice(0, decimals - 1),\n      fraction.slice(decimals - 1, decimals),\n      fraction.slice(decimals),\n    ]\n\n    const rounded = Math.round(Number(`${unit}.${right}`))\n    if (rounded > 9)\n      fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0')\n    else fraction = `${left}${rounded}`\n\n    if (fraction.length > decimals) {\n      fraction = fraction.slice(1)\n      integer = `${BigInt(integer) + 1n}`\n    }\n\n    fraction = fraction.slice(0, decimals)\n  } else {\n    fraction = fraction.padEnd(decimals, '0')\n  }\n\n  return BigInt(`${negative ? '-' : ''}${integer}${fraction}`)\n}\n","export async function wait(time: number) {\n  return new Promise((res) => setTimeout(res, time))\n}\n","import { getNativeWebSocket } from \"./utils.js\";\n\nexport const WebSocket = getNativeWebSocket();\n\ntype MessageEvent_ = MessageEvent;\nexport type { MessageEvent_ as MessageEvent };\n","export function getNativeWebSocket() {\n  if (typeof WebSocket !== \"undefined\") return WebSocket;\n  if (typeof global.WebSocket !== \"undefined\") return global.WebSocket;\n  if (typeof window.WebSocket !== \"undefined\") return window.WebSocket;\n  if (typeof self.WebSocket !== \"undefined\") return self.WebSocket;\n  throw new Error(\"`WebSocket` is not supported in this environment\");\n}\n"],"names":["messageFormatter_1","require","exports","constructor","allowedOrigins","arguments","length","undefined","debugMode","callbacks","Map","isServer","window","isValidMessage","_ref","origin","data","source","emptyOrMalformed","sentFromParentEl","this","parent","allowedSDKVersion","version","parseInt","split","validOrigin","Array","isArray","find","regExp","test","logIncomingMessage","msg","console","info","concat","onParentMessage","handleIncomingMessage","payload","id","cb","get","delete","send","method","params","request","MessageFormatter","makeRequest","Error","postMessage","Promise","resolve","reject","set","response","success","error","addEventListener","__exportStar","utils_1","utils_2","generateRequestId","env","sdkVersion","getSDKVersion","makeResponse","makeErrorResponse","Methods","RestrictedMethods","dec2hex","dec","toString","padStart","len","arr","Uint8Array","crypto","getRandomValues","from","join","generateId","Date","getTime","wallet_1","permissions_1","hasPermission","required","permissions","some","permission","parentCapability","requirePermission","_","propertyKey","descriptor","originalMethod","value","async","wallet","Wallet","communicator","currentPermissions","getPermissions","requestPermissions","PermissionsError","PERMISSIONS_REQUEST_REJECTED","apply","eth_call","eth_gasPrice","eth_getLogs","eth_getBalance","eth_getCode","eth_getBlockByHash","eth_getBlockByNumber","eth_getStorageAt","eth_getTransactionByHash","eth_getTransactionReceipt","eth_getTransactionCount","eth_estimateGas","safe_setSettings","constants_1","methods_1","inputFormatters","defaultBlockParam","returnFullTxObjectParam","blockNumberToHex","arg","Number","isInteger","call","buildRequest","RPC_CALLS","formatters","getBalance","getCode","getStorageAt","getPastLogs","getBlockByHash","getBlockByNumber","getTransactionByHash","getTransactionReceipt","getTransactionCount","getGasPrice","getEstimateGas","transaction","setSafeSettings","args","forEach","formatter","i","rpcCall","sdk_1","__importDefault","default","Object","enumerable","viem_1","signatures_1","types_1","requirePermissions_1","Safe","getChainInfo","getInfo","getSafeInfo","experimental_getBalances","currency","getSafeBalances","check1271Signature","messageHash","signature","safeInfo","encodedIsValidSignatureCall","encodeFunctionData","abi","constant","inputs","name","type","outputs","payable","stateMutability","functionName","to","safeAddress","slice","toLowerCase","MAGIC_VALUE","err","check1271SignatureBytes","MAGIC_VALUE_BYTES","calculateMessageHash","message","hashMessage","calculateTypedMessageHash","typedMessage","chainId","domain","toNumber","primaryType","fields","values","types","primaryTypes","keys","filter","typeName","every","dataTypes","replace","hashTypedData","assign","verifyingContract","salt","getOffChainSignature","isMessageSigned","check","isMessageHashSigned","isObjectEIP712TypedData","checks","bind","getEnvironmentInfo","requestAddressBook","__decorate","communication_1","txs_1","eth_1","safe_1","opts","allowedDomains","debug","eth","Eth","txs","TXs","safe","getBySafeTxHash","safeTxHash","getTxBySafeTxHash","signMessage","messagePayload","signTypedMessage","typedData","sendTransactions","safe_gateway_typescript_sdk_1","Operation","TokenType","TransactionStatus","TransferDirection","code","super","setPrototypeOf","prototype","obj","package_json_1","wallet_getPermissions","isPermissionRequestValid","wallet_requestPermissions","_a","pr","includes","hmac_1","weierstrass_js_1","getHash","hash","hmac","key","_len","msgs","_key","concatBytes","randomBytes","curveDef","defHash","create","weierstrass","freeze","modular_js_1","utils_js_1","_0n","BigInt","_1n","c","bits","constTimeNegate","condition","item","neg","negate","W","windows","Math","ceil","windowSize","unsafeLadder","elm","n","p","ZERO","d","add","double","precomputeWindow","points","base","push","wNAF","precomputes","f","BASE","mask","maxNumber","shiftBy","offset","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","P","precomputesMap","transform","_WINDOW_SIZE","comp","curve","validateField","Fp","validateObject","h","Gx","Gy","nBitLength","nByteLength","nLength","ORDER","os2ip","bytesToNumberBE","i2osp","res","fill","strxor","a","b","isBytes","isNum","isSafeInteger","expand_message_xmd","DST","lenInBytes","H","utf8ToBytes","outputLen","b_in_bytes","blockLen","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","expand_message_xof","k","dkLen","update","digest","hash_to_field","count","options","m","expand","_DST","dst","validateDST","log2p","L","len_in_bytes","prb","u","e","j","elm_offset","tv","subarray","mod","field","map","COEFF","reverse","x","y","xNum","xDen","yNum","yDen","val","reduce","acc","mul","div","Point","mapToCurve","def","hashToCurve","u0","fromAffine","u1","clearCofactor","assertValidity","encodeToCurve","encodeDST","_2n","_3n","_4n","_5n","_8n","result","pow","num","power","modulo","invert","number","v","q","r","tonelliShanks","legendreC","Q","S","Z","p1div4","root","eql","sqr","Q1div2","ONE","g","t2","ge","FpSqrt","c1","n2","nv","sub","isNegativeLE","FIELD_FIELDS","FpPow","FpInvertBatch","nums","tmp","lastMultiplied","is0","inverted","inv","reduceRight","_nBitLength","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","MASK","BYTES","BITS","lhs","rhs","legendreConst","bitLen","isLE","redef","sqrtP","bitMask","isValid","isOdd","sqrN","addN","subN","mulN","sqrt","invertBatch","lst","cmov","toBytes","numberToBytesLE","numberToBytesBE","fromBytes","bytes","bytesToNumberLE","groupOrder","hashLen","ensureBytes","minLen","fieldLen","reduced","u8a","hexes","bytesToHex","hex","numberToHexUnpadded","hexToNumber","hexToBytes","array","hexByte","byte","isNaN","arrays","sum","pad","title","expectedLength","b1","b2","str","TextEncoder","encode","pos","bitSet","u8n","u8fr","qByteLen","hmacFn","reset","_len2","_key2","reseed","seed","gen","out","sl","genUntil","pred","validatorFns","bigint","function","boolean","string","stringOrUint8Array","object","validators","optValidators","checkField","fieldName","isOptional","checkVal","String","entries","ut","curve_js_1","b2n","h2b","Err","_parseInt","E","DER","l","toSig","sBytes","s","rBytesLeft","hexFromSig","sig","shl","rhl","rl","weierstrassPoints","CURVE","validateBasic","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","lengths","pointPrecomputes","assertPrjPoint","other","px","py","pz","normalizeZ","toInv","fromHex","fromPrivateKey","privateKey","multiply","_setWindowSize","left","right","hasEvenY","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wnaf","multiplyUnsafe","I","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f1p","f2p","multiplyAndAddUnsafe","G","iz","z","ax","ay","zz","cofactor","toRawBytes","isCompressed","toHex","_bits","ProjectivePoint","SWUFpSqrtRatio","o","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","c7","sqrtRatio","tv1","tv2","tv3","tv5","tv4","isQR","tvv5","e1","y1","y2","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","mapHashToField","precompute","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","prehash","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","C","createHmacDrbg","drbg","verify","publicKey","_Point$BASE$multiplyA","sg","_sig","derError","is","A","B","tv6","sha256_1","hash_to_curve_js_1","_shortw_utils_js_1","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","pow2","b9","b11","b22","b44","b88","b176","b220","b223","Field","createCurve","a1","a2","POW_2_128","sha256","fe","TAGGED_HASH_PREFIXES","taggedHash","tag","tagP","tagH","charCodeAt","messages","pointToBytes","numTo32b","modP","secp256k1","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrGetPublicKey","schnorrSign","auxRand","t","rand","k_","rx","schnorrVerify","pub","isoMap","isogenyMap","mapSWU","mapToCurveSimpleSWU","htf","createHasher","scalars","bool","exists","instance","checkFinished","destroyed","finished","output","min","assert","_assert_js_1","SHA2","Hash","padOffset","buffer","view","createView","take","process","dataView","roundClean","digestInto","byteOffset","setBigUint64","_32n","_u32_max","wh","wl","setUint32","oview","outLen","state","destroy","_cloneInto","U32_MASK64","fromBig","le","Ah","Uint32Array","Al","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","globalThis","HMAC","iHash","oHash","buf","getPrototypeOf","_sha2_js_1","Rho","Id","idxL","idxR","shifts","shiftsL","idx","shiftsR","Kl","Kr","rotl","word","shift","group","BUF","RIPEMD160","h0","h1","h2","h3","h4","getUint32","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rr","sr","tl","tr","wrapConstructor","Maj","SHA256_K","IV","SHA256_W","SHA256","D","F","W15","W2","s0","rotr","s1","T1","T2","Chi","SHA224","_u64_js_1","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","keccakP","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","Keccak","suffix","enableXOF","posOut","state32","u32","keccak","finish","writeInto","bufferOut","xofInto","xof","genShake","wrapXOFConstructorWithOpts","crypto_1","byteLength","floor","DataView","iters","tick","ts","now","diff","nextTick","clone","toStr","defaults","hashCons","hashC","bytesLength","makeUrl","baseUrl","path","pathParams","query","pathname","insertParams","search","stringifyQuery","url","fetchData","body","headers","credentials","rawUrl","getData","endpoint_1","config_1","DEFAULT_BASE_URL","postEndpoint","address","getEndpoint","pageUrl","safe_address","transactionId","deleteEndpoint","encodedData","message_hash","uuid","signerAddress","putEndpoint","signer","safes","contractAddress","RPC_AUTHENTICATION","GAS_PRICE_TYPE","FEATURES","ConfirmationViewTypes","DeviceType","SafeAppAccessPolicyTypes","SafeAppFeatures","SafeAppSocialPlatforms","ImplementationVersionState","SafeMessageListItemType","SafeMessageStatus","TransactionTokenType","SettingsInfoType","TransactionInfoType","ConflictType","TransactionListItemType","DetailedExecutionInfoType","DurationType","StartTimeValue","LabelValue","isErrorResponse","parseResponse","resp","json","status","statusText","ok","errTxt","template","RegExp","replaceParam","searchParams","URLSearchParams","append","searchString","requestHeaders","JSON","stringify","fetch","version_js_1","BaseError","shortMessage","_args$cause","details","cause","docsPath","metaMessages","defineProperty","errors_js_1","InvalidAbiItemError","UnknownTypeError","_ref2","UnknownSolidityTypeError","_ref3","InvalidAbiParameterError","param","InvalidAbiParametersError","InvalidParameterError","SolidityProtectedKeywordError","_ref4","InvalidModifierError","_ref5","modifier","InvalidFunctionModifierError","_ref6","InvalidAbiTypeParameterError","_ref7","abiParameter","InvalidSignatureError","UnknownSignatureError","InvalidStructSignatureError","InvalidParenthesisError","current","depth","trim","CircularReferenceError","formatAbiItem_js_1","signatures","abiItem","formatAbiItem","formatAbiParameters_js_1","formatAbiParameters","regex_js_1","tupleRegex","formatAbiParameter","_result$array","components","execTyped","indexed","formatAbiParameter_js_1","abiParameters","signatures_js_1","structs_js_1","structs","parseStructs","isStructSignature","parseSignature","index_js_1","signature_","parseAbiParameter","modifiers","utils_js_2","parameters","splitParameters","errorSignatureRegex","eventSignatureRegex","functionSignatureRegex","structSignatureRegex","constructorSignatureRegex","fallbackSignatureRegex","receiveSignatureRegex","Set","abiItem_js_1","abiParameter_js_1","signature_js_1","struct_js_1","shallowStructs","signaturesLength","match","execStructSignature","properties","propertiesLength","trimmed","resolvedStructs","entriesLength","resolveStructs","typeWithoutTupleRegex","ancestors","isTupleRegex","_structs$type","has","isSolidityType","splitParameters_js_1","cache_js_1","isFunctionSignature","_match$stateMutabilit","execFunctionSignature","inputParams","inputLength","functionModifiers","returns","outputParams","outputLength","isEventSignature","execEventSignature","eventModifiers","isErrorSignature","execErrorSignature","isConstructorSignature","_match$stateMutabilit2","execConstructorSignature","isFallbackSignature","isReceiveSignature","abiParameterWithoutTupleRegex","abiParameterWithTupleRegex","dynamicIntegerRegex","_options$structs","_match$array","parameterCacheKey","getParameterCacheKey","parameterCache","isTuple","isSolidityKeyword","components_","_options$modifiers","_options$modifiers$ha","isValidDataLocation","char","bytesRegex","integerRegex","protectedKeywordsRegex","narrow_js_1","narrow","formatAbi_js_1","formatAbi","parseAbi_js_1","parseAbi","parseAbiItem_js_1","parseAbiItem","parseAbiParameter_js_1","parseAbiParameters_js_1","parseAbiParameters","regex","exec","groups","account","getAddress_js_1","keccak256_js_1","keccak256","substring","checksumAddress","abis_js_1","decodeFunctionResult_js_1","encodeFunctionData_js_1","getChainContractAddress_js_1","trim_js_1","toHex_js_1","namehash_js_1","packetToBytes_js_1","getAction_js_1","readContract_js_1","client","blockNumber","blockTag","coinType","universalResolverAddress","universalResolverAddress_","chain","getChainContractAddress","contract","functionData","addressResolverAbi","namehash","getAction","readContract","universalResolverResolveAbi","packetToBytes","decodeFunctionResult","isNullUniversalResolverError","parseAvatarRecord_js_1","getEnsText_js_1","gatewayUrls","record","getEnsText","parseAvatarRecord","reverseNode","resolvedAddress","universalResolverReverseAbi","resolverAddress","textResolverAbi","createContractEventFilter_js_1","estimateContractGas_js_1","getContractEvents_js_1","simulateContract_js_1","watchContractEvent_js_1","writeContract_js_1","getFunctionParameters","hasArgs","getEventParameters","abiEvent","publicClient","walletClient","hasPublicClient","hasWalletClient","hasReadFunction","hasWriteFunction","hasEvent","read","Proxy","simulate","simulateContract","createEventFilter","eventName","_len3","_key3","createContractEventFilter","getEvents","_len4","_key4","getContractEvents","watchEvent","_len5","_key5","watchContractEvent","write","_len6","_key6","writeContract","estimateGas","_options$account","_len7","_key7","estimateContractGas","parseAccount_js_1","contract_js_1","base_js_1","chain_js_1","contract_js_2","getCallError_js_1","extract_js_1","transactionRequest_js_1","createBatchScheduler_js_1","assertRequest_js_1","getRevertErrorData","walk","_client$batch","account_","batch","Boolean","multicall","accessList","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","rest","parseAccount","_client$chain","assertRequest","block","numberToHex","chainFormat","transactionRequest","format","formatTransactionRequest","extract","request_","startsWith","aggregate3Signature","shouldPerformMulticall","_client$batch2","batchSize","wait","multicallAddress","multicallAddress_","ClientChainNotConfiguredError","blockNumberHex","schedule","createBatchScheduler","uid","shouldSplitBatch","size","fn","calls","requests","allowFailure","callData","target","calldata","multicall3Abi","returnData","RawContractError","scheduleMulticall","ChainDoesNotSupportContract","offchainLookup","offchainLookupSignature","then","getCallError","createFilterRequestScope_js_1","getRequest","createFilterRequestScope","encodeEventTopics_js_1","fromBlock","strict","toBlock","topics","encodeEventTopics","event","events","events_","flatMap","getContractError_js_1","estimateGas_js_1","getContractError","sender","fee_js_1","estimateMaxPriorityFeePerGas_js_1","getBlock_js_1","getGasPrice_js_1","internal_estimateFeesPerGas","_baseFeeMultiplier$to","_baseFeeMultiplier$to2","_chain$fees3","_request$gasPrice","block_","baseFeeMultiplier","_chain$fees","_chain$fees$baseFeeMu","_chain$fees2","fees","BaseFeeScalarError","denominator","getBlock","estimateFeesPerGas","_request$maxFeePerGas","baseFeePerGas","Eip1559FeesNotSupportedError","internal_estimateMaxPriorityFeePerGas","account_js_1","getEstimateGasError_js_1","prepareTransactionRequest_js_1","_args$account","AccountNotFoundError","prepareTransactionRequest","balance","getEstimateGasError","fromHex_js_1","defaultPriorityFee","maxPriorityFeePerGasHex","hexToBigInt","all","block_js_1","block_js_2","blockHash","blockTag_","includeTransactions","includeTransactions_","BlockNotFoundError","formatBlock","withCache_js_1","cacheKey","getCache","cacheTime","maxAge","withCache","chainIdHex","getAbiItem_js_1","getLogs_js_1","getAbiItem","getLogs","feeHistory_js_1","blockCount","rewardPercentiles","feeHistory","formatFeeHistory","abi_js_1","decodeEventLog_js_1","log_js_1","_client","log","decodeEventLog","formatLog","isUnnamed","DecodeLogDataMismatch","DecodeLogTopicsMismatch","_err$abiItem$inputs","_filter$strict","strict_","logs","proof_js_1","storageKeys","proof","formatProof","slot","transaction_js_1","transaction_js_2","index","TransactionNotFoundError","formatTransaction","getBlockNumber_js_1","getTransaction_js_1","transactionReceipt","getBlockNumber","getTransaction","transactionBlockNumber","transactionReceipt_js_1","receipt","TransactionReceiptNotFoundError","formatTransactionReceipt","batchSize_","contracts","chunkedCalls","currentChunk","currentChunkSize","aggregate3Results","allSettled","results","reason","aggregate3Result","AbiDecodingZeroDataError","call_js_1","callRequest","dataSuffix","contracts_js_1","isBytesEqual_js_1","signatureHex","isHex","encodeDeployData","universalSignatureValidatorAbi","bytecode","universalSignatureValidatorByteCode","isBytesEqual","CallExecutionError","verifyHash_js_1","verifyHash","hashTypedData_js_1","observe_js_1","withRetry_js_1","stringify_js_1","getTransactionReceipt_js_1","watchBlockNumber_js_1","confirmations","onReplaced","pollingInterval","timeout","observerId","replacedTransaction","retrying","setTimeout","WaitForTransactionReceiptTimeoutError","_unobserve","observe","emit","_unwatch","watchBlockNumber","emitMissed","emitOnBegin","poll","onBlockNumber","blockNumber_","done","withRetry","delay","retryCount","shouldRetry","replacementTransaction","transactions","_emit$onReplaced","err_","poll_js_1","prevBlockNumber","onError","poll_","transport","pollBlockNumber","_emit$onError","interval","subscribeBlockNumber","active","unsubscribe","unsubscribe_","subscribe","onData","_data$result","onBlock","enablePolling","prevBlock","pollBlocks","_prevBlock","_prevBlock3","_prevBlock2","subscribeBlocks","rpc_js_1","getFilterChanges_js_1","uninstallFilter_js_1","onLogs","pollContractEvent","previousBlockNumber","initialized","unwatch","getFilterChanges","InvalidInputRpcError","uninstallFilter","subscribeContractEvent","formatted","createEventFilter_js_1","pollEvent","subscribeEvent","createPendingTransactionFilter_js_1","onTransactions","pollPendingTransactions","createPendingTransactionFilter","hashes","subscribePendingTransactions","mode","pending","queued","seconds","blocks","jsonRpcUrl","forking","enabled","gasLimit","interval_","timestamp","nativeCurrency","rpcUrls","blockExplorers","chainName","http","blockExplorerUrls","encodeDeployData_js_1","sendTransaction_js_1","sendTransaction","_client$account","estimateFeesPerGas_js_1","getTransactionCount_js_1","getTransactionType_js_1","getTransactionType","MaxFeePerGasTooLowError","gasPrice_","getAddress","serializedTransaction","assertCurrentChain_js_1","getTransactionError_js_1","getChainId_js_1","sendRawTransaction_js_1","getChainId","assertCurrentChain","currentChainId","_chain$serializers","serializer","serializers","signTransaction","sendRawTransaction","getTransactionError","message_","stringToHex","raw","_formatters$transacti","_client$chain2","isHex_js_1","typedData_js_1","types_","EIP712Domain","getTypesForEIP712Domain","validateTypedData","signTypedData","accounts_js_1","uid_js_1","_parameters$pollingIn","config","extend","extendFn","extended","combined","createClient_js_1","public_js_1","createClient","publicActions","test_js_1","testActions","wallet_js_1","walletActions","getEnsAddress_js_1","getEnsAvatar_js_1","getEnsName_js_1","getEnsResolver_js_1","createBlockFilter_js_1","getBalance_js_1","getBlockTransactionCount_js_1","getBytecode_js_1","getFeeHistory_js_1","getFilterLogs_js_1","getProof_js_1","getStorageAt_js_1","getTransactionConfirmations_js_1","multicall_js_1","verifyMessage_js_1","verifyTypedData_js_1","waitForTransactionReceipt_js_1","watchBlocks_js_1","watchEvent_js_1","watchPendingTransactions_js_1","createBlockFilter","getBlockTransactionCount","getBytecode","getEnsAddress","getEnsAvatar","getEnsName","getEnsResolver","getFeeHistory","getFilterLogs","getProof","estimateMaxPriorityFeePerGas","getTransactionConfirmations","verifyMessage","verifyTypedData","waitForTransactionReceipt","watchBlocks","watchPendingTransactions","dropTransaction_js_1","dumpState_js_1","getAutomine_js_1","getTxpoolContent_js_1","getTxpoolStatus_js_1","impersonateAccount_js_1","increaseTime_js_1","inspectTxpool_js_1","loadState_js_1","mine_js_1","removeBlockTimestampInterval_js_1","reset_js_1","revert_js_1","sendUnsignedTransaction_js_1","setAutomine_js_1","setBalance_js_1","setBlockGasLimit_js_1","setBlockTimestampInterval_js_1","setCode_js_1","setCoinbase_js_1","setIntervalMining_js_1","setLoggingEnabled_js_1","setMinGasPrice_js_1","setNextBlockBaseFeePerGas_js_1","setNextBlockTimestamp_js_1","setNonce_js_1","setRpcUrl_js_1","setStorageAt_js_1","snapshot_js_1","stopImpersonatingAccount_js_1","client_","dropTransaction","dumpState","getAutomine","getTxpoolContent","getTxpoolStatus","impersonateAccount","increaseTime","inspectTxpool","loadState","mine","removeBlockTimestampInterval","revert","sendUnsignedTransaction","setAutomine","setBalance","setBlockGasLimit","setBlockTimestampInterval","setCode","setCoinbase","setIntervalMining","setLoggingEnabled","setMinGasPrice","setNextBlockBaseFeePerGas","setNextBlockTimestamp","setNonce","setRpcUrl","setStorageAt","snapshot","stopImpersonatingAccount","addChain_js_1","deployContract_js_1","getAddresses_js_1","getPermissions_js_1","requestAddresses_js_1","requestPermissions_js_1","signMessage_js_1","signTransaction_js_1","signTypedData_js_1","switchChain_js_1","watchAsset_js_1","addChain","deployContract","getAddresses","requestAddresses","switchChain","watchAsset","buildRequest_js_1","retryDelay","createTransport_js_1","provider","_config$retryCount","defaultRetryCount","createTransport","wait_js_1","rankTransports","onTransports","sampleCount","transports","weights","stability","stabilityWeight","latency","latencyWeight","samples","rankTransports_","sample","transport_","start","end","maxLatency","max","scores","latencies","latencyScore","successes","stabilityScore","sort","transports_","rank","onResponse","isDeterministicError","_rankOptions$interval","rankOptions","request_js_1","transport_js_1","fetchOptions","retryCount_","timeout_","url_","UrlRequiredError","rpc","RpcRequestError","_chain$rpcUrls$defaul","webSocket","socket","getSocket","webSocketAsync","subscriptionId","universalResolverErrors","internalType","gwei","wei","ether","size_js_1","AbiConstructorNotFoundError","AbiConstructorParamsNotFoundError","AbiDecodingDataSizeInvalidError","AbiDecodingDataSizeTooSmallError","formatAbiParams","includeName","AbiEncodingArrayLengthMismatchError","givenLength","AbiEncodingBytesSizeMismatchError","expectedSize","AbiEncodingLengthMismatchError","AbiErrorInputsNotFoundError","errorName","_ref8","AbiErrorNotFoundError","AbiErrorSignatureNotFoundError","_ref9","AbiEventSignatureEmptyTopicsError","_ref10","AbiEventSignatureNotFoundError","_ref11","AbiEventNotFoundError","AbiFunctionNotFoundError","AbiFunctionOutputsNotFoundError","_ref12","AbiFunctionSignatureNotFoundError","_ref13","AbiItemAmbiguityError","BytesSizeMismatchError","_ref14","givenSize","_ref15","_ref16","InvalidAbiEncodingTypeError","_ref17","InvalidAbiDecodingTypeError","_ref18","InvalidArrayError","InvalidDefinitionTypeError","UnsupportedPackedAbiType","docsSlug","InvalidAddressError","getVersion","identifier","OffchainLookupError","_cause$metaMessages","callbackSelector","extraData","urls","getUrl","flat","OffchainLookupResponseMalformedError","OffchainLookupSenderMismatchError","blockCreated","ChainMismatchError","ChainNotFoundError","InvalidChainIdError","solidity_js_1","decodeErrorResult_js_1","formatAbiItemWithArgs_js_1","formatEther_js_1","formatGwei_js_1","_chain$nativeCurrency","prettyArgs","prettyPrint","formatEther","symbol","formatGwei","ContractFunctionExecutionError","_functionName$length","formattedArgs","formatAbiItemWithArgs","includeFunctionName","functionWithParams","getContractAddress","ContractFunctionRevertedError","decodedData","decodeErrorResult","errorArgs","firstArg","panicReasons","_errorName$length","errorWithParams","ContractFunctionZeroDataError","NegativeOffsetError","PositionOutOfBoundsError","position","SliceOffsetOutOfBoundsError","SizeExceedsPaddingSizeError","targetSize","charAt","toUpperCase","DataLengthTooLongError","consumed","DataLengthTooShortError","dataLength","IntegerOutOfRangeError","signed","InvalidBytesBooleanError","InvalidHexBooleanError","InvalidHexValueError","OffsetOutOfBoundsError","nextOffset","SizeOverflowError","maxSize","EnsAvatarInvalidMetadataError","EnsAvatarInvalidNftUriError","EnsAvatarUriResolutionError","uri","EnsAvatarUnsupportedNamespaceError","namespace","EstimateGasExecutionError","FilterTypeNotSupportedError","ExecutionRevertedError","_message$replace","FeeCapTooHighError","FeeCapTooLowError","NonceTooHighError","NonceTooLowError","NonceMaxValueError","InsufficientFundsError","IntrinsicGasTooHighError","IntrinsicGasTooLowError","TransactionTypeNotSupportedError","TipAboveFeeCapError","UnknownNodeError","HttpRequestError","WebSocketRequestError","TimeoutError","RpcError","ProviderRpcError","ParseRpcError","InvalidRequestRpcError","MethodNotFoundRpcError","InvalidParamsRpcError","InternalRpcError","ResourceNotFoundRpcError","ResourceUnavailableRpcError","TransactionRejectedRpcError","MethodNotSupportedRpcError","LimitExceededRpcError","JsonRpcVersionUnsupportedError","UserRejectedRequestError","UnauthorizedProviderError","UnsupportedProviderMethodError","ProviderDisconnectedError","ChainDisconnectedError","SwitchChainError","maxLength","padEnd","FeeConflictError","InvalidLegacyVError","InvalidSerializableTransactionError","InvalidSerializedTransactionTypeError","serializedType","InvalidSerializedTransactionError","attributes","missing","InvalidStorageKeySizeError","storageKey","TransactionExecutionError","abitype_1","getContract_js_1","getContract","custom_js_1","custom","fallback_js_1","fallback","http_js_1","createPublicClient_js_1","createPublicClient","createTestClient_js_1","createTestClient","createWalletClient_js_1","createWalletClient","webSocket_js_1","address_js_1","zeroAddress","unit_js_1","etherUnits","gweiUnits","weiUnits","number_js_1","maxInt8","maxInt16","maxInt24","maxInt32","maxInt40","maxInt48","maxInt56","maxInt64","maxInt72","maxInt80","maxInt88","maxInt96","maxInt104","maxInt112","maxInt120","maxInt128","maxInt136","maxInt144","maxInt152","maxInt160","maxInt168","maxInt176","maxInt184","maxInt192","maxInt200","maxInt208","maxInt216","maxInt224","maxInt232","maxInt240","maxInt248","maxInt256","maxUint8","maxUint16","maxUint24","maxUint32","maxUint40","maxUint48","maxUint56","maxUint64","maxUint72","maxUint80","maxUint88","maxUint96","maxUint104","maxUint112","maxUint120","maxUint128","maxUint136","maxUint144","maxUint152","maxUint160","maxUint168","maxUint176","maxUint184","maxUint192","maxUint200","maxUint208","maxUint216","maxUint224","maxUint232","maxUint240","maxUint248","maxUint256","minInt8","minInt16","minInt24","minInt32","minInt40","minInt48","minInt56","minInt64","minInt72","minInt80","minInt88","minInt96","minInt104","minInt112","minInt120","minInt128","minInt136","minInt144","minInt152","minInt160","minInt168","minInt176","minInt184","minInt192","minInt200","minInt208","minInt216","minInt224","minInt232","minInt240","minInt248","minInt256","bytes_js_1","zeroHash","strings_js_1","presignMessagePrefix","UnknownRpcError","encoding_js_1","ens_js_1","node_js_1","address_js_2","data_js_1","labelhash_js_1","labelhash","defineBlock","log_js_2","decodeAbiParameters_js_1","decodeAbiParameters","decodeDeployData_js_1","decodeDeployData","decodeFunctionData_js_1","decodeFunctionData","encodeAbiParameters_js_1","encodeAbiParameters","encodeErrorResult_js_1","encodeErrorResult","encodeFunctionResult_js_1","encodeFunctionResult","defineTransaction","transactionType","defineTransactionReceipt","defineTransactionRequest","rpcTransactionType","getContractAddress_js_1","getCreate2Address","getCreateAddress","getSerializedTransactionType_js_1","getSerializedTransactionType","hashDomain","compactSignatureToSignature_js_1","compactSignatureToSignature","hexToCompactSignature_js_1","hexToCompactSignature","hexToSignature_js_1","hexToSignature","recoverAddress_js_1","recoverAddress","recoverMessageAddress_js_1","recoverMessageAddress","recoverPublicKey_js_1","recoverTypedDataAddress_js_1","recoverTypedDataAddress","signatureToCompactSignature_js_1","signatureToCompactSignature","compactSignatureToHex_js_1","compactSignatureToHex","signatureToHex_js_1","signatureToHex","toRlp_js_1","bytesToRlp","hexToRlp","toRlp","assertTransaction_js_1","assertTransactionEIP1559","assertTransactionEIP2930","assertTransactionLegacy","toBytes_js_1","boolToBytes","numberToBytes","stringToBytes","boolToHex","fromBytes_js_1","bytesToBigInt","bytesToBool","bytesToNumber","bytesToString","ccip_js_1","ccipFetch","offchainLookupAbiItem","concat_js_1","concatHex","defineChain_js_1","defineChain","extractChain_js_1","extractChain","encodePacked_js_1","encodePacked","formatUnits_js_1","formatUnits","hexToBool","hexToString","fromRlp_js_1","fromRlp","getEventSelector_js_1","getEventSelector","getEventSignature_js_1","getEventSignature","getFunctionSelector_js_1","getFunctionSelector","getFunctionSignature_js_1","getFunctionSignature","hashMessage_js_1","isAddress_js_1","isAddress","isAddressEqual_js_1","isAddressEqual","isBytes_js_1","isHash_js_1","isHash","sha256_js_1","ripemd160_js_1","ripemd160","pad_js_1","padBytes","padHex","parseEther_js_1","parseEther","parseGwei_js_1","parseGwei","parseTransaction_js_1","parseTransaction","parseUnits_js_1","parseUnits","serializeAccessList_js_1","serializeAccessList","serializeTransaction_js_1","serializeTransaction","slice_js_1","sliceBytes","sliceHex","domainSeparator","decodeParam","arrayComponents","getArrayComponents","decodedChild","hasDynamicChild","dynamicChild","decodeArray","hasUnnamedChild","component","decodeTuple","decodeString","decodeBytes","decodeNumber","decodeAddress","decodeBool","_param$components","endsWith","decodedValues","decodeParams","description","solidityError","solidityPanic","decodeTopic","argTopics","indexedInputs","topic","nonIndexedInputs","prepareParam","dynamic","preparedParams","preparedParam","encodeParams","encoded","encodeArray","param_","encodeTuple","encodeAddress","encodeBool","encodeNumber","paramSize","bytesSize","value_","dir","encodeBytes","hexValue","partsLength","parts","encodeString","staticSize","staticParams","dynamicParams","dynamicSize","matches","prepareParams","definition","encodeArg","_abiItem$inputs","_indexedInputs$map","args_","_indexedInputs$map2","intMatch","_type","baseType","bytesMatch","arrayMatch","arrayRegex","childType","formatAbiParam","input","isArgOfType","argType","abiParameterType","getAmbiguousTypes","sourceParameters","targetParameters","parameterIndex","sourceParameter","targetParameter","isSelector","abiItems","matchedAbiItem","ambiguousTypes","publicKeyToAddress_js_1","publicKeyToAddress","address_","hexAddress","bytecodeHash","opcode","addressRegex","_error$headers","retryAfter","_response$headers$get","text","_result","data_","chains","_chain$contracts","paramsRegex","extractFunctionParts","splitParams","cursor_js_1","staticCursor","ArrayBuffer","assertPosition","decrementPosition","incrementPosition","inspectByte","position_","inspectBytes","inspectUint8","inspectUint16","getUint16","inspectUint24","getUint8","inspectUint32","pushByte","pushBytes","pushUint8","pushUint16","setUint16","pushUint24","setUint8","pushUint32","readByte","readBytes","readUint8","readUint16","readUint24","readUint32","setPosition","cursor","BYTES_PER_ELEMENT","a_","b_","equalBytes","hex_","paddedBytes","hexOrBytes","assertStartOffset","assertEndOffset","sliceLength","assertSize","bytes_","TextDecoder","decode","toOrOpts","fromRlpCursor","createCursor","readLength","readList","encoder","charCodeMap","zero","nine","charCodeToBase16","hexString","nibbleLeft","nibbleRight","_v","maxValue","MAX_SAFE_INTEGER","minValue","encodable","getEncodable","list","bodyLength","sizeOfBodyLength","getSizeOfLength","getEncodableList","bytesOrHex","sizeOfBytesLength","getEncodableBytes","nft","parseNftUri","nftUri","getNftTokenUri","resolvedNftUri","isOnChain","isEncoded","resolveAvatarUri","encodedJson","atob","decoded","parse","parseAvatarUri","getJsonImage","uriTokenId","tokenID","getMetadataAvatarUri","parseNftAvatarUri","networkRegex","ipfsHashRegex","base64Regex","dataURIRegex","isImageUri","contentType","hasOwnProperty","img","Image","onload","onerror","src","getGateway","defaultGateway","ipfsGateway","ipfs","arweaveGateway","arweave","networkRegexMatch","protocol","subpath","subtarget","isIPNS","isIPFS","replacedUri","parsedUri","btoa","image","image_url","image_data","resolvedURI","uri_","reference","asset_namespace","eip_namespace","chainID","erc_namespace","label","indexOf","callType","_cause$data","_cause$data2","_cause$reason","encodedLabelToLabelhash_js_1","encodedLabelToLabelhash","labels","hashFromEncodedLabel","hashed","encodeLabelhash_js_1","packet","encodeLabelhash","getNodeError_js_1","getNodeError","EXECUTION_REVERTED_ERROR_CODE","executionRevertedError","nodeMessage","_client$transport$onR","_client$transport","requestMap","method_","formatter_js_1","_block$transactions","difficulty","gasUsed","logsBloom","totalDifficulty","defineFormatter","extract_","_feeHistory$reward","gasUsedRatio","oldestBlock","reward","exclude","overrides","logIndex","transactionHash","transactionIndex","storageProof","transaction_","typeHex","yParity","statuses","cumulativeGasUsed","effectiveGasPrice","legacy","eip2930","eip1559","action","_client2","normalizeSignature_js_1","fn_","normalizeSignature","sha3_1","to_","keccak_256","level","valid","ripemd160_1","extractFunctionParts_js_1","extractFunctionName","extractFunctionParams","extractFunctionType","containsNodeError","callbackCount","callbackId","getListeners","listenersCache","cleanup","cleanupCache","listeners","fns","listener","_listener$fns$key","_listener$fns","initialWaitTime","_await$initialWaitTim","unpoll","initialWait","watch","schedulerCache","scheduler","getScheduler","flush","_pendingPromise$resol","pendingPromise","catch","_pendingPromise$rejec","setScheduler","promise","buildCache","cache","clear","promiseCache","responseCache","Infinity","created","delay_","attemptRetry","retry","errorInstance","signal","timeoutId","controller","AbortController","abort","clearTimeout","isows_1","withTimeout_js_1","socketsCache","WebSocket","subscriptions","onMessage","isSubscription","subscription","callback","onClose","removeEventListener","readyState","CONNECTING","onopen","socket_","signal_","withTimeout","_body$id2","_body$id","jsonrpc","CLOSED","CLOSING","id_","_body$params","secp256k1_1","yParityAndS","yParityAndS_bytes","messageBytes","prefixBytes","hashStruct","encodeData","encodedTypes","encodedValues","hashType","encodeField","encodedHashType","unsortedDeps","findTypeDependencies","deps","encodeType","primaryType_","prepend","lastIndexOf","parsedType","typeValuePairs","domain_","hashHex","replacer","space","toTransactionArray","parseAccessList","accessList_","parseEIP155Signature","transactionArray","parseTransactionEIP1559","parseTransactionEIP2930","chainIdOrV_","chainIdOrV","parseTransactionLegacy","serializedAccessList","serializeTransactionEIP1559","serializeTransactionEIP2930","serializeTransactionLegacy","validateData","struct","type_","integerMatch","size_","random","unit","decimals","display","negative","integer","fraction","rounded","time","global","self","getNativeWebSocket"],"sourceRoot":""}